{"ast":null,"code":"/**\r\n * 图片处理工具函数\r\n */\n\n/**\r\n * 将图片转换为JPEG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\nexport const convertAndCompressImage = (file, quality = 0.8, onProgress) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const img = new Image();\n      img.onload = () => {\n        // 创建canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // 设置canvas尺寸为图片原始尺寸\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // 在canvas上绘制图片\n        ctx.drawImage(img, 0, 0);\n\n        // 报告进度：50%\n        if (onProgress) onProgress(50);\n\n        // 将canvas转换为blob，强制使用JPEG格式\n        canvas.toBlob(blob => {\n          if (!blob) {\n            reject(new Error('图片转换失败'));\n            return;\n          }\n\n          // 创建新的File对象，强制使用.jpg扩展名和JPEG MIME类型\n          const newFileName = file.name.replace(/\\.[^/.]+$/, '.jpg');\n          const processedFile = new File([blob], newFileName, {\n            type: 'image/jpeg',\n            lastModified: file.lastModified\n          });\n\n          // 报告进度：100%\n          if (onProgress) onProgress(100);\n\n          // 输出压缩信息\n          console.log('原始文件大小:', file.size);\n          console.log('压缩后文件大小:', processedFile.size);\n          console.log('压缩率:', ((1 - processedFile.size / file.size) * 100).toFixed(2) + '%');\n          resolve(processedFile);\n        }, 'image/jpeg',\n        // 强制使用JPEG格式\n        quality // 使用传入的质量参数\n        );\n      };\n      img.onerror = () => {\n        reject(new Error('图片加载失败'));\n      };\n      img.src = e.target.result;\n    };\n    reader.onerror = () => {\n      reject(new Error('文件读取失败'));\n    };\n\n    // 报告进度：开始\n    if (onProgress) onProgress(0);\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\r\n * 批量处理图片文件\r\n * @param {File[]} files - 图片文件数组\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\nexport const batchProcessImages = async (files, quality = 0.8, onProgress) => {\n  const totalFiles = files.length;\n  const processedFiles = [];\n  for (let i = 0; i < totalFiles; i++) {\n    const file = files[i];\n    try {\n      // 计算当前文件的进度范围\n      const startProgress = i / totalFiles * 100;\n      const endProgress = (i + 1) / totalFiles * 100;\n      const processedFile = await convertAndCompressImage(file, quality, progress => {\n        // 将单个文件的进度映射到总体进度范围\n        const mappedProgress = startProgress + progress / 100 * (endProgress - startProgress);\n        if (onProgress) onProgress(Math.round(mappedProgress));\n      });\n      processedFiles.push(processedFile);\n    } catch (error) {\n      console.error(`处理文件 ${file.name} 失败:`, error);\n      throw error;\n    }\n  }\n  return processedFiles;\n};","map":{"version":3,"names":["convertAndCompressImage","file","quality","onProgress","Promise","resolve","reject","reader","FileReader","onload","e","img","Image","canvas","document","createElement","ctx","getContext","width","height","drawImage","toBlob","blob","Error","newFileName","name","replace","processedFile","File","type","lastModified","console","log","size","toFixed","onerror","src","target","result","readAsDataURL","batchProcessImages","files","totalFiles","length","processedFiles","i","startProgress","endProgress","progress","mappedProgress","Math","round","push","error"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\r\n * 图片处理工具函数\r\n */\r\n\r\n/**\r\n * 将图片转换为JPEG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\r\nexport const convertAndCompressImage = (file, quality = 0.8, onProgress) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (e) => {\r\n      const img = new Image();\r\n      \r\n      img.onload = () => {\r\n        // 创建canvas\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // 设置canvas尺寸为图片原始尺寸\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        \r\n        // 在canvas上绘制图片\r\n        ctx.drawImage(img, 0, 0);\r\n        \r\n        // 报告进度：50%\r\n        if (onProgress) onProgress(50);\r\n        \r\n        // 将canvas转换为blob，强制使用JPEG格式\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            if (!blob) {\r\n              reject(new Error('图片转换失败'));\r\n              return;\r\n            }\r\n            \r\n            // 创建新的File对象，强制使用.jpg扩展名和JPEG MIME类型\r\n            const newFileName = file.name.replace(/\\.[^/.]+$/, '.jpg');\r\n            const processedFile = new File([blob], newFileName, {\r\n              type: 'image/jpeg',\r\n              lastModified: file.lastModified\r\n            });\r\n            \r\n            // 报告进度：100%\r\n            if (onProgress) onProgress(100);\r\n            \r\n            // 输出压缩信息\r\n            console.log('原始文件大小:', file.size);\r\n            console.log('压缩后文件大小:', processedFile.size);\r\n            console.log('压缩率:', ((1 - processedFile.size / file.size) * 100).toFixed(2) + '%');\r\n            \r\n            resolve(processedFile);\r\n          },\r\n          'image/jpeg', // 强制使用JPEG格式\r\n          quality // 使用传入的质量参数\r\n        );\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        reject(new Error('图片加载失败'));\r\n      };\r\n      \r\n      img.src = e.target.result;\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('文件读取失败'));\r\n    };\r\n    \r\n    // 报告进度：开始\r\n    if (onProgress) onProgress(0);\r\n    \r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * 批量处理图片文件\r\n * @param {File[]} files - 图片文件数组\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\r\nexport const batchProcessImages = async (files, quality = 0.8, onProgress) => {\r\n  const totalFiles = files.length;\r\n  const processedFiles = [];\r\n  \r\n  for (let i = 0; i < totalFiles; i++) {\r\n    const file = files[i];\r\n    try {\r\n      // 计算当前文件的进度范围\r\n      const startProgress = (i / totalFiles) * 100;\r\n      const endProgress = ((i + 1) / totalFiles) * 100;\r\n      \r\n      const processedFile = await convertAndCompressImage(\r\n        file,\r\n        quality,\r\n        (progress) => {\r\n          // 将单个文件的进度映射到总体进度范围\r\n          const mappedProgress = startProgress + (progress / 100) * (endProgress - startProgress);\r\n          if (onProgress) onProgress(Math.round(mappedProgress));\r\n        }\r\n      );\r\n      \r\n      processedFiles.push(processedFile);\r\n    } catch (error) {\r\n      console.error(`处理文件 ${file.name} 失败:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  return processedFiles;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}