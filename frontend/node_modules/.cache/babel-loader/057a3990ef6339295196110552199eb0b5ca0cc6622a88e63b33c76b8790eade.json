{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios';\nimport { ArrowLeft, Plus } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\nexport default {\n  name: 'UserManagement',\n  components: {\n    ArrowLeft,\n    Plus\n  },\n  setup() {\n    const router = useRouter();\n    const loading = ref(false);\n    const formLoading = ref(false);\n    const dialogVisible = ref(false);\n    const isEdit = ref(false);\n    const userForm = ref(null);\n    const users = ref([]);\n    const units = ref([]);\n\n    // 判断当前用户是否为超级管理员\n    const isSuperAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n\n    // 当前登录用户的单位ID\n    const currentUnitId = computed(() => {\n      return auth.state.isLoggedIn ? auth.state.user.unit_id : null;\n    });\n\n    // 表单数据\n    const form = reactive({\n      id: null,\n      username: '',\n      phone: '',\n      roleId: 1,\n      unitId: null,\n      password: ''\n    });\n\n    // 表单验证规则\n    const rules = {\n      username: [{\n        required: true,\n        message: '请输入姓名',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 20,\n        message: '长度在 2 到 20 个字符',\n        trigger: 'blur'\n      }],\n      phone: [{\n        required: true,\n        message: '请输入手机号',\n        trigger: 'blur'\n      }, {\n        pattern: /^1[3-9]\\d{9}$/,\n        message: '请输入有效的手机号码',\n        trigger: 'blur'\n      }],\n      roleId: [{\n        required: true,\n        message: '请选择角色',\n        trigger: 'change'\n      }],\n      unitId: [{\n        required: true,\n        message: '请选择单位',\n        trigger: 'change'\n      }],\n      password: [{\n        required: function () {\n          // 新增管理员账号时密码必填\n          return !isEdit.value && (form.roleId === 2 || form.roleId === 3);\n        },\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 1,\n        max: 20,\n        message: '长度在 1 到 20 个字符',\n        trigger: 'blur'\n      }]\n    };\n\n    // 获取用户列表\n    const fetchUsers = async () => {\n      loading.value = true;\n      try {\n        let response;\n        if (isSuperAdmin.value) {\n          // 超级管理员获取所有用户\n          response = await axios.get('http://localhost:3000/api/users');\n        } else {\n          // 单位管理员只获取本单位员工\n          response = await axios.get(`http://localhost:3000/api/units/${currentUnitId.value}/users`);\n        }\n        users.value = response.data;\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        ElMessage.error('获取用户列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取单位列表\n    const fetchUnits = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/units');\n        units.value = response.data;\n      } catch (error) {\n        console.error('Error fetching units:', error);\n        ElMessage.error('获取单位列表失败');\n      }\n    };\n\n    // 打开添加对话框\n    const openAddDialog = () => {\n      isEdit.value = false;\n      resetForm();\n      dialogVisible.value = true;\n\n      // 如果是单位管理员，默认选择当前单位\n      if (!isSuperAdmin.value) {\n        form.unitId = currentUnitId.value;\n      }\n    };\n\n    // 处理编辑\n    const handleEdit = row => {\n      isEdit.value = true;\n      form.id = row.id;\n      form.username = row.username;\n      form.phone = row.phone;\n      form.roleId = row.role_id;\n      form.unitId = row.unit_id;\n      form.password = ''; // 编辑时密码字段为空\n      dialogVisible.value = true;\n    };\n\n    // 处理删除\n    const handleDelete = async row => {\n      try {\n        await axios.delete(`http://localhost:3000/api/users/${row.id}`);\n        ElMessage.success('用户删除成功');\n        fetchUsers();\n      } catch (error) {\n        console.error('Error deleting user:', error);\n        let errorMsg = '删除用户失败';\n        if (error.response && error.response.data && error.response.data.error) {\n          errorMsg = error.response.data.error;\n        }\n        ElMessage.error(errorMsg);\n      }\n    };\n\n    // 重置表单\n    const resetForm = () => {\n      if (userForm.value) {\n        userForm.value.resetFields();\n      }\n      form.id = null;\n      form.username = '';\n      form.phone = '';\n      form.roleId = 1;\n      form.unitId = null;\n      form.password = '';\n    };\n\n    // 提交表单\n    const submitForm = () => {\n      userForm.value.validate(async valid => {\n        if (valid) {\n          formLoading.value = true;\n          try {\n            const userData = {\n              username: form.username,\n              phone: form.phone,\n              roleId: form.roleId,\n              unitId: form.roleId !== 3 ? form.unitId : null\n            };\n\n            // 仅当有输入密码时，才添加密码字段\n            if (form.password) {\n              userData.password = form.password;\n            }\n            if (isEdit.value) {\n              // 更新用户\n              await axios.put(`http://localhost:3000/api/users/${form.id}`, userData);\n              ElMessage.success('用户更新成功');\n            } else {\n              // 添加用户\n              await axios.post('http://localhost:3000/api/users', userData);\n              ElMessage.success('用户添加成功');\n            }\n            dialogVisible.value = false;\n            fetchUsers();\n          } catch (error) {\n            console.error('Error submitting user form:', error);\n            let errorMsg = isEdit.value ? '更新用户失败' : '添加用户失败';\n            if (error.response && error.response.data && error.response.data.error) {\n              errorMsg = error.response.data.error;\n            }\n            ElMessage.error(errorMsg);\n          } finally {\n            formLoading.value = false;\n          }\n        } else {\n          ElMessage.warning('请完成必填项');\n        }\n      });\n    };\n\n    // 返回上一页\n    const goBack = () => {\n      router.back();\n    };\n    onMounted(() => {\n      fetchUsers();\n      fetchUnits();\n    });\n    return {\n      loading,\n      formLoading,\n      dialogVisible,\n      isEdit,\n      userForm,\n      users,\n      units,\n      form,\n      rules,\n      isSuperAdmin,\n      currentUnitId,\n      openAddDialog,\n      handleEdit,\n      handleDelete,\n      submitForm,\n      goBack\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useRouter","ElMessage","axios","ArrowLeft","Plus","auth","name","components","setup","router","loading","formLoading","dialogVisible","isEdit","userForm","users","units","isSuperAdmin","state","isLoggedIn","user","role_id","currentUnitId","unit_id","form","id","username","phone","roleId","unitId","password","rules","required","message","trigger","min","max","pattern","value","fetchUsers","response","get","data","error","console","fetchUnits","openAddDialog","resetForm","handleEdit","row","handleDelete","delete","success","errorMsg","resetFields","submitForm","validate","valid","userData","put","post","warning","goBack","back"],"sources":["C:\\Users\\10150\\Desktop\\Hazardous-waste-management-system\\frontend\\src\\views\\UserManagement.vue"],"sourcesContent":["<template>\n  <div class=\"user-management-container\">\n    <div class=\"header\">\n      <div class=\"back-button\" @click=\"goBack\">\n        <el-icon><arrow-left /></el-icon> 返回\n      </div>\n      <h1>人员管理</h1>\n      <div></div>\n    </div>\n\n    <div class=\"content\">\n      <div class=\"toolbar\">\n        <el-button type=\"primary\" @click=\"openAddDialog\">\n          <el-icon><plus /></el-icon> 添加用户\n        </el-button>\n      </div>\n\n      <el-table\n        v-loading=\"loading\"\n        :data=\"users\"\n        border\n        stripe\n        style=\"width: 100%; margin-top: 20px;\"\n      >\n        <el-table-column prop=\"id\" label=\"ID\" width=\"60\" />\n        <el-table-column prop=\"username\" label=\"姓名\" width=\"120\" />\n        <el-table-column prop=\"phone\" label=\"手机号\" width=\"140\" />\n        <el-table-column prop=\"role_name\" label=\"角色\" width=\"120\" />\n        <el-table-column prop=\"unit_name\" label=\"单位\" min-width=\"120\" />\n        <el-table-column label=\"操作\" width=\"180\" fixed=\"right\">\n          <template #default=\"scope\">\n            <el-button size=\"small\" @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-popconfirm\n              title=\"确定要删除此用户吗？\"\n              @confirm=\"handleDelete(scope.row)\"\n            >\n              <template #reference>\n                <el-button size=\"small\" type=\"danger\">删除</el-button>\n              </template>\n            </el-popconfirm>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 添加/编辑用户对话框 -->\n    <el-dialog\n      v-model=\"dialogVisible\"\n      :title=\"isEdit ? '编辑用户' : '添加用户'\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"userForm\"\n        :model=\"form\"\n        :rules=\"rules\"\n        label-width=\"100px\"\n        style=\"max-width: 400px; margin: 0 auto;\"\n      >\n        <el-form-item label=\"姓名\" prop=\"username\">\n          <el-input v-model=\"form.username\" placeholder=\"请输入姓名\" />\n        </el-form-item>\n        \n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input v-model=\"form.phone\" placeholder=\"请输入手机号\" />\n        </el-form-item>\n        \n        <el-form-item label=\"角色\" prop=\"roleId\">\n          <el-select v-model=\"form.roleId\" placeholder=\"请选择角色\" style=\"width: 100%\">\n            <!-- 如果是超级管理员，可以添加所有类型用户 -->\n            <el-option v-if=\"isSuperAdmin\" :value=\"3\" label=\"超级管理员\" />\n            <el-option :value=\"2\" label=\"单位管理员\" />\n            <el-option :value=\"1\" label=\"基层员工\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"单位\" prop=\"unitId\" v-if=\"form.roleId !== 3\">\n          <el-select \n            v-model=\"form.unitId\" \n            placeholder=\"请选择单位\" \n            style=\"width: 100%\"\n            :disabled=\"!isSuperAdmin && isEdit\"\n          >\n            <el-option \n              v-for=\"unit in units\" \n              :key=\"unit.id\" \n              :label=\"unit.name\" \n              :value=\"unit.id\" \n            />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item \n          label=\"密码\" \n          prop=\"password\" \n          v-if=\"form.roleId === 2 || form.roleId === 3\"\n        >\n          <el-input \n            v-model=\"form.password\" \n            placeholder=\"请输入密码\" \n            type=\"password\"\n            show-password\n          />\n          <div class=\"password-hint\" v-if=\"!isEdit\">管理员账号必须设置密码</div>\n          <div class=\"password-hint\" v-else>不修改密码请留空</div>\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"formLoading\">\n            确认\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <div class=\"footer\">\n      <p>&copy; 2025 危险废物管理系统</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport axios from 'axios';\nimport { ArrowLeft, Plus } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\n\nexport default {\n  name: 'UserManagement',\n  components: {\n    ArrowLeft,\n    Plus\n  },\n  setup() {\n    const router = useRouter();\n    const loading = ref(false);\n    const formLoading = ref(false);\n    const dialogVisible = ref(false);\n    const isEdit = ref(false);\n    const userForm = ref(null);\n    const users = ref([]);\n    const units = ref([]);\n    \n    // 判断当前用户是否为超级管理员\n    const isSuperAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n    \n    // 当前登录用户的单位ID\n    const currentUnitId = computed(() => {\n      return auth.state.isLoggedIn ? auth.state.user.unit_id : null;\n    });\n    \n    // 表单数据\n    const form = reactive({\n      id: null,\n      username: '',\n      phone: '',\n      roleId: 1,\n      unitId: null,\n      password: ''\n    });\n    \n    // 表单验证规则\n    const rules = {\n      username: [\n        { required: true, message: '请输入姓名', trigger: 'blur' },\n        { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n      ],\n      phone: [\n        { required: true, message: '请输入手机号', trigger: 'blur' },\n        { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号码', trigger: 'blur' }\n      ],\n      roleId: [\n        { required: true, message: '请选择角色', trigger: 'change' }\n      ],\n      unitId: [\n        { required: true, message: '请选择单位', trigger: 'change' }\n      ],\n      password: [\n        { \n          required: function() {\n            // 新增管理员账号时密码必填\n            return !isEdit.value && (form.roleId === 2 || form.roleId === 3);\n          }, \n          message: '请输入密码', \n          trigger: 'blur' \n        },\n        { min: 1, max: 20, message: '长度在 1 到 20 个字符', trigger: 'blur' }\n      ]\n    };\n    \n    // 获取用户列表\n    const fetchUsers = async () => {\n      loading.value = true;\n      try {\n        let response;\n        if (isSuperAdmin.value) {\n          // 超级管理员获取所有用户\n          response = await axios.get('http://localhost:3000/api/users');\n        } else {\n          // 单位管理员只获取本单位员工\n          response = await axios.get(`http://localhost:3000/api/units/${currentUnitId.value}/users`);\n        }\n        users.value = response.data;\n      } catch (error) {\n        console.error('Error fetching users:', error);\n        ElMessage.error('获取用户列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // 获取单位列表\n    const fetchUnits = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/units');\n        units.value = response.data;\n      } catch (error) {\n        console.error('Error fetching units:', error);\n        ElMessage.error('获取单位列表失败');\n      }\n    };\n    \n    // 打开添加对话框\n    const openAddDialog = () => {\n      isEdit.value = false;\n      resetForm();\n      dialogVisible.value = true;\n      \n      // 如果是单位管理员，默认选择当前单位\n      if (!isSuperAdmin.value) {\n        form.unitId = currentUnitId.value;\n      }\n    };\n    \n    // 处理编辑\n    const handleEdit = (row) => {\n      isEdit.value = true;\n      form.id = row.id;\n      form.username = row.username;\n      form.phone = row.phone;\n      form.roleId = row.role_id;\n      form.unitId = row.unit_id;\n      form.password = ''; // 编辑时密码字段为空\n      dialogVisible.value = true;\n    };\n    \n    // 处理删除\n    const handleDelete = async (row) => {\n      try {\n        await axios.delete(`http://localhost:3000/api/users/${row.id}`);\n        ElMessage.success('用户删除成功');\n        fetchUsers();\n      } catch (error) {\n        console.error('Error deleting user:', error);\n        let errorMsg = '删除用户失败';\n        if (error.response && error.response.data && error.response.data.error) {\n          errorMsg = error.response.data.error;\n        }\n        ElMessage.error(errorMsg);\n      }\n    };\n    \n    // 重置表单\n    const resetForm = () => {\n      if (userForm.value) {\n        userForm.value.resetFields();\n      }\n      form.id = null;\n      form.username = '';\n      form.phone = '';\n      form.roleId = 1;\n      form.unitId = null;\n      form.password = '';\n    };\n    \n    // 提交表单\n    const submitForm = () => {\n      userForm.value.validate(async (valid) => {\n        if (valid) {\n          formLoading.value = true;\n          try {\n            const userData = {\n              username: form.username,\n              phone: form.phone,\n              roleId: form.roleId,\n              unitId: form.roleId !== 3 ? form.unitId : null\n            };\n            \n            // 仅当有输入密码时，才添加密码字段\n            if (form.password) {\n              userData.password = form.password;\n            }\n            \n            if (isEdit.value) {\n              // 更新用户\n              await axios.put(`http://localhost:3000/api/users/${form.id}`, userData);\n              ElMessage.success('用户更新成功');\n            } else {\n              // 添加用户\n              await axios.post('http://localhost:3000/api/users', userData);\n              ElMessage.success('用户添加成功');\n            }\n            \n            dialogVisible.value = false;\n            fetchUsers();\n          } catch (error) {\n            console.error('Error submitting user form:', error);\n            let errorMsg = isEdit.value ? '更新用户失败' : '添加用户失败';\n            if (error.response && error.response.data && error.response.data.error) {\n              errorMsg = error.response.data.error;\n            }\n            ElMessage.error(errorMsg);\n          } finally {\n            formLoading.value = false;\n          }\n        } else {\n          ElMessage.warning('请完成必填项');\n        }\n      });\n    };\n    \n    // 返回上一页\n    const goBack = () => {\n      router.back();\n    };\n    \n    onMounted(() => {\n      fetchUsers();\n      fetchUnits();\n    });\n    \n    return {\n      loading,\n      formLoading,\n      dialogVisible,\n      isEdit,\n      userForm,\n      users,\n      units,\n      form,\n      rules,\n      isSuperAdmin,\n      currentUnitId,\n      openAddDialog,\n      handleEdit,\n      handleDelete,\n      submitForm,\n      goBack\n    };\n  }\n};\n</script>\n\n<style scoped>\n.user-management-container {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.header {\n  background-color: #409EFF;\n  color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.back-button {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n}\n\n.content {\n  flex: 1;\n  padding: 30px;\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.toolbar {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 10px;\n}\n\n.password-hint {\n  font-size: 12px;\n  color: #999;\n  margin-top: 5px;\n}\n\n.footer {\n  background-color: #f5f5f5;\n  padding: 15px;\n  text-align: center;\n  color: #666;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}