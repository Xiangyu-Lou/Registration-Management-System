{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\n/**\r\n * 将数据导出为CSV文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  // 如果没有数据，直接返回\n  if (!data || data.length === 0) {\n    return;\n  }\n\n  // 处理文件名\n  const safeFileName = fileName || '导出数据';\n\n  // 如果提供了图片数据，使用XLSX导出带图片的Excel\n  if (imageData && typeof XLSX !== 'undefined') {\n    exportToXLSX(data, safeFileName, headers, imageData);\n    return;\n  }\n\n  // 否则使用CSV格式导出（原有功能）\n  const fileNameWithExtension = `${safeFileName}_${new Date().toISOString().slice(0, 10)}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM，确保Excel正确识别中文\n\n  // 添加表头行\n  const headerRow = headers.map(header => header.title).join(',');\n  csvContent += headerRow + '\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      let value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number') {\n        // 对于数字类型，保留3位小数\n        return typeof value === 'number' ? value.toFixed(3) : parseFloat(value).toFixed(3);\n      }\n\n      // 处理字符串，确保带逗号的字符串被引号包围\n      value = String(value);\n      if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\n        return `\"${value.replace(/\"/g, '\"\"')}\"`;\n      }\n      return value;\n    }).join(',');\n    csvContent += row + '\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n\n  // 使用URL.createObjectURL创建下载URL\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', fileNameWithExtension);\n  link.style.visibility = 'hidden';\n\n  // 添加到文档并触发点击\n  document.body.appendChild(link);\n  link.click();\n\n  // 清理\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n\n/**\r\n * 将数据导出为带图片的Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据，格式为 {rowIndex: {colIndex: {url: string, width: number, height: number}}}\r\n */\nconst exportToXLSX = (data, fileName, headers, imageData) => {\n  // 创建工作簿\n  const wb = XLSX.utils.book_new();\n\n  // 准备数据\n  const wsData = [\n  // 表头行\n  headers.map(header => header.title)];\n\n  // 数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      let value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number') {\n        return typeof value === 'number' ? value.toFixed(3) : parseFloat(value).toFixed(3);\n      }\n      return value;\n    });\n    wsData.push(row);\n  });\n\n  // 创建工作表\n  const ws = XLSX.utils.aoa_to_sheet(wsData);\n\n  // 设置列宽\n  const colWidths = headers.map(header => ({\n    wch: Math.max(header.title.length * 2, 10)\n  }));\n  ws['!cols'] = colWidths;\n\n  // 添加工作表到工作簿\n  XLSX.utils.book_append_sheet(wb, ws, \"数据\");\n\n  // 导出Excel文件\n  const fileNameWithExtension = `${fileName}_${new Date().toISOString().slice(0, 10)}.xlsx`;\n  const wbout = XLSX.write(wb, {\n    bookType: 'xlsx',\n    type: 'array'\n  });\n\n  // 创建Blob并下载\n  const blob = new Blob([wbout], {\n    type: 'application/octet-stream'\n  });\n  saveAs(blob, fileNameWithExtension);\n};\n\n/**\r\n * 将图片URL转换为Base64\r\n * @param {String} url - 图片URL\r\n * @returns {Promise<string>} - 返回Base64编码的图片\r\n */\nexport const imageUrlToBase64 = url => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n      const dataURL = canvas.toDataURL('image/png');\n      resolve(dataURL);\n    };\n    img.onerror = error => {\n      reject(error);\n    };\n    img.src = url;\n  });\n};\n\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @param {Function} parsePhotoPath - 解析照片路径的函数\r\n * @returns {Promise<Object>} - 返回包含图片数据的对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\n  const dataToExport = [];\n  const imageData = {};\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n\n    // 基本数据\n    const rowData = {\n      '单位': record.unit_name,\n      '废物类型': record.waste_type_name,\n      '收集地点': record.location,\n      '收集时间': new Date(record.collection_start_time).toLocaleString(),\n      '数量(kg)': parseFloat(record.quantity).toFixed(3),\n      '记录时间': new Date(record.created_at).toLocaleString(),\n      '汇报人': record.creator_name || '未知',\n      '清理前照片': '',\n      '清理后照片': ''\n    };\n    dataToExport.push(rowData);\n\n    // 处理清理前照片\n    if (record.photo_path_before) {\n      const beforePaths = parsePhotoPath(record.photo_path_before);\n      if (beforePaths.length > 0) {\n        imageData[i] = imageData[i] || {};\n        imageData[i][7] = {\n          // 7是\"清理前照片\"列的索引\n          urls: beforePaths.map(path => `${baseUrl}${path}`),\n          width: 120,\n          height: 80\n        };\n      }\n    }\n\n    // 处理清理后照片\n    if (record.photo_path_after) {\n      const afterPaths = parsePhotoPath(record.photo_path_after);\n      if (afterPaths.length > 0) {\n        imageData[i] = imageData[i] || {};\n        imageData[i][8] = {\n          // 8是\"清理后照片\"列的索引\n          urls: afterPaths.map(path => `${baseUrl}${path}`),\n          width: 120,\n          height: 80\n        };\n      }\n    }\n  }\n  return {\n    dataToExport,\n    imageData\n  };\n};","map":{"version":3,"names":["XLSX","saveAs","exportToExcel","data","fileName","headers","imageData","length","safeFileName","exportToXLSX","fileNameWithExtension","Date","toISOString","slice","csvContent","headerRow","map","header","title","join","forEach","item","row","value","field","undefined","type","toFixed","parseFloat","String","includes","replace","blob","Blob","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","revokeObjectURL","wb","utils","book_new","wsData","push","ws","aoa_to_sheet","colWidths","wch","Math","max","book_append_sheet","wbout","write","bookType","imageUrlToBase64","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","width","height","ctx","getContext","drawImage","dataURL","toDataURL","onerror","error","src","prepareImageExportData","records","baseUrl","parsePhotoPath","dataToExport","i","record","rowData","unit_name","waste_type_name","location","collection_start_time","toLocaleString","quantity","created_at","creator_name","photo_path_before","beforePaths","urls","path","photo_path_after","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * 将数据导出为CSV文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  // 如果没有数据，直接返回\r\n  if (!data || data.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // 处理文件名\r\n  const safeFileName = fileName || '导出数据';\r\n  \r\n  // 如果提供了图片数据，使用XLSX导出带图片的Excel\r\n  if (imageData && typeof XLSX !== 'undefined') {\r\n    exportToXLSX(data, safeFileName, headers, imageData);\r\n    return;\r\n  }\r\n\r\n  // 否则使用CSV格式导出（原有功能）\r\n  const fileNameWithExtension = `${safeFileName}_${new Date().toISOString().slice(0, 10)}.csv`;\r\n\r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM，确保Excel正确识别中文\r\n  \r\n  // 添加表头行\r\n  const headerRow = headers.map(header => header.title).join(',');\r\n  csvContent += headerRow + '\\n';\r\n\r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      let value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number') {\r\n        // 对于数字类型，保留3位小数\r\n        return typeof value === 'number' ? value.toFixed(3) : parseFloat(value).toFixed(3);\r\n      }\r\n      \r\n      // 处理字符串，确保带逗号的字符串被引号包围\r\n      value = String(value);\r\n      if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\r\n        return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      \r\n      return value;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\n';\r\n  });\r\n\r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const link = document.createElement('a');\r\n  \r\n  // 使用URL.createObjectURL创建下载URL\r\n  const url = URL.createObjectURL(blob);\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', fileNameWithExtension);\r\n  link.style.visibility = 'hidden';\r\n  \r\n  // 添加到文档并触发点击\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  \r\n  // 清理\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n/**\r\n * 将数据导出为带图片的Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据，格式为 {rowIndex: {colIndex: {url: string, width: number, height: number}}}\r\n */\r\nconst exportToXLSX = (data, fileName, headers, imageData) => {\r\n  // 创建工作簿\r\n  const wb = XLSX.utils.book_new();\r\n  \r\n  // 准备数据\r\n  const wsData = [\r\n    // 表头行\r\n    headers.map(header => header.title)\r\n  ];\r\n  \r\n  // 数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      let value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number') {\r\n        return typeof value === 'number' ? value.toFixed(3) : parseFloat(value).toFixed(3);\r\n      }\r\n      \r\n      return value;\r\n    });\r\n    \r\n    wsData.push(row);\r\n  });\r\n  \r\n  // 创建工作表\r\n  const ws = XLSX.utils.aoa_to_sheet(wsData);\r\n  \r\n  // 设置列宽\r\n  const colWidths = headers.map(header => ({\r\n    wch: Math.max(header.title.length * 2, 10)\r\n  }));\r\n  ws['!cols'] = colWidths;\r\n  \r\n  // 添加工作表到工作簿\r\n  XLSX.utils.book_append_sheet(wb, ws, \"数据\");\r\n  \r\n  // 导出Excel文件\r\n  const fileNameWithExtension = `${fileName}_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n  const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n  \r\n  // 创建Blob并下载\r\n  const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n  saveAs(blob, fileNameWithExtension);\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64\r\n * @param {String} url - 图片URL\r\n * @returns {Promise<string>} - 返回Base64编码的图片\r\n */\r\nexport const imageUrlToBase64 = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous';\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n      const dataURL = canvas.toDataURL('image/png');\r\n      resolve(dataURL);\r\n    };\r\n    img.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n    img.src = url;\r\n  });\r\n};\r\n\r\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @param {Function} parsePhotoPath - 解析照片路径的函数\r\n * @returns {Promise<Object>} - 返回包含图片数据的对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\r\n  const dataToExport = [];\r\n  const imageData = {};\r\n  \r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    \r\n    // 基本数据\r\n    const rowData = {\r\n      '单位': record.unit_name,\r\n      '废物类型': record.waste_type_name,\r\n      '收集地点': record.location,\r\n      '收集时间': new Date(record.collection_start_time).toLocaleString(),\r\n      '数量(kg)': parseFloat(record.quantity).toFixed(3),\r\n      '记录时间': new Date(record.created_at).toLocaleString(),\r\n      '汇报人': record.creator_name || '未知',\r\n      '清理前照片': '',\r\n      '清理后照片': ''\r\n    };\r\n    \r\n    dataToExport.push(rowData);\r\n    \r\n    // 处理清理前照片\r\n    if (record.photo_path_before) {\r\n      const beforePaths = parsePhotoPath(record.photo_path_before);\r\n      if (beforePaths.length > 0) {\r\n        imageData[i] = imageData[i] || {};\r\n        imageData[i][7] = { // 7是\"清理前照片\"列的索引\r\n          urls: beforePaths.map(path => `${baseUrl}${path}`),\r\n          width: 120,\r\n          height: 80\r\n        };\r\n      }\r\n    }\r\n    \r\n    // 处理清理后照片\r\n    if (record.photo_path_after) {\r\n      const afterPaths = parsePhotoPath(record.photo_path_after);\r\n      if (afterPaths.length > 0) {\r\n        imageData[i] = imageData[i] || {};\r\n        imageData[i][8] = { // 8是\"清理后照片\"列的索引\r\n          urls: afterPaths.map(path => `${baseUrl}${path}`),\r\n          width: 120,\r\n          height: 80\r\n        };\r\n      }\r\n    }\r\n  }\r\n  \r\n  return { dataToExport, imageData };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}