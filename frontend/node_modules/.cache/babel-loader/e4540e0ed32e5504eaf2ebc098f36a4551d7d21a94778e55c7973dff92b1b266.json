{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n// 解析照片路径\nconst parsePhotoPath = path => {\n  console.log('【照片处理】开始解析照片路径:', path);\n  console.log('【照片处理】照片路径类型:', typeof path);\n  if (!path) {\n    console.log('【照片处理】照片路径为空，返回空数组');\n    return [];\n  }\n  try {\n    // 如果是字符串但看起来像数组，尝试解析为JSON\n    if (typeof path === 'string') {\n      // 检查是否是JSON格式的数组\n      if (path.startsWith('[') && path.endsWith(']')) {\n        console.log('【照片处理】照片路径是JSON格式，尝试解析');\n        try {\n          const parsed = JSON.parse(path);\n          console.log('【照片处理】JSON解析结果:', parsed);\n          if (Array.isArray(parsed)) {\n            console.log('【照片处理】解析后的照片路径数量:', parsed.length);\n            // 过滤掉空值\n            const filtered = parsed.filter(item => item);\n            if (filtered.length < parsed.length) {\n              console.log('【照片处理】过滤掉了', parsed.length - filtered.length, '个空值');\n            }\n            return filtered;\n          } else {\n            console.log('【照片处理】JSON解析结果不是数组，将其包装为数组:', [parsed]);\n            return [parsed];\n          }\n        } catch (jsonError) {\n          console.error('【照片处理】JSON解析失败:', jsonError.message);\n          // 如果解析失败，将其作为单个路径返回\n          console.log('【照片处理】JSON解析失败，作为单个路径返回:', [path]);\n          return [path];\n        }\n      }\n\n      // 检查是否是逗号分隔的路径列表\n      if (path.includes(',')) {\n        console.log('【照片处理】照片路径包含逗号，尝试按逗号分割');\n        const parts = path.split(',').map(p => p.trim()).filter(p => p);\n        console.log('【照片处理】分割后的照片路径:', parts);\n        console.log('【照片处理】分割后的照片路径数量:', parts.length);\n        return parts;\n      }\n\n      // 单个路径\n      console.log('【照片处理】照片路径是单个字符串，作为单个路径返回:', [path]);\n      return [path];\n    }\n\n    // 如果是数组，直接返回\n    if (Array.isArray(path)) {\n      console.log('【照片处理】照片路径已经是数组格式:', path);\n      console.log('【照片处理】照片路径数量:', path.length);\n      // 过滤掉空值\n      const filtered = path.filter(item => item);\n      if (filtered.length < path.length) {\n        console.log('【照片处理】过滤掉了', path.length - filtered.length, '个空值');\n      }\n      return filtered;\n    }\n\n    // 如果是对象，尝试提取URL或路径属性\n    if (typeof path === 'object' && path !== null) {\n      console.log('【照片处理】照片路径是对象:', path);\n      // 尝试提取常见的URL属性\n      if (path.url) {\n        console.log('【照片处理】从对象中提取url属性:', path.url);\n        return [path.url];\n      }\n      if (path.path) {\n        console.log('【照片处理】从对象中提取path属性:', path.path);\n        return [path.path];\n      }\n      if (path.src) {\n        console.log('【照片处理】从对象中提取src属性:', path.src);\n        return [path.src];\n      }\n\n      // 如果没有找到URL属性，将对象转为字符串\n      console.log('【照片处理】对象没有找到URL属性，转为字符串:', JSON.stringify(path));\n      return [JSON.stringify(path)];\n    }\n\n    // 其他情况，将其转为字符串并作为单个路径返回\n    console.log('【照片处理】照片路径是其他类型，转为字符串:', String(path));\n    return [String(path)];\n  } catch (error) {\n    console.error('【照片处理】解析照片路径失败:', error);\n    console.error('【照片处理】错误详情:', error.message);\n    console.error('【照片处理】错误堆栈:', error.stack);\n    // 如果解析失败，将其作为单个路径返回\n    console.log('【照片处理】解析失败，作为单个路径返回:', [String(path)]);\n    return [String(path)];\n  }\n};\n\n// 将图片URL转换为Base64\nconst imageUrlToBase64 = url => {\n  return new Promise((resolve, reject) => {\n    console.log('【照片处理】开始将图片URL转换为Base64');\n    console.log('【照片处理】原始URL:', url);\n\n    // 验证URL\n    if (!url) {\n      const error = new Error('图片URL为空');\n      console.error('【照片处理】图片URL为空，转换失败');\n      reject(error);\n      return;\n    }\n\n    // 添加时间戳避免缓存\n    const timestamp = new Date().getTime();\n    let imageUrl = url;\n\n    // 如果URL包含?，则添加&timestamp=，否则添加?timestamp=\n    if (url.includes('?')) {\n      imageUrl = `${url}&_t=${timestamp}`;\n    } else {\n      imageUrl = `${url}?_t=${timestamp}`;\n    }\n    console.log('【照片处理】添加时间戳后的URL:', imageUrl);\n\n    // 尝试解析URL，检查是否有效\n    try {\n      const parsedUrl = new URL(imageUrl);\n      console.log('【照片处理】URL解析成功:', {\n        protocol: parsedUrl.protocol,\n        hostname: parsedUrl.hostname,\n        pathname: parsedUrl.pathname,\n        origin: parsedUrl.origin\n      });\n    } catch (urlError) {\n      console.error('【照片处理】URL解析失败:', urlError.message);\n      // 继续尝试，因为有些相对路径可能在fetch中仍然有效\n    }\n\n    // 使用fetch API获取图片\n    console.log('【照片处理】开始使用fetch获取图片');\n    fetch(imageUrl, {\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      }\n    }).then(response => {\n      console.log('【照片处理】fetch响应状态:', response.status);\n      console.log('【照片处理】fetch响应类型:', response.type);\n      console.log('【照片处理】fetch响应URL:', response.url);\n\n      // 打印所有响应头\n      const headers = {};\n      response.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n      console.log('【照片处理】fetch响应头:', JSON.stringify(headers));\n      if (!response.ok) {\n        throw new Error(`HTTP错误，状态码: ${response.status}`);\n      }\n      console.log('【照片处理】fetch响应成功，开始获取blob');\n      return response.blob();\n    }).then(blob => {\n      console.log('【照片处理】获取到图片blob数据');\n      console.log('【照片处理】blob类型:', blob.type);\n      console.log('【照片处理】blob大小:', blob.size, 'bytes');\n\n      // 检查blob是否为空或太小\n      if (blob.size < 100) {\n        console.warn('【照片处理】警告: blob数据太小，可能不是有效的图片');\n      }\n\n      // 使用FileReader将blob转换为Base64\n      const reader = new FileReader();\n      console.log('【照片处理】创建FileReader对象，准备读取blob');\n      reader.onload = () => {\n        const base64data = reader.result;\n        console.log('【照片处理】FileReader读取完成，获取到Base64数据');\n        console.log('【照片处理】Base64数据长度:', base64data.length);\n        console.log('【照片处理】Base64数据前100个字符:', base64data.substring(0, 100) + '...');\n\n        // 验证Base64数据是否有效\n        if (!base64data || base64data.length < 100) {\n          console.error('【照片处理】Base64数据无效或太短');\n          reject(new Error('Base64数据无效'));\n          return;\n        }\n\n        // 检查Base64数据格式是否正确\n        if (!base64data.startsWith('data:image/')) {\n          console.warn('【照片处理】警告: Base64数据不是标准的图片格式');\n        }\n\n        // 创建一个Image对象来验证Base64数据\n        const testImg = new Image();\n        testImg.onload = () => {\n          console.log('【照片处理】Base64数据验证成功，图片尺寸:', testImg.width, 'x', testImg.height);\n          resolve(base64data);\n        };\n        testImg.onerror = () => {\n          console.error('【照片处理】Base64数据验证失败，无法加载图片');\n          // 尽管验证失败，仍然返回数据，让后续处理决定是否使用\n          resolve(base64data);\n        };\n        testImg.src = base64data;\n      };\n      reader.onerror = error => {\n        console.error('【照片处理】FileReader读取失败:', error);\n        console.error('【照片处理】错误详情:', error.message);\n        reject(new Error('FileReader读取失败'));\n      };\n      console.log('【照片处理】开始使用FileReader读取blob');\n      reader.readAsDataURL(blob);\n    }).catch(error => {\n      console.error('【照片处理】fetch或处理过程中出错:', error);\n      console.error('【照片处理】错误详情:', error.message);\n      console.error('【照片处理】错误堆栈:', error.stack);\n\n      // 尝试使用Image对象作为备选方案\n      console.log('【照片处理】尝试使用Image对象作为备选方案');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous';\n      img.onload = () => {\n        console.log('【照片处理】Image对象加载成功');\n        console.log('【照片处理】图片尺寸:', img.width, 'x', img.height);\n        try {\n          // 创建canvas并绘制图片\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          console.log('【照片处理】创建Canvas元素，尺寸:', canvas.width, 'x', canvas.height);\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          console.log('【照片处理】图片已绘制到Canvas');\n\n          // 将canvas内容转换为Base64\n          // 尝试不同的格式\n          let dataURL;\n          try {\n            dataURL = canvas.toDataURL('image/jpeg', 0.8);\n            console.log('【照片处理】Canvas转换为JPEG Base64数据成功');\n          } catch (jpegError) {\n            console.error('【照片处理】JPEG转换失败，尝试PNG:', jpegError.message);\n            try {\n              dataURL = canvas.toDataURL('image/png');\n              console.log('【照片处理】Canvas转换为PNG Base64数据成功');\n            } catch (pngError) {\n              console.error('【照片处理】PNG转换也失败:', pngError.message);\n              throw pngError;\n            }\n          }\n          console.log('【照片处理】Base64数据长度:', dataURL.length);\n          console.log('【照片处理】Base64数据前100个字符:', dataURL.substring(0, 100) + '...');\n          resolve(dataURL);\n        } catch (canvasError) {\n          console.error('【照片处理】Canvas处理失败:', canvasError);\n          console.error('【照片处理】错误详情:', canvasError.message);\n          console.error('【照片处理】错误堆栈:', canvasError.stack);\n          reject(canvasError);\n        }\n      };\n      img.onerror = imgError => {\n        console.error('【照片处理】Image对象加载失败:', imgError);\n        console.error('【照片处理】错误详情:', imgError.message);\n        console.error('【照片处理】所有尝试均失败，无法加载图片:', url);\n\n        // 创建一个简单的错误图片作为替代\n        try {\n          console.log('【照片处理】尝试创建错误占位图片');\n          const errorCanvas = document.createElement('canvas');\n          errorCanvas.width = 200;\n          errorCanvas.height = 200;\n          const ctx = errorCanvas.getContext('2d');\n\n          // 填充红色背景\n          ctx.fillStyle = '#ffeeee';\n          ctx.fillRect(0, 0, 200, 200);\n\n          // 绘制错误文本\n          ctx.fillStyle = '#ff0000';\n          ctx.font = '16px Arial';\n          ctx.textAlign = 'center';\n          ctx.fillText('图片加载失败', 100, 100);\n          const errorDataURL = errorCanvas.toDataURL('image/png');\n          console.log('【照片处理】创建错误占位图片成功');\n          resolve(errorDataURL);\n        } catch (fallbackError) {\n          console.error('【照片处理】创建错误占位图片失败:', fallbackError.message);\n          reject(new Error('图片加载失败'));\n        }\n      };\n\n      // 设置超时处理\n      const timeout = setTimeout(() => {\n        if (!img.complete) {\n          console.error('【照片处理】Image对象加载超时');\n          img.src = ''; // 取消加载\n          reject(new Error('图片加载超时'));\n        }\n      }, 10000); // 10秒超时\n\n      img.onload = function () {\n        clearTimeout(timeout);\n        this.onload(); // 调用原来的onload\n      };\n      img.onerror = function () {\n        clearTimeout(timeout);\n        this.onerror(); // 调用原来的onerror\n      };\n      console.log('【照片处理】设置Image对象的src:', imageUrl);\n      img.src = imageUrl;\n    });\n  });\n};\n\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\n  console.log('=== 【调试】exportToExcelWithImages 函数被调用 ===');\n  console.log('【调试】数据条数:', data.length);\n  console.log('【调试】headers:', JSON.stringify(headers));\n  if (!data || data.length === 0) {\n    console.error('【调试】导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('【调试】使用js-table2excel导出Excel，开始处理图片...');\n    console.log('【调试】第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n    console.log('【调试】导出文件名:', fullFileName);\n\n    // 预处理图片，确保所有图片都加载完成\n    const processedData = [];\n\n    // 记录照片处理结果\n    let totalPhotos = 0;\n    let successfulPhotos = 0;\n    let failedPhotos = 0;\n\n    // 逐行处理数据\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n      console.log(`【调试】处理第 ${rowIndex + 1}/${data.length} 条记录...`);\n      const row = data[rowIndex];\n      const record = row['__original'] || {};\n      console.log(`【调试】记录ID: ${record.id || 'unknown'}`);\n      console.log(`【调试】记录数据:`, JSON.stringify(record).substring(0, 200) + '...');\n\n      // 处理清理前照片\n      let beforePhotoData = null;\n      if (record.photo_path_before) {\n        totalPhotos++;\n        console.log(`【调试】记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_before);\n        const photoPaths = parsePhotoPath(record.photo_path_before);\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`【调试】选择第一张照片:`, firstPath);\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\n            }\n            console.log(`【调试】记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\n            try {\n              console.log(`【调试】开始转换清理前照片...`);\n              beforePhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`【调试】记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\n              console.log(`【调试】Base64数据前50个字符:`, beforePhotoData ? beforePhotoData.substring(0, 50) + '...' : 'null');\n              if (beforePhotoData && beforePhotoData.length > 100) {\n                successfulPhotos++;\n                console.log(`【调试】记录 ${rowIndex} 清理前照片转换成功`);\n              } else {\n                failedPhotos++;\n                console.error(`【调试】记录 ${rowIndex} 清理前照片转换结果无效`);\n              }\n            } catch (error) {\n              failedPhotos++;\n              console.error(`【调试】记录 ${rowIndex} 清理前照片转换失败:`, error);\n              console.error('【调试】错误详情:', error.message);\n              console.error('【调试】错误堆栈:', error.stack);\n            }\n          } else {\n            failedPhotos++;\n            console.error(`【调试】记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\n          }\n        } else {\n          failedPhotos++;\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理前照片路径`);\n        }\n      } else {\n        console.log(`【调试】记录 ${rowIndex} 没有清理前照片`);\n      }\n\n      // 处理清理后照片\n      let afterPhotoData = null;\n      if (record.photo_path_after) {\n        totalPhotos++;\n        console.log(`【调试】记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_after);\n        const photoPaths = parsePhotoPath(record.photo_path_after);\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`【调试】选择第一张照片:`, firstPath);\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\n            }\n            console.log(`【调试】记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\n            try {\n              console.log(`【调试】开始转换清理后照片...`);\n              afterPhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`【调试】记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\n              console.log(`【调试】Base64数据前50个字符:`, afterPhotoData ? afterPhotoData.substring(0, 50) + '...' : 'null');\n              if (afterPhotoData && afterPhotoData.length > 100) {\n                successfulPhotos++;\n                console.log(`【调试】记录 ${rowIndex} 清理后照片转换成功`);\n              } else {\n                failedPhotos++;\n                console.error(`【调试】记录 ${rowIndex} 清理后照片转换结果无效`);\n              }\n            } catch (error) {\n              failedPhotos++;\n              console.error(`【调试】记录 ${rowIndex} 清理后照片转换失败:`, error);\n              console.error('【调试】错误详情:', error.message);\n              console.error('【调试】错误堆栈:', error.stack);\n            }\n          } else {\n            failedPhotos++;\n            console.error(`【调试】记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\n          }\n        } else {\n          failedPhotos++;\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理后照片路径`);\n        }\n      } else {\n        console.log(`【调试】记录 ${rowIndex} 没有清理后照片`);\n      }\n\n      // 保存处理后的数据\n      processedData.push({\n        ...row,\n        __beforePhotoData: beforePhotoData,\n        __afterPhotoData: afterPhotoData\n      });\n      console.log(`【调试】记录 ${rowIndex} 处理完成，是否有照片数据:`, {\n        beforePhoto: !!beforePhotoData,\n        afterPhoto: !!afterPhotoData\n      });\n    }\n    console.log('【调试】所有图片处理完成，开始创建Excel...');\n    console.log('【调试】处理后的数据条数:', processedData.length);\n    console.log('【调试】照片处理统计:', {\n      总照片数: totalPhotos,\n      成功处理: successfulPhotos,\n      处理失败: failedPhotos\n    });\n\n    // 检查是否有任何图片数据\n    let hasImageData = false;\n    let imageDataCount = 0;\n    for (const row of processedData) {\n      if (row.__beforePhotoData || row.__afterPhotoData) {\n        hasImageData = true;\n        imageDataCount++;\n      }\n    }\n    console.log('【调试】是否有图片数据:', hasImageData ? '是' : '否');\n    console.log('【调试】包含图片的记录数:', imageDataCount);\n    if (!hasImageData) {\n      console.warn('【调试】没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\n    }\n\n    // 创建一个临时表格元素\n    const table = document.createElement('table');\n    table.style.display = 'none';\n    document.body.appendChild(table);\n    console.log('【调试】创建临时表格元素');\n\n    // 创建表头\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header => {\n      const th = document.createElement('th');\n      th.textContent = header.text;\n      headerRow.appendChild(th);\n      console.log(`【调试】添加表头: ${header.text}`);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n    console.log('【调试】表头创建完成');\n\n    // 创建表体\n    const tbody = document.createElement('tbody');\n\n    // 添加数据行\n    processedData.forEach((row, index) => {\n      console.log(`【调试】创建第 ${index + 1}/${processedData.length} 行...`);\n      const tr = document.createElement('tr');\n      headers.forEach(header => {\n        const td = document.createElement('td');\n\n        // 处理清理前照片列\n        if (header.field === '清理前照片') {\n          if (row.__beforePhotoData) {\n            console.log(`【调试】添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__beforePhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            img.alt = '清理前照片';\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__beforePhotoData.length);\n\n            // 确保图片已加载\n            if (!img.complete) {\n              console.log('【调试】图片尚未加载完成，添加onload事件');\n              img.onload = () => {\n                console.log(`【调试】第 ${index + 1} 行清理前照片加载完成`);\n              };\n              img.onerror = error => {\n                console.error(`【调试】第 ${index + 1} 行清理前照片加载失败:`, error);\n                td.textContent = '图片加载失败';\n              };\n            } else {\n              console.log(`【调试】第 ${index + 1} 行清理前照片已加载完成`);\n            }\n            td.appendChild(img);\n            console.log(`【调试】第 ${index + 1} 行清理前照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`【调试】第 ${index + 1} 行没有清理前照片`);\n          }\n        }\n        // 处理清理后照片列 \n        else if (header.field === '清理后照片') {\n          if (row.__afterPhotoData) {\n            console.log(`【调试】添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__afterPhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            img.alt = '清理后照片';\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__afterPhotoData.length);\n\n            // 确保图片已加载\n            if (!img.complete) {\n              console.log('【调试】图片尚未加载完成，添加onload事件');\n              img.onload = () => {\n                console.log(`【调试】第 ${index + 1} 行清理后照片加载完成`);\n              };\n              img.onerror = error => {\n                console.error(`【调试】第 ${index + 1} 行清理后照片加载失败:`, error);\n                td.textContent = '图片加载失败';\n              };\n            } else {\n              console.log(`【调试】第 ${index + 1} 行清理后照片已加载完成`);\n            }\n            td.appendChild(img);\n            console.log(`【调试】第 ${index + 1} 行清理后照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`【调试】第 ${index + 1} 行没有清理后照片`);\n          }\n        } else {\n          // 普通文本列\n          td.textContent = row[header.field] || '';\n          console.log(`【调试】添加第 ${index + 1} 行 ${header.field} 列: ${row[header.field] || '(空)'}`);\n        }\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n      console.log(`【调试】第 ${index + 1} 行创建完成`);\n    });\n    table.appendChild(tbody);\n    console.log('【调试】表格创建完成');\n\n    // 检查表格内容\n    console.log('【调试】表格行数:', table.rows.length);\n    console.log('【调试】表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\n\n    // 使用js-table2excel导出\n    console.log('【调试】开始使用js-table2excel导出...');\n    const table2excel = new Table2Excel();\n    console.log('【调试】Table2Excel实例创建成功');\n\n    // 确保所有图片都已加载完成\n    console.log('【调试】检查表格中的图片...');\n    const imgElements = table.querySelectorAll('img');\n    console.log(`【调试】表格中共有 ${imgElements.length} 张图片`);\n\n    // 检查每个图片的状态\n    Array.from(imgElements).forEach((img, idx) => {\n      console.log(`【调试】图片 ${idx + 1} 状态:`, {\n        complete: img.complete,\n        naturalWidth: img.naturalWidth,\n        naturalHeight: img.naturalHeight,\n        src长度: img.src.length\n      });\n    });\n\n    // 如果没有图片，直接导出\n    if (imgElements.length === 0) {\n      console.log('【调试】表格中没有图片，直接导出');\n      try {\n        console.log('【调试】调用export方法...');\n        table2excel.export(table, fullFileName);\n        console.log('【调试】export方法调用成功');\n\n        // 导出完成后移除临时表格\n        document.body.removeChild(table);\n        console.log('【调试】临时表格已移除');\n        return true;\n      } catch (exportError) {\n        console.error('【调试】export方法调用失败:', exportError);\n        console.error('【调试】错误详情:', exportError.message);\n        console.error('【调试】错误堆栈:', exportError.stack);\n\n        // 导出完成后移除临时表格\n        document.body.removeChild(table);\n        console.log('【调试】临时表格已移除');\n        throw exportError;\n      }\n    } else {\n      // 等待所有图片加载完成\n      console.log('【调试】等待所有图片加载完成后再导出');\n\n      // 创建一个Promise数组，每个Promise对应一个图片的加载\n      const imgPromises = Array.from(imgElements).map((img, imgIndex) => {\n        return new Promise(resolve => {\n          if (img.complete) {\n            console.log(`【调试】图片 ${imgIndex + 1} 已加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\n            resolve();\n          } else {\n            console.log(`【调试】等待图片 ${imgIndex + 1} 加载...`);\n            img.onload = () => {\n              console.log(`【调试】图片 ${imgIndex + 1} 加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\n              resolve();\n            };\n            img.onerror = error => {\n              console.error(`【调试】图片 ${imgIndex + 1} 加载失败:`, error);\n              console.error('【调试】错误详情:', error ? error.message : 'Unknown error');\n              resolve(); // 即使失败也继续导出\n            };\n\n            // 添加超时处理\n            setTimeout(() => {\n              if (!img.complete) {\n                console.error(`【调试】图片 ${imgIndex + 1} 加载超时`);\n                resolve(); // 超时也继续导出\n              }\n            }, 5000); // 5秒超时\n          }\n        });\n      });\n\n      // 等待所有图片加载完成或超时\n      try {\n        await Promise.all(imgPromises);\n        console.log('【调试】所有图片加载完成或超时，开始导出');\n\n        // 再次检查图片状态\n        console.log('【调试】导出前最终检查图片状态:');\n        Array.from(imgElements).forEach((img, idx) => {\n          console.log(`【调试】图片 ${idx + 1} 最终状态:`, {\n            complete: img.complete,\n            naturalWidth: img.naturalWidth,\n            naturalHeight: img.naturalHeight,\n            src长度: img.src.length\n          });\n        });\n        try {\n          console.log('【调试】调用export方法...');\n          table2excel.export(table, fullFileName);\n          console.log('【调试】export方法调用成功');\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          return true;\n        } catch (exportError) {\n          console.error('【调试】export方法调用失败:', exportError);\n          console.error('【调试】错误详情:', exportError.message);\n          console.error('【调试】错误堆栈:', exportError.stack);\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          throw exportError;\n        }\n      } catch (imgLoadError) {\n        console.error('【调试】等待图片加载过程中发生错误:', imgLoadError);\n        console.error('【调试】错误详情:', imgLoadError.message);\n        console.error('【调试】错误堆栈:', imgLoadError.stack);\n        try {\n          console.log('【调试】尝试强制导出...');\n          table2excel.export(table, fullFileName);\n          console.log('【调试】强制导出成功');\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          return true;\n        } catch (forceExportError) {\n          console.error('【调试】强制导出失败:', forceExportError);\n          console.error('【调试】错误详情:', forceExportError.message);\n          console.error('【调试】错误堆栈:', forceExportError.stack);\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          throw forceExportError;\n        }\n      }\n    }\n  } catch (error) {\n    console.error('使用js-table2excel导出Excel失败:', error);\n    console.error('错误详情:', error.message);\n    console.error('错误堆栈:', error.stack);\n\n    // 创建一个包含图片数据的对象，用于传递给exportToExcel\n    const imageData = {};\n    let hasAnyImageData = false;\n\n    // 从data中提取图片数据\n    data.forEach((row, index) => {\n      const record = row['__original'] || {};\n      if (record.photo_path_before || record.photo_path_after) {\n        imageData[index] = {\n          beforePhoto: record.photo_path_before,\n          afterPhoto: record.photo_path_after\n        };\n        hasAnyImageData = true;\n      }\n    });\n    console.log('【调试】准备回退到XLSX导出，是否有图片数据:', hasAnyImageData ? '是' : '否');\n    console.log('【调试】图片数据对象:', JSON.stringify(imageData));\n\n    // 尝试使用XLSX导出，传递图片数据\n    console.log('尝试使用XLSX导出（包含图片路径）...');\n    try {\n      // 直接在这里实现导出逻辑，而不是调用exportToExcel\n      console.log('创建工作簿...');\n      const wb = XLSX.utils.book_new();\n\n      // 准备数据\n      const exportRows = data.map(row => {\n        const exportRow = {};\n        headers.forEach(header => {\n          exportRow[header.text] = row[header.field] || '';\n        });\n        return exportRow;\n      });\n      console.log('创建工作表...');\n      const ws = XLSX.utils.json_to_sheet(exportRows);\n\n      // 添加工作表到工作簿\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n      // 处理文件名\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n      const fullFileName = `${fileName}_${timestamp}`;\n\n      // 导出\n      console.log('导出Excel文件...');\n      const excelData = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n\n      // 创建Blob\n      const blob = new Blob([excelData], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n\n      // 创建下载链接\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${fullFileName}.xlsx`;\n\n      // 触发下载\n      document.body.appendChild(a);\n      a.click();\n\n      // 清理\n      setTimeout(() => {\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }, 0);\n      console.log('XLSX导出成功（包含图片路径）');\n      return true;\n    } catch (xlsxError) {\n      console.error('XLSX导出失败:', xlsxError);\n\n      // 最后尝试CSV导出\n      console.log('尝试CSV导出...');\n      return exportToCSV(data, fileName, headers);\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const fullFileName = `${fileName}_${timestamp}`;\n  console.log('【调试】exportToExcel函数被调用，数据条数:', data.length);\n\n  // 检查图片数据\n  let hasImageData = false;\n  if (imageData) {\n    const imageDataKeys = Object.keys(imageData);\n    hasImageData = imageDataKeys.length > 0;\n    console.log('【调试】是否有图片数据:', hasImageData ? '是' : '否');\n    console.log('【调试】图片数据条数:', imageDataKeys.length);\n    if (hasImageData) {\n      // 检查第一条图片数据\n      const firstImageKey = imageDataKeys[0];\n      const firstImageData = imageData[firstImageKey];\n      console.log('【调试】第一条图片数据:', JSON.stringify(firstImageData));\n    }\n  } else {\n    console.log('【调试】没有提供图片数据对象');\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('【调试】尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('【调试】工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片路径列\n    if (hasImageData) {\n      console.log('【调试】添加图片路径到导出数据');\n      enhancedData = data.map((row, index) => {\n        const exportRow = {};\n\n        // 复制原始数据\n        headers.forEach(header => {\n          exportRow[header.text] = row[header.field] || '';\n        });\n\n        // 添加图片路径信息\n        if (imageData[index]) {\n          if (imageData[index].beforePhoto) {\n            exportRow['清理前照片路径'] = Array.isArray(imageData[index].beforePhoto) ? imageData[index].beforePhoto.join(', ') : imageData[index].beforePhoto;\n          }\n          if (imageData[index].afterPhoto) {\n            exportRow['清理后照片路径'] = Array.isArray(imageData[index].afterPhoto) ? imageData[index].afterPhoto.join(', ') : imageData[index].afterPhoto;\n          }\n        }\n        return exportRow;\n      });\n    } else {\n      // 没有图片数据，只导出文本\n      enhancedData = data.map(row => {\n        const exportRow = {};\n        headers.forEach(header => {\n          exportRow[header.text] = row[header.field] || '';\n        });\n        return exportRow;\n      });\n    }\n    console.log('【调试】创建工作表...');\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n    // 导出\n    console.log('【调试】导出Excel文件...');\n    const excelData = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n\n    // 创建Blob\n    const blob = new Blob([excelData], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${fullFileName}.xlsx`;\n\n    // 触发下载\n    document.body.appendChild(a);\n    a.click();\n\n    // 清理\n    setTimeout(() => {\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }, 0);\n    console.log('【调试】Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('【调试】Excel导出失败:', error);\n    console.error('【调试】错误详情:', error.message);\n    console.error('【调试】错误堆栈:', error.stack);\n\n    // 尝试CSV导出\n    console.log('【调试】尝试CSV导出...');\n    return exportToCSV(data, fileName, headers);\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\n      }\n    });\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","Table2Excel","console","log","version","Object","keys","join","parsePhotoPath","path","startsWith","endsWith","parsed","JSON","parse","Array","isArray","length","filtered","filter","item","jsonError","error","message","includes","parts","split","map","p","trim","url","src","stringify","String","stack","imageUrlToBase64","Promise","resolve","reject","Error","timestamp","Date","getTime","imageUrl","parsedUrl","URL","protocol","hostname","pathname","origin","urlError","fetch","method","mode","cache","credentials","headers","then","response","status","type","forEach","value","key","ok","blob","size","warn","reader","FileReader","onload","base64data","result","substring","testImg","Image","width","height","onerror","readAsDataURL","catch","img","crossOrigin","canvas","document","createElement","ctx","getContext","drawImage","dataURL","toDataURL","jpegError","pngError","canvasError","imgError","errorCanvas","fillStyle","fillRect","font","textAlign","fillText","errorDataURL","fallbackError","timeout","setTimeout","complete","clearTimeout","exportToExcelWithImages","data","fileName","replace","toISOString","fullFileName","processedData","totalPhotos","successfulPhotos","failedPhotos","rowIndex","row","record","id","beforePhotoData","photo_path_before","photoPaths","firstPath","window","location","afterPhotoData","photo_path_after","push","__beforePhotoData","__afterPhotoData","beforePhoto","afterPhoto","总照片数","成功处理","处理失败","hasImageData","imageDataCount","table","style","display","body","appendChild","thead","headerRow","header","th","textContent","text","tbody","index","tr","td","field","alt","rows","cells","table2excel","imgElements","querySelectorAll","from","idx","naturalWidth","naturalHeight","src长度","export","removeChild","exportError","imgPromises","imgIndex","all","imgLoadError","forceExportError","imageData","hasAnyImageData","wb","utils","book_new","exportRows","exportRow","ws","json_to_sheet","book_append_sheet","excelData","write","bookType","Blob","createObjectURL","a","href","download","click","revokeObjectURL","xlsxError","exportToCSV","exportToExcel","imageDataKeys","firstImageKey","firstImageData","enhancedData","csvFileName","csvContent","h","title","undefined","cellValue","link","setAttribute","visibility","prepareImageExportData","records","baseUrl","beforeImages","afterImages","beforePaths","e","pathStr","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n// 解析照片路径\r\nconst parsePhotoPath = (path) => {\r\n  console.log('【照片处理】开始解析照片路径:', path);\r\n  console.log('【照片处理】照片路径类型:', typeof path);\r\n  \r\n  if (!path) {\r\n    console.log('【照片处理】照片路径为空，返回空数组');\r\n    return [];\r\n  }\r\n  \r\n  try {\r\n    // 如果是字符串但看起来像数组，尝试解析为JSON\r\n    if (typeof path === 'string') {\r\n      // 检查是否是JSON格式的数组\r\n      if (path.startsWith('[') && path.endsWith(']')) {\r\n        console.log('【照片处理】照片路径是JSON格式，尝试解析');\r\n        try {\r\n          const parsed = JSON.parse(path);\r\n          console.log('【照片处理】JSON解析结果:', parsed);\r\n          \r\n          if (Array.isArray(parsed)) {\r\n            console.log('【照片处理】解析后的照片路径数量:', parsed.length);\r\n            // 过滤掉空值\r\n            const filtered = parsed.filter(item => item);\r\n            if (filtered.length < parsed.length) {\r\n              console.log('【照片处理】过滤掉了', parsed.length - filtered.length, '个空值');\r\n            }\r\n            return filtered;\r\n          } else {\r\n            console.log('【照片处理】JSON解析结果不是数组，将其包装为数组:', [parsed]);\r\n            return [parsed];\r\n          }\r\n        } catch (jsonError) {\r\n          console.error('【照片处理】JSON解析失败:', jsonError.message);\r\n          // 如果解析失败，将其作为单个路径返回\r\n          console.log('【照片处理】JSON解析失败，作为单个路径返回:', [path]);\r\n          return [path];\r\n        }\r\n      }\r\n      \r\n      // 检查是否是逗号分隔的路径列表\r\n      if (path.includes(',')) {\r\n        console.log('【照片处理】照片路径包含逗号，尝试按逗号分割');\r\n        const parts = path.split(',').map(p => p.trim()).filter(p => p);\r\n        console.log('【照片处理】分割后的照片路径:', parts);\r\n        console.log('【照片处理】分割后的照片路径数量:', parts.length);\r\n        return parts;\r\n      }\r\n      \r\n      // 单个路径\r\n      console.log('【照片处理】照片路径是单个字符串，作为单个路径返回:', [path]);\r\n      return [path];\r\n    }\r\n    \r\n    // 如果是数组，直接返回\r\n    if (Array.isArray(path)) {\r\n      console.log('【照片处理】照片路径已经是数组格式:', path);\r\n      console.log('【照片处理】照片路径数量:', path.length);\r\n      // 过滤掉空值\r\n      const filtered = path.filter(item => item);\r\n      if (filtered.length < path.length) {\r\n        console.log('【照片处理】过滤掉了', path.length - filtered.length, '个空值');\r\n      }\r\n      return filtered;\r\n    }\r\n    \r\n    // 如果是对象，尝试提取URL或路径属性\r\n    if (typeof path === 'object' && path !== null) {\r\n      console.log('【照片处理】照片路径是对象:', path);\r\n      // 尝试提取常见的URL属性\r\n      if (path.url) {\r\n        console.log('【照片处理】从对象中提取url属性:', path.url);\r\n        return [path.url];\r\n      }\r\n      if (path.path) {\r\n        console.log('【照片处理】从对象中提取path属性:', path.path);\r\n        return [path.path];\r\n      }\r\n      if (path.src) {\r\n        console.log('【照片处理】从对象中提取src属性:', path.src);\r\n        return [path.src];\r\n      }\r\n      \r\n      // 如果没有找到URL属性，将对象转为字符串\r\n      console.log('【照片处理】对象没有找到URL属性，转为字符串:', JSON.stringify(path));\r\n      return [JSON.stringify(path)];\r\n    }\r\n    \r\n    // 其他情况，将其转为字符串并作为单个路径返回\r\n    console.log('【照片处理】照片路径是其他类型，转为字符串:', String(path));\r\n    return [String(path)];\r\n  } catch (error) {\r\n    console.error('【照片处理】解析照片路径失败:', error);\r\n    console.error('【照片处理】错误详情:', error.message);\r\n    console.error('【照片处理】错误堆栈:', error.stack);\r\n    // 如果解析失败，将其作为单个路径返回\r\n    console.log('【照片处理】解析失败，作为单个路径返回:', [String(path)]);\r\n    return [String(path)];\r\n  }\r\n};\r\n\r\n// 将图片URL转换为Base64\r\nconst imageUrlToBase64 = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log('【照片处理】开始将图片URL转换为Base64');\r\n    console.log('【照片处理】原始URL:', url);\r\n    \r\n    // 验证URL\r\n    if (!url) {\r\n      const error = new Error('图片URL为空');\r\n      console.error('【照片处理】图片URL为空，转换失败');\r\n      reject(error);\r\n      return;\r\n    }\r\n    \r\n    // 添加时间戳避免缓存\r\n    const timestamp = new Date().getTime();\r\n    let imageUrl = url;\r\n    \r\n    // 如果URL包含?，则添加&timestamp=，否则添加?timestamp=\r\n    if (url.includes('?')) {\r\n      imageUrl = `${url}&_t=${timestamp}`;\r\n    } else {\r\n      imageUrl = `${url}?_t=${timestamp}`;\r\n    }\r\n    \r\n    console.log('【照片处理】添加时间戳后的URL:', imageUrl);\r\n    \r\n    // 尝试解析URL，检查是否有效\r\n    try {\r\n      const parsedUrl = new URL(imageUrl);\r\n      console.log('【照片处理】URL解析成功:', {\r\n        protocol: parsedUrl.protocol,\r\n        hostname: parsedUrl.hostname,\r\n        pathname: parsedUrl.pathname,\r\n        origin: parsedUrl.origin\r\n      });\r\n    } catch (urlError) {\r\n      console.error('【照片处理】URL解析失败:', urlError.message);\r\n      // 继续尝试，因为有些相对路径可能在fetch中仍然有效\r\n    }\r\n    \r\n    // 使用fetch API获取图片\r\n    console.log('【照片处理】开始使用fetch获取图片');\r\n    fetch(imageUrl, {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    })\r\n    .then(response => {\r\n      console.log('【照片处理】fetch响应状态:', response.status);\r\n      console.log('【照片处理】fetch响应类型:', response.type);\r\n      console.log('【照片处理】fetch响应URL:', response.url);\r\n      \r\n      // 打印所有响应头\r\n      const headers = {};\r\n      response.headers.forEach((value, key) => {\r\n        headers[key] = value;\r\n      });\r\n      console.log('【照片处理】fetch响应头:', JSON.stringify(headers));\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP错误，状态码: ${response.status}`);\r\n      }\r\n      \r\n      console.log('【照片处理】fetch响应成功，开始获取blob');\r\n      return response.blob();\r\n    })\r\n    .then(blob => {\r\n      console.log('【照片处理】获取到图片blob数据');\r\n      console.log('【照片处理】blob类型:', blob.type);\r\n      console.log('【照片处理】blob大小:', blob.size, 'bytes');\r\n      \r\n      // 检查blob是否为空或太小\r\n      if (blob.size < 100) {\r\n        console.warn('【照片处理】警告: blob数据太小，可能不是有效的图片');\r\n      }\r\n      \r\n      // 使用FileReader将blob转换为Base64\r\n      const reader = new FileReader();\r\n      console.log('【照片处理】创建FileReader对象，准备读取blob');\r\n      \r\n      reader.onload = () => {\r\n        const base64data = reader.result;\r\n        console.log('【照片处理】FileReader读取完成，获取到Base64数据');\r\n        console.log('【照片处理】Base64数据长度:', base64data.length);\r\n        console.log('【照片处理】Base64数据前100个字符:', base64data.substring(0, 100) + '...');\r\n        \r\n        // 验证Base64数据是否有效\r\n        if (!base64data || base64data.length < 100) {\r\n          console.error('【照片处理】Base64数据无效或太短');\r\n          reject(new Error('Base64数据无效'));\r\n          return;\r\n        }\r\n        \r\n        // 检查Base64数据格式是否正确\r\n        if (!base64data.startsWith('data:image/')) {\r\n          console.warn('【照片处理】警告: Base64数据不是标准的图片格式');\r\n        }\r\n        \r\n        // 创建一个Image对象来验证Base64数据\r\n        const testImg = new Image();\r\n        testImg.onload = () => {\r\n          console.log('【照片处理】Base64数据验证成功，图片尺寸:', testImg.width, 'x', testImg.height);\r\n          resolve(base64data);\r\n        };\r\n        \r\n        testImg.onerror = () => {\r\n          console.error('【照片处理】Base64数据验证失败，无法加载图片');\r\n          // 尽管验证失败，仍然返回数据，让后续处理决定是否使用\r\n          resolve(base64data);\r\n        };\r\n        \r\n        testImg.src = base64data;\r\n      };\r\n      \r\n      reader.onerror = (error) => {\r\n        console.error('【照片处理】FileReader读取失败:', error);\r\n        console.error('【照片处理】错误详情:', error.message);\r\n        reject(new Error('FileReader读取失败'));\r\n      };\r\n      \r\n      console.log('【照片处理】开始使用FileReader读取blob');\r\n      reader.readAsDataURL(blob);\r\n    })\r\n    .catch(error => {\r\n      console.error('【照片处理】fetch或处理过程中出错:', error);\r\n      console.error('【照片处理】错误详情:', error.message);\r\n      console.error('【照片处理】错误堆栈:', error.stack);\r\n      \r\n      // 尝试使用Image对象作为备选方案\r\n      console.log('【照片处理】尝试使用Image对象作为备选方案');\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous';\r\n      \r\n      img.onload = () => {\r\n        console.log('【照片处理】Image对象加载成功');\r\n        console.log('【照片处理】图片尺寸:', img.width, 'x', img.height);\r\n        \r\n        try {\r\n          // 创建canvas并绘制图片\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n          console.log('【照片处理】创建Canvas元素，尺寸:', canvas.width, 'x', canvas.height);\r\n          \r\n          const ctx = canvas.getContext('2d');\r\n          ctx.drawImage(img, 0, 0);\r\n          console.log('【照片处理】图片已绘制到Canvas');\r\n          \r\n          // 将canvas内容转换为Base64\r\n          // 尝试不同的格式\r\n          let dataURL;\r\n          try {\r\n            dataURL = canvas.toDataURL('image/jpeg', 0.8);\r\n            console.log('【照片处理】Canvas转换为JPEG Base64数据成功');\r\n          } catch (jpegError) {\r\n            console.error('【照片处理】JPEG转换失败，尝试PNG:', jpegError.message);\r\n            try {\r\n              dataURL = canvas.toDataURL('image/png');\r\n              console.log('【照片处理】Canvas转换为PNG Base64数据成功');\r\n            } catch (pngError) {\r\n              console.error('【照片处理】PNG转换也失败:', pngError.message);\r\n              throw pngError;\r\n            }\r\n          }\r\n          \r\n          console.log('【照片处理】Base64数据长度:', dataURL.length);\r\n          console.log('【照片处理】Base64数据前100个字符:', dataURL.substring(0, 100) + '...');\r\n          \r\n          resolve(dataURL);\r\n        } catch (canvasError) {\r\n          console.error('【照片处理】Canvas处理失败:', canvasError);\r\n          console.error('【照片处理】错误详情:', canvasError.message);\r\n          console.error('【照片处理】错误堆栈:', canvasError.stack);\r\n          reject(canvasError);\r\n        }\r\n      };\r\n      \r\n      img.onerror = (imgError) => {\r\n        console.error('【照片处理】Image对象加载失败:', imgError);\r\n        console.error('【照片处理】错误详情:', imgError.message);\r\n        console.error('【照片处理】所有尝试均失败，无法加载图片:', url);\r\n        \r\n        // 创建一个简单的错误图片作为替代\r\n        try {\r\n          console.log('【照片处理】尝试创建错误占位图片');\r\n          const errorCanvas = document.createElement('canvas');\r\n          errorCanvas.width = 200;\r\n          errorCanvas.height = 200;\r\n          const ctx = errorCanvas.getContext('2d');\r\n          \r\n          // 填充红色背景\r\n          ctx.fillStyle = '#ffeeee';\r\n          ctx.fillRect(0, 0, 200, 200);\r\n          \r\n          // 绘制错误文本\r\n          ctx.fillStyle = '#ff0000';\r\n          ctx.font = '16px Arial';\r\n          ctx.textAlign = 'center';\r\n          ctx.fillText('图片加载失败', 100, 100);\r\n          \r\n          const errorDataURL = errorCanvas.toDataURL('image/png');\r\n          console.log('【照片处理】创建错误占位图片成功');\r\n          resolve(errorDataURL);\r\n        } catch (fallbackError) {\r\n          console.error('【照片处理】创建错误占位图片失败:', fallbackError.message);\r\n          reject(new Error('图片加载失败'));\r\n        }\r\n      };\r\n      \r\n      // 设置超时处理\r\n      const timeout = setTimeout(() => {\r\n        if (!img.complete) {\r\n          console.error('【照片处理】Image对象加载超时');\r\n          img.src = ''; // 取消加载\r\n          reject(new Error('图片加载超时'));\r\n        }\r\n      }, 10000); // 10秒超时\r\n      \r\n      img.onload = function() {\r\n        clearTimeout(timeout);\r\n        this.onload(); // 调用原来的onload\r\n      };\r\n      \r\n      img.onerror = function() {\r\n        clearTimeout(timeout);\r\n        this.onerror(); // 调用原来的onerror\r\n      };\r\n      \r\n      console.log('【照片处理】设置Image对象的src:', imageUrl);\r\n      img.src = imageUrl;\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\r\n  console.log('=== 【调试】exportToExcelWithImages 函数被调用 ===');\r\n  console.log('【调试】数据条数:', data.length);\r\n  console.log('【调试】headers:', JSON.stringify(headers));\r\n  \r\n  if (!data || data.length === 0) {\r\n    console.error('【调试】导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('【调试】使用js-table2excel导出Excel，开始处理图片...');\r\n    console.log('【调试】第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    console.log('【调试】导出文件名:', fullFileName);\r\n    \r\n    // 预处理图片，确保所有图片都加载完成\r\n    const processedData = [];\r\n    \r\n    // 记录照片处理结果\r\n    let totalPhotos = 0;\r\n    let successfulPhotos = 0;\r\n    let failedPhotos = 0;\r\n    \r\n    // 逐行处理数据\r\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n      console.log(`【调试】处理第 ${rowIndex + 1}/${data.length} 条记录...`);\r\n      const row = data[rowIndex];\r\n      const record = row['__original'] || {};\r\n      console.log(`【调试】记录ID: ${record.id || 'unknown'}`);\r\n      console.log(`【调试】记录数据:`, JSON.stringify(record).substring(0, 200) + '...');\r\n      \r\n      // 处理清理前照片\r\n      let beforePhotoData = null;\r\n      if (record.photo_path_before) {\r\n        totalPhotos++;\r\n        console.log(`【调试】记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\r\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_before);\r\n        \r\n        const photoPaths = parsePhotoPath(record.photo_path_before);\r\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\r\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`【调试】选择第一张照片:`, firstPath);\r\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\r\n            }\r\n            \r\n            console.log(`【调试】记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`【调试】开始转换清理前照片...`);\r\n              beforePhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`【调试】记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\r\n              console.log(`【调试】Base64数据前50个字符:`, beforePhotoData ? beforePhotoData.substring(0, 50) + '...' : 'null');\r\n              \r\n              if (beforePhotoData && beforePhotoData.length > 100) {\r\n                successfulPhotos++;\r\n                console.log(`【调试】记录 ${rowIndex} 清理前照片转换成功`);\r\n              } else {\r\n                failedPhotos++;\r\n                console.error(`【调试】记录 ${rowIndex} 清理前照片转换结果无效`);\r\n              }\r\n            } catch (error) {\r\n              failedPhotos++;\r\n              console.error(`【调试】记录 ${rowIndex} 清理前照片转换失败:`, error);\r\n              console.error('【调试】错误详情:', error.message);\r\n              console.error('【调试】错误堆栈:', error.stack);\r\n            }\r\n          } else {\r\n            failedPhotos++;\r\n            console.error(`【调试】记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          failedPhotos++;\r\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理前照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`【调试】记录 ${rowIndex} 没有清理前照片`);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      let afterPhotoData = null;\r\n      if (record.photo_path_after) {\r\n        totalPhotos++;\r\n        console.log(`【调试】记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\r\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_after);\r\n        \r\n        const photoPaths = parsePhotoPath(record.photo_path_after);\r\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\r\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`【调试】选择第一张照片:`, firstPath);\r\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\r\n            }\r\n            \r\n            console.log(`【调试】记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`【调试】开始转换清理后照片...`);\r\n              afterPhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`【调试】记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\r\n              console.log(`【调试】Base64数据前50个字符:`, afterPhotoData ? afterPhotoData.substring(0, 50) + '...' : 'null');\r\n              \r\n              if (afterPhotoData && afterPhotoData.length > 100) {\r\n                successfulPhotos++;\r\n                console.log(`【调试】记录 ${rowIndex} 清理后照片转换成功`);\r\n              } else {\r\n                failedPhotos++;\r\n                console.error(`【调试】记录 ${rowIndex} 清理后照片转换结果无效`);\r\n              }\r\n            } catch (error) {\r\n              failedPhotos++;\r\n              console.error(`【调试】记录 ${rowIndex} 清理后照片转换失败:`, error);\r\n              console.error('【调试】错误详情:', error.message);\r\n              console.error('【调试】错误堆栈:', error.stack);\r\n            }\r\n          } else {\r\n            failedPhotos++;\r\n            console.error(`【调试】记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          failedPhotos++;\r\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理后照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`【调试】记录 ${rowIndex} 没有清理后照片`);\r\n      }\r\n      \r\n      // 保存处理后的数据\r\n      processedData.push({\r\n        ...row,\r\n        __beforePhotoData: beforePhotoData,\r\n        __afterPhotoData: afterPhotoData\r\n      });\r\n      console.log(`【调试】记录 ${rowIndex} 处理完成，是否有照片数据:`, {\r\n        beforePhoto: !!beforePhotoData,\r\n        afterPhoto: !!afterPhotoData\r\n      });\r\n    }\r\n    \r\n    console.log('【调试】所有图片处理完成，开始创建Excel...');\r\n    console.log('【调试】处理后的数据条数:', processedData.length);\r\n    console.log('【调试】照片处理统计:', {\r\n      总照片数: totalPhotos,\r\n      成功处理: successfulPhotos,\r\n      处理失败: failedPhotos\r\n    });\r\n    \r\n    // 检查是否有任何图片数据\r\n    let hasImageData = false;\r\n    let imageDataCount = 0;\r\n    for (const row of processedData) {\r\n      if (row.__beforePhotoData || row.__afterPhotoData) {\r\n        hasImageData = true;\r\n        imageDataCount++;\r\n      }\r\n    }\r\n    \r\n    console.log('【调试】是否有图片数据:', hasImageData ? '是' : '否');\r\n    console.log('【调试】包含图片的记录数:', imageDataCount);\r\n    \r\n    if (!hasImageData) {\r\n      console.warn('【调试】没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\r\n    }\r\n    \r\n    // 创建一个临时表格元素\r\n    const table = document.createElement('table');\r\n    table.style.display = 'none';\r\n    document.body.appendChild(table);\r\n    console.log('【调试】创建临时表格元素');\r\n    \r\n    // 创建表头\r\n    const thead = document.createElement('thead');\r\n    const headerRow = document.createElement('tr');\r\n    \r\n    headers.forEach(header => {\r\n      const th = document.createElement('th');\r\n      th.textContent = header.text;\r\n      headerRow.appendChild(th);\r\n      console.log(`【调试】添加表头: ${header.text}`);\r\n    });\r\n    \r\n    thead.appendChild(headerRow);\r\n    table.appendChild(thead);\r\n    console.log('【调试】表头创建完成');\r\n    \r\n    // 创建表体\r\n    const tbody = document.createElement('tbody');\r\n    \r\n    // 添加数据行\r\n    processedData.forEach((row, index) => {\r\n      console.log(`【调试】创建第 ${index + 1}/${processedData.length} 行...`);\r\n      const tr = document.createElement('tr');\r\n      \r\n      headers.forEach(header => {\r\n        const td = document.createElement('td');\r\n        \r\n        // 处理清理前照片列\r\n        if (header.field === '清理前照片') {\r\n          if (row.__beforePhotoData) {\r\n            console.log(`【调试】添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__beforePhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            img.alt = '清理前照片';\r\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__beforePhotoData.length);\r\n            \r\n            // 确保图片已加载\r\n            if (!img.complete) {\r\n              console.log('【调试】图片尚未加载完成，添加onload事件');\r\n              img.onload = () => {\r\n                console.log(`【调试】第 ${index + 1} 行清理前照片加载完成`);\r\n              };\r\n              img.onerror = (error) => {\r\n                console.error(`【调试】第 ${index + 1} 行清理前照片加载失败:`, error);\r\n                td.textContent = '图片加载失败';\r\n              };\r\n            } else {\r\n              console.log(`【调试】第 ${index + 1} 行清理前照片已加载完成`);\r\n            }\r\n            \r\n            td.appendChild(img);\r\n            console.log(`【调试】第 ${index + 1} 行清理前照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`【调试】第 ${index + 1} 行没有清理前照片`);\r\n          }\r\n        }\r\n        // 处理清理后照片列 \r\n        else if (header.field === '清理后照片') {\r\n          if (row.__afterPhotoData) {\r\n            console.log(`【调试】添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__afterPhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            img.alt = '清理后照片';\r\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__afterPhotoData.length);\r\n            \r\n            // 确保图片已加载\r\n            if (!img.complete) {\r\n              console.log('【调试】图片尚未加载完成，添加onload事件');\r\n              img.onload = () => {\r\n                console.log(`【调试】第 ${index + 1} 行清理后照片加载完成`);\r\n              };\r\n              img.onerror = (error) => {\r\n                console.error(`【调试】第 ${index + 1} 行清理后照片加载失败:`, error);\r\n                td.textContent = '图片加载失败';\r\n              };\r\n            } else {\r\n              console.log(`【调试】第 ${index + 1} 行清理后照片已加载完成`);\r\n            }\r\n            \r\n            td.appendChild(img);\r\n            console.log(`【调试】第 ${index + 1} 行清理后照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`【调试】第 ${index + 1} 行没有清理后照片`);\r\n          }\r\n        }\r\n        else {\r\n          // 普通文本列\r\n          td.textContent = row[header.field] || '';\r\n          console.log(`【调试】添加第 ${index + 1} 行 ${header.field} 列: ${row[header.field] || '(空)'}`);\r\n        }\r\n        \r\n        tr.appendChild(td);\r\n      });\r\n      \r\n      tbody.appendChild(tr);\r\n      console.log(`【调试】第 ${index + 1} 行创建完成`);\r\n    });\r\n    \r\n    table.appendChild(tbody);\r\n    console.log('【调试】表格创建完成');\r\n    \r\n    // 检查表格内容\r\n    console.log('【调试】表格行数:', table.rows.length);\r\n    console.log('【调试】表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\r\n    \r\n    // 使用js-table2excel导出\r\n    console.log('【调试】开始使用js-table2excel导出...');\r\n    const table2excel = new Table2Excel();\r\n    console.log('【调试】Table2Excel实例创建成功');\r\n\r\n    // 确保所有图片都已加载完成\r\n    console.log('【调试】检查表格中的图片...');\r\n    const imgElements = table.querySelectorAll('img');\r\n    console.log(`【调试】表格中共有 ${imgElements.length} 张图片`);\r\n    \r\n    // 检查每个图片的状态\r\n    Array.from(imgElements).forEach((img, idx) => {\r\n      console.log(`【调试】图片 ${idx + 1} 状态:`, {\r\n        complete: img.complete,\r\n        naturalWidth: img.naturalWidth,\r\n        naturalHeight: img.naturalHeight,\r\n        src长度: img.src.length\r\n      });\r\n    });\r\n\r\n    // 如果没有图片，直接导出\r\n    if (imgElements.length === 0) {\r\n      console.log('【调试】表格中没有图片，直接导出');\r\n      try {\r\n        console.log('【调试】调用export方法...');\r\n        table2excel.export(table, fullFileName);\r\n        console.log('【调试】export方法调用成功');\r\n        \r\n        // 导出完成后移除临时表格\r\n        document.body.removeChild(table);\r\n        console.log('【调试】临时表格已移除');\r\n        \r\n        return true;\r\n      } catch (exportError) {\r\n        console.error('【调试】export方法调用失败:', exportError);\r\n        console.error('【调试】错误详情:', exportError.message);\r\n        console.error('【调试】错误堆栈:', exportError.stack);\r\n        \r\n        // 导出完成后移除临时表格\r\n        document.body.removeChild(table);\r\n        console.log('【调试】临时表格已移除');\r\n        \r\n        throw exportError;\r\n      }\r\n    } else {\r\n      // 等待所有图片加载完成\r\n      console.log('【调试】等待所有图片加载完成后再导出');\r\n      \r\n      // 创建一个Promise数组，每个Promise对应一个图片的加载\r\n      const imgPromises = Array.from(imgElements).map((img, imgIndex) => {\r\n        return new Promise((resolve) => {\r\n          if (img.complete) {\r\n            console.log(`【调试】图片 ${imgIndex + 1} 已加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\r\n            resolve();\r\n          } else {\r\n            console.log(`【调试】等待图片 ${imgIndex + 1} 加载...`);\r\n            img.onload = () => {\r\n              console.log(`【调试】图片 ${imgIndex + 1} 加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\r\n              resolve();\r\n            };\r\n            img.onerror = (error) => {\r\n              console.error(`【调试】图片 ${imgIndex + 1} 加载失败:`, error);\r\n              console.error('【调试】错误详情:', error ? error.message : 'Unknown error');\r\n              resolve(); // 即使失败也继续导出\r\n            };\r\n            \r\n            // 添加超时处理\r\n            setTimeout(() => {\r\n              if (!img.complete) {\r\n                console.error(`【调试】图片 ${imgIndex + 1} 加载超时`);\r\n                resolve(); // 超时也继续导出\r\n              }\r\n            }, 5000); // 5秒超时\r\n          }\r\n        });\r\n      });\r\n      \r\n      // 等待所有图片加载完成或超时\r\n      try {\r\n        await Promise.all(imgPromises);\r\n        console.log('【调试】所有图片加载完成或超时，开始导出');\r\n        \r\n        // 再次检查图片状态\r\n        console.log('【调试】导出前最终检查图片状态:');\r\n        Array.from(imgElements).forEach((img, idx) => {\r\n          console.log(`【调试】图片 ${idx + 1} 最终状态:`, {\r\n            complete: img.complete,\r\n            naturalWidth: img.naturalWidth,\r\n            naturalHeight: img.naturalHeight,\r\n            src长度: img.src.length\r\n          });\r\n        });\r\n        \r\n        try {\r\n          console.log('【调试】调用export方法...');\r\n          table2excel.export(table, fullFileName);\r\n          console.log('【调试】export方法调用成功');\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          return true;\r\n        } catch (exportError) {\r\n          console.error('【调试】export方法调用失败:', exportError);\r\n          console.error('【调试】错误详情:', exportError.message);\r\n          console.error('【调试】错误堆栈:', exportError.stack);\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          throw exportError;\r\n        }\r\n      } catch (imgLoadError) {\r\n        console.error('【调试】等待图片加载过程中发生错误:', imgLoadError);\r\n        console.error('【调试】错误详情:', imgLoadError.message);\r\n        console.error('【调试】错误堆栈:', imgLoadError.stack);\r\n        \r\n        try {\r\n          console.log('【调试】尝试强制导出...');\r\n          table2excel.export(table, fullFileName);\r\n          console.log('【调试】强制导出成功');\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          return true;\r\n        } catch (forceExportError) {\r\n          console.error('【调试】强制导出失败:', forceExportError);\r\n          console.error('【调试】错误详情:', forceExportError.message);\r\n          console.error('【调试】错误堆栈:', forceExportError.stack);\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          throw forceExportError;\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('使用js-table2excel导出Excel失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    console.error('错误堆栈:', error.stack);\r\n    \r\n    // 创建一个包含图片数据的对象，用于传递给exportToExcel\r\n    const imageData = {};\r\n    let hasAnyImageData = false;\r\n    \r\n    // 从data中提取图片数据\r\n    data.forEach((row, index) => {\r\n      const record = row['__original'] || {};\r\n      if (record.photo_path_before || record.photo_path_after) {\r\n        imageData[index] = {\r\n          beforePhoto: record.photo_path_before,\r\n          afterPhoto: record.photo_path_after\r\n        };\r\n        hasAnyImageData = true;\r\n      }\r\n    });\r\n    \r\n    console.log('【调试】准备回退到XLSX导出，是否有图片数据:', hasAnyImageData ? '是' : '否');\r\n    console.log('【调试】图片数据对象:', JSON.stringify(imageData));\r\n    \r\n    // 尝试使用XLSX导出，传递图片数据\r\n    console.log('尝试使用XLSX导出（包含图片路径）...');\r\n    try {\r\n      // 直接在这里实现导出逻辑，而不是调用exportToExcel\r\n      console.log('创建工作簿...');\r\n      const wb = XLSX.utils.book_new();\r\n      \r\n      // 准备数据\r\n      const exportRows = data.map(row => {\r\n        const exportRow = {};\r\n        headers.forEach(header => {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        });\r\n        return exportRow;\r\n      });\r\n      \r\n      console.log('创建工作表...');\r\n      const ws = XLSX.utils.json_to_sheet(exportRows);\r\n      \r\n      // 添加工作表到工作簿\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n      \r\n      // 处理文件名\r\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n      const fullFileName = `${fileName}_${timestamp}`;\r\n      \r\n      // 导出\r\n      console.log('导出Excel文件...');\r\n      const excelData = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n      \r\n      // 创建Blob\r\n      const blob = new Blob([excelData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      \r\n      // 创建下载链接\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${fullFileName}.xlsx`;\r\n      \r\n      // 触发下载\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // 清理\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n      }, 0);\r\n      \r\n      console.log('XLSX导出成功（包含图片路径）');\r\n      return true;\r\n    } catch (xlsxError) {\r\n      console.error('XLSX导出失败:', xlsxError);\r\n      \r\n      // 最后尝试CSV导出\r\n      console.log('尝试CSV导出...');\r\n      return exportToCSV(data, fileName, headers);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const fullFileName = `${fileName}_${timestamp}`;\r\n  \r\n  console.log('【调试】exportToExcel函数被调用，数据条数:', data.length);\r\n  \r\n  // 检查图片数据\r\n  let hasImageData = false;\r\n  if (imageData) {\r\n    const imageDataKeys = Object.keys(imageData);\r\n    hasImageData = imageDataKeys.length > 0;\r\n    console.log('【调试】是否有图片数据:', hasImageData ? '是' : '否');\r\n    console.log('【调试】图片数据条数:', imageDataKeys.length);\r\n    \r\n    if (hasImageData) {\r\n      // 检查第一条图片数据\r\n      const firstImageKey = imageDataKeys[0];\r\n      const firstImageData = imageData[firstImageKey];\r\n      console.log('【调试】第一条图片数据:', JSON.stringify(firstImageData));\r\n    }\r\n  } else {\r\n    console.log('【调试】没有提供图片数据对象');\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('【调试】尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('【调试】工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片路径列\r\n    if (hasImageData) {\r\n      console.log('【调试】添加图片路径到导出数据');\r\n      enhancedData = data.map((row, index) => {\r\n        const exportRow = {};\r\n        \r\n        // 复制原始数据\r\n        headers.forEach(header => {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        });\r\n        \r\n        // 添加图片路径信息\r\n        if (imageData[index]) {\r\n          if (imageData[index].beforePhoto) {\r\n            exportRow['清理前照片路径'] = Array.isArray(imageData[index].beforePhoto) \r\n              ? imageData[index].beforePhoto.join(', ') \r\n              : imageData[index].beforePhoto;\r\n          }\r\n          \r\n          if (imageData[index].afterPhoto) {\r\n            exportRow['清理后照片路径'] = Array.isArray(imageData[index].afterPhoto) \r\n              ? imageData[index].afterPhoto.join(', ') \r\n              : imageData[index].afterPhoto;\r\n          }\r\n        }\r\n        \r\n        return exportRow;\r\n      });\r\n    } else {\r\n      // 没有图片数据，只导出文本\r\n      enhancedData = data.map(row => {\r\n        const exportRow = {};\r\n        headers.forEach(header => {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        });\r\n        return exportRow;\r\n      });\r\n    }\r\n    \r\n    console.log('【调试】创建工作表...');\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n    \r\n    // 导出\r\n    console.log('【调试】导出Excel文件...');\r\n    const excelData = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    \r\n    // 创建Blob\r\n    const blob = new Blob([excelData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `${fullFileName}.xlsx`;\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    \r\n    // 清理\r\n    setTimeout(() => {\r\n      document.body.removeChild(a);\r\n      URL.revokeObjectURL(url);\r\n    }, 0);\r\n    \r\n    console.log('【调试】Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('【调试】Excel导出失败:', error);\r\n    console.error('【调试】错误详情:', error.message);\r\n    console.error('【调试】错误堆栈:', error.stack);\r\n    \r\n    // 尝试CSV导出\r\n    console.log('【调试】尝试CSV导出...');\r\n    return exportToCSV(data, fileName, headers);\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\r\n        \r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\r\n        \r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\r\n      }\r\n    });\r\n    \r\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,OAAOC,WAAW,MAAM,gBAAgB;AACxC;;AAEA;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,IAAI,CAACI,OAAO,CAAC;AACrCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEvD;AACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC/BP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEM,IAAI,CAAC;EACpCP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,OAAOM,IAAI,CAAC;EAEzC,IAAI,CAACA,IAAI,EAAE;IACTP,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,OAAO,EAAE;EACX;EAEA,IAAI;IACF;IACA,IAAI,OAAOM,IAAI,KAAK,QAAQ,EAAE;MAC5B;MACA,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC9CT,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,IAAI;UACF,MAAMS,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;UAC/BP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAES,MAAM,CAAC;UAEtC,IAAIG,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;YACzBV,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAES,MAAM,CAACK,MAAM,CAAC;YAC/C;YACA,MAAMC,QAAQ,GAAGN,MAAM,CAACO,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC;YAC5C,IAAIF,QAAQ,CAACD,MAAM,GAAGL,MAAM,CAACK,MAAM,EAAE;cACnCf,OAAO,CAACC,GAAG,CAAC,YAAY,EAAES,MAAM,CAACK,MAAM,GAAGC,QAAQ,CAACD,MAAM,EAAE,KAAK,CAAC;YACnE;YACA,OAAOC,QAAQ;UACjB,CAAC,MAAM;YACLhB,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,CAACS,MAAM,CAAC,CAAC;YACpD,OAAO,CAACA,MAAM,CAAC;UACjB;QACF,CAAC,CAAC,OAAOS,SAAS,EAAE;UAClBnB,OAAO,CAACoB,KAAK,CAAC,iBAAiB,EAAED,SAAS,CAACE,OAAO,CAAC;UACnD;UACArB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE,CAACM,IAAI,CAAC,CAAC;UAC/C,OAAO,CAACA,IAAI,CAAC;QACf;MACF;;MAEA;MACA,IAAIA,IAAI,CAACe,QAAQ,CAAC,GAAG,CAAC,EAAE;QACtBtB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC,MAAMsB,KAAK,GAAGhB,IAAI,CAACiB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACV,MAAM,CAACS,CAAC,IAAIA,CAAC,CAAC;QAC/D1B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEsB,KAAK,CAAC;QACrCvB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEsB,KAAK,CAACR,MAAM,CAAC;QAC9C,OAAOQ,KAAK;MACd;;MAEA;MACAvB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE,CAACM,IAAI,CAAC,CAAC;MACjD,OAAO,CAACA,IAAI,CAAC;IACf;;IAEA;IACA,IAAIM,KAAK,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE;MACvBP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,IAAI,CAAC;MACvCP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,IAAI,CAACQ,MAAM,CAAC;MACzC;MACA,MAAMC,QAAQ,GAAGT,IAAI,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC;MAC1C,IAAIF,QAAQ,CAACD,MAAM,GAAGR,IAAI,CAACQ,MAAM,EAAE;QACjCf,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEM,IAAI,CAACQ,MAAM,GAAGC,QAAQ,CAACD,MAAM,EAAE,KAAK,CAAC;MACjE;MACA,OAAOC,QAAQ;IACjB;;IAEA;IACA,IAAI,OAAOT,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;MAC7CP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEM,IAAI,CAAC;MACnC;MACA,IAAIA,IAAI,CAACqB,GAAG,EAAE;QACZ5B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,IAAI,CAACqB,GAAG,CAAC;QAC3C,OAAO,CAACrB,IAAI,CAACqB,GAAG,CAAC;MACnB;MACA,IAAIrB,IAAI,CAACA,IAAI,EAAE;QACbP,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEM,IAAI,CAACA,IAAI,CAAC;QAC7C,OAAO,CAACA,IAAI,CAACA,IAAI,CAAC;MACpB;MACA,IAAIA,IAAI,CAACsB,GAAG,EAAE;QACZ7B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEM,IAAI,CAACsB,GAAG,CAAC;QAC3C,OAAO,CAACtB,IAAI,CAACsB,GAAG,CAAC;MACnB;;MAEA;MACA7B,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEU,IAAI,CAACmB,SAAS,CAACvB,IAAI,CAAC,CAAC;MAC7D,OAAO,CAACI,IAAI,CAACmB,SAAS,CAACvB,IAAI,CAAC,CAAC;IAC/B;;IAEA;IACAP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE8B,MAAM,CAACxB,IAAI,CAAC,CAAC;IACnD,OAAO,CAACwB,MAAM,CAACxB,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvCpB,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC3CrB,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACY,KAAK,CAAC;IACzC;IACAhC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,CAAC8B,MAAM,CAACxB,IAAI,CAAC,CAAC,CAAC;IACnD,OAAO,CAACwB,MAAM,CAACxB,IAAI,CAAC,CAAC;EACvB;AACF,CAAC;;AAED;AACA,MAAM0B,gBAAgB,GAAIL,GAAG,IAAK;EAChC,OAAO,IAAIM,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCpC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtCD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE2B,GAAG,CAAC;;IAEhC;IACA,IAAI,CAACA,GAAG,EAAE;MACR,MAAMR,KAAK,GAAG,IAAIiB,KAAK,CAAC,SAAS,CAAC;MAClCrC,OAAO,CAACoB,KAAK,CAAC,oBAAoB,CAAC;MACnCgB,MAAM,CAAChB,KAAK,CAAC;MACb;IACF;;IAEA;IACA,MAAMkB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACtC,IAAIC,QAAQ,GAAGb,GAAG;;IAElB;IACA,IAAIA,GAAG,CAACN,QAAQ,CAAC,GAAG,CAAC,EAAE;MACrBmB,QAAQ,GAAG,GAAGb,GAAG,OAAOU,SAAS,EAAE;IACrC,CAAC,MAAM;MACLG,QAAQ,GAAG,GAAGb,GAAG,OAAOU,SAAS,EAAE;IACrC;IAEAtC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEwC,QAAQ,CAAC;;IAE1C;IACA,IAAI;MACF,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAACF,QAAQ,CAAC;MACnCzC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;QAC5B2C,QAAQ,EAAEF,SAAS,CAACE,QAAQ;QAC5BC,QAAQ,EAAEH,SAAS,CAACG,QAAQ;QAC5BC,QAAQ,EAAEJ,SAAS,CAACI,QAAQ;QAC5BC,MAAM,EAAEL,SAAS,CAACK;MACpB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,QAAQ,EAAE;MACjBhD,OAAO,CAACoB,KAAK,CAAC,gBAAgB,EAAE4B,QAAQ,CAAC3B,OAAO,CAAC;MACjD;IACF;;IAEA;IACArB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCgD,KAAK,CAACR,QAAQ,EAAE;MACdS,MAAM,EAAE,KAAK;MACbC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE,UAAU;MACjBC,WAAW,EAAE,aAAa;MAC1BC,OAAO,EAAE;QACP,eAAe,EAAE,UAAU;QAC3B,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;MAChBxD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEuD,QAAQ,CAACC,MAAM,CAAC;MAChDzD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEuD,QAAQ,CAACE,IAAI,CAAC;MAC9C1D,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEuD,QAAQ,CAAC5B,GAAG,CAAC;;MAE9C;MACA,MAAM0B,OAAO,GAAG,CAAC,CAAC;MAClBE,QAAQ,CAACF,OAAO,CAACK,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;QACvCP,OAAO,CAACO,GAAG,CAAC,GAAGD,KAAK;MACtB,CAAC,CAAC;MACF5D,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEU,IAAI,CAACmB,SAAS,CAACwB,OAAO,CAAC,CAAC;MAEvD,IAAI,CAACE,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIzB,KAAK,CAAC,eAAemB,QAAQ,CAACC,MAAM,EAAE,CAAC;MACnD;MAEAzD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,OAAOuD,QAAQ,CAACO,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDR,IAAI,CAACQ,IAAI,IAAI;MACZ/D,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChCD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE8D,IAAI,CAACL,IAAI,CAAC;MACvC1D,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE8D,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC;;MAEhD;MACA,IAAID,IAAI,CAACC,IAAI,GAAG,GAAG,EAAE;QACnBhE,OAAO,CAACiE,IAAI,CAAC,8BAA8B,CAAC;MAC9C;;MAEA;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BnE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAE5CiE,MAAM,CAACE,MAAM,GAAG,MAAM;QACpB,MAAMC,UAAU,GAAGH,MAAM,CAACI,MAAM;QAChCtE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/CD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEoE,UAAU,CAACtD,MAAM,CAAC;QACnDf,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEoE,UAAU,CAACE,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;;QAE3E;QACA,IAAI,CAACF,UAAU,IAAIA,UAAU,CAACtD,MAAM,GAAG,GAAG,EAAE;UAC1Cf,OAAO,CAACoB,KAAK,CAAC,qBAAqB,CAAC;UACpCgB,MAAM,CAAC,IAAIC,KAAK,CAAC,YAAY,CAAC,CAAC;UAC/B;QACF;;QAEA;QACA,IAAI,CAACgC,UAAU,CAAC7D,UAAU,CAAC,aAAa,CAAC,EAAE;UACzCR,OAAO,CAACiE,IAAI,CAAC,6BAA6B,CAAC;QAC7C;;QAEA;QACA,MAAMO,OAAO,GAAG,IAAIC,KAAK,CAAC,CAAC;QAC3BD,OAAO,CAACJ,MAAM,GAAG,MAAM;UACrBpE,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEuE,OAAO,CAACE,KAAK,EAAE,GAAG,EAAEF,OAAO,CAACG,MAAM,CAAC;UAC3ExC,OAAO,CAACkC,UAAU,CAAC;QACrB,CAAC;QAEDG,OAAO,CAACI,OAAO,GAAG,MAAM;UACtB5E,OAAO,CAACoB,KAAK,CAAC,2BAA2B,CAAC;UAC1C;UACAe,OAAO,CAACkC,UAAU,CAAC;QACrB,CAAC;QAEDG,OAAO,CAAC3C,GAAG,GAAGwC,UAAU;MAC1B,CAAC;MAEDH,MAAM,CAACU,OAAO,GAAIxD,KAAK,IAAK;QAC1BpB,OAAO,CAACoB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CpB,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACC,OAAO,CAAC;QAC3Ce,MAAM,CAAC,IAAIC,KAAK,CAAC,gBAAgB,CAAC,CAAC;MACrC,CAAC;MAEDrC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCiE,MAAM,CAACW,aAAa,CAACd,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDe,KAAK,CAAC1D,KAAK,IAAI;MACdpB,OAAO,CAACoB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CpB,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACC,OAAO,CAAC;MAC3CrB,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACY,KAAK,CAAC;;MAEzC;MACAhC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,MAAM8E,GAAG,GAAG,IAAIN,KAAK,CAAC,CAAC;MACvBM,GAAG,CAACC,WAAW,GAAG,WAAW;MAE7BD,GAAG,CAACX,MAAM,GAAG,MAAM;QACjBpE,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChCD,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE8E,GAAG,CAACL,KAAK,EAAE,GAAG,EAAEK,GAAG,CAACJ,MAAM,CAAC;QAEtD,IAAI;UACF;UACA,MAAMM,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;UAC/CF,MAAM,CAACP,KAAK,GAAGK,GAAG,CAACL,KAAK;UACxBO,MAAM,CAACN,MAAM,GAAGI,GAAG,CAACJ,MAAM;UAC1B3E,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEgF,MAAM,CAACP,KAAK,EAAE,GAAG,EAAEO,MAAM,CAACN,MAAM,CAAC;UAErE,MAAMS,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;UACnCD,GAAG,CAACE,SAAS,CAACP,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;UACxB/E,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;UAEjC;UACA;UACA,IAAIsF,OAAO;UACX,IAAI;YACFA,OAAO,GAAGN,MAAM,CAACO,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;YAC7CxF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;UAC/C,CAAC,CAAC,OAAOwF,SAAS,EAAE;YAClBzF,OAAO,CAACoB,KAAK,CAAC,uBAAuB,EAAEqE,SAAS,CAACpE,OAAO,CAAC;YACzD,IAAI;cACFkE,OAAO,GAAGN,MAAM,CAACO,SAAS,CAAC,WAAW,CAAC;cACvCxF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;YAC9C,CAAC,CAAC,OAAOyF,QAAQ,EAAE;cACjB1F,OAAO,CAACoB,KAAK,CAAC,iBAAiB,EAAEsE,QAAQ,CAACrE,OAAO,CAAC;cAClD,MAAMqE,QAAQ;YAChB;UACF;UAEA1F,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEsF,OAAO,CAACxE,MAAM,CAAC;UAChDf,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEsF,OAAO,CAAChB,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;UAExEpC,OAAO,CAACoD,OAAO,CAAC;QAClB,CAAC,CAAC,OAAOI,WAAW,EAAE;UACpB3F,OAAO,CAACoB,KAAK,CAAC,mBAAmB,EAAEuE,WAAW,CAAC;UAC/C3F,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEuE,WAAW,CAACtE,OAAO,CAAC;UACjDrB,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEuE,WAAW,CAAC3D,KAAK,CAAC;UAC/CI,MAAM,CAACuD,WAAW,CAAC;QACrB;MACF,CAAC;MAEDZ,GAAG,CAACH,OAAO,GAAIgB,QAAQ,IAAK;QAC1B5F,OAAO,CAACoB,KAAK,CAAC,oBAAoB,EAAEwE,QAAQ,CAAC;QAC7C5F,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEwE,QAAQ,CAACvE,OAAO,CAAC;QAC9CrB,OAAO,CAACoB,KAAK,CAAC,uBAAuB,EAAEQ,GAAG,CAAC;;QAE3C;QACA,IAAI;UACF5B,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/B,MAAM4F,WAAW,GAAGX,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;UACpDU,WAAW,CAACnB,KAAK,GAAG,GAAG;UACvBmB,WAAW,CAAClB,MAAM,GAAG,GAAG;UACxB,MAAMS,GAAG,GAAGS,WAAW,CAACR,UAAU,CAAC,IAAI,CAAC;;UAExC;UACAD,GAAG,CAACU,SAAS,GAAG,SAAS;UACzBV,GAAG,CAACW,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;;UAE5B;UACAX,GAAG,CAACU,SAAS,GAAG,SAAS;UACzBV,GAAG,CAACY,IAAI,GAAG,YAAY;UACvBZ,GAAG,CAACa,SAAS,GAAG,QAAQ;UACxBb,GAAG,CAACc,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;UAEhC,MAAMC,YAAY,GAAGN,WAAW,CAACL,SAAS,CAAC,WAAW,CAAC;UACvDxF,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/BkC,OAAO,CAACgE,YAAY,CAAC;QACvB,CAAC,CAAC,OAAOC,aAAa,EAAE;UACtBpG,OAAO,CAACoB,KAAK,CAAC,mBAAmB,EAAEgF,aAAa,CAAC/E,OAAO,CAAC;UACzDe,MAAM,CAAC,IAAIC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7B;MACF,CAAC;;MAED;MACA,MAAMgE,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/B,IAAI,CAACvB,GAAG,CAACwB,QAAQ,EAAE;UACjBvG,OAAO,CAACoB,KAAK,CAAC,mBAAmB,CAAC;UAClC2D,GAAG,CAAClD,GAAG,GAAG,EAAE,CAAC,CAAC;UACdO,MAAM,CAAC,IAAIC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7B;MACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;MAEX0C,GAAG,CAACX,MAAM,GAAG,YAAW;QACtBoC,YAAY,CAACH,OAAO,CAAC;QACrB,IAAI,CAACjC,MAAM,CAAC,CAAC,CAAC,CAAC;MACjB,CAAC;MAEDW,GAAG,CAACH,OAAO,GAAG,YAAW;QACvB4B,YAAY,CAACH,OAAO,CAAC;QACrB,IAAI,CAACzB,OAAO,CAAC,CAAC,CAAC,CAAC;MAClB,CAAC;MAED5E,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEwC,QAAQ,CAAC;MAC7CsC,GAAG,CAAClD,GAAG,GAAGY,QAAQ;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgE,uBAAuB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAErD,OAAO,KAAK;EACxEtD,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;EACxDD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEyG,IAAI,CAAC3F,MAAM,CAAC;EACrCf,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEU,IAAI,CAACmB,SAAS,CAACwB,OAAO,CAAC,CAAC;EAEpD,IAAI,CAACoD,IAAI,IAAIA,IAAI,CAAC3F,MAAM,KAAK,CAAC,EAAE;IAC9Bf,OAAO,CAACoB,KAAK,CAAC,eAAe,CAAC;IAC9B,OAAO,KAAK;EACd;EAEA,IAAI;IACFpB,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpDD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEU,IAAI,CAACmB,SAAS,CAAC4E,IAAI,CAAC,CAAC,CAAC,CAAC,CAACnC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;;IAE9E;IACAoC,QAAQ,GAAGA,QAAQ,CAACC,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;IACjD,MAAMtE,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACsE,WAAW,CAAC,CAAC,CAACD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACrC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IACjF,MAAMuC,YAAY,GAAG,GAAGH,QAAQ,IAAIrE,SAAS,EAAE;IAC/CtC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE6G,YAAY,CAAC;;IAEvC;IACA,MAAMC,aAAa,GAAG,EAAE;;IAExB;IACA,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,YAAY,GAAG,CAAC;;IAEpB;IACA,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGT,IAAI,CAAC3F,MAAM,EAAEoG,QAAQ,EAAE,EAAE;MACzDnH,OAAO,CAACC,GAAG,CAAC,WAAWkH,QAAQ,GAAG,CAAC,IAAIT,IAAI,CAAC3F,MAAM,SAAS,CAAC;MAC5D,MAAMqG,GAAG,GAAGV,IAAI,CAACS,QAAQ,CAAC;MAC1B,MAAME,MAAM,GAAGD,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;MACtCpH,OAAO,CAACC,GAAG,CAAC,aAAaoH,MAAM,CAACC,EAAE,IAAI,SAAS,EAAE,CAAC;MAClDtH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEU,IAAI,CAACmB,SAAS,CAACuF,MAAM,CAAC,CAAC9C,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;;MAE1E;MACA,IAAIgD,eAAe,GAAG,IAAI;MAC1B,IAAIF,MAAM,CAACG,iBAAiB,EAAE;QAC5BR,WAAW,EAAE;QACbhH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,WAAW,EAAEE,MAAM,CAACG,iBAAiB,CAAC;QACpExH,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,OAAOoH,MAAM,CAACG,iBAAiB,CAAC;QAE3D,MAAMC,UAAU,GAAGnH,cAAc,CAAC+G,MAAM,CAACG,iBAAiB,CAAC;QAC3DxH,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEwH,UAAU,CAAC;QACxCzH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEwH,UAAU,CAAC1G,MAAM,CAAC;QAEjD,IAAI0G,UAAU,IAAIA,UAAU,CAAC1G,MAAM,GAAG,CAAC,EAAE;UACvC,MAAM2G,SAAS,GAAGD,UAAU,CAAC,CAAC,CAAC;UAC/BzH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEyH,SAAS,CAAC;UACtC1H,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,OAAOyH,SAAS,CAAC;;UAE5C;UACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;YACjC;YACA,IAAIjF,QAAQ,GAAGiF,SAAS;;YAExB;YACA,IAAIA,SAAS,CAAClH,UAAU,CAAC,GAAG,CAAC,EAAE;cAC7BiC,QAAQ,GAAGkF,MAAM,CAACC,QAAQ,CAAC7E,MAAM,GAAG2E,SAAS;cAC7C1H,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE0H,MAAM,CAACC,QAAQ,CAAC7E,MAAM,CAAC;YAC9D;YAEA/C,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,cAAc,EAAE1E,QAAQ,CAAC;YAEvD,IAAI;cACFzC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;cAC/BsH,eAAe,GAAG,MAAMtF,gBAAgB,CAACQ,QAAQ,CAAC;cAClDzC,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,sBAAsB,EAAEI,eAAe,GAAGA,eAAe,CAACxG,MAAM,GAAG,CAAC,CAAC;cACnGf,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEsH,eAAe,GAAGA,eAAe,CAAChD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC;cAEvG,IAAIgD,eAAe,IAAIA,eAAe,CAACxG,MAAM,GAAG,GAAG,EAAE;gBACnDkG,gBAAgB,EAAE;gBAClBjH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,YAAY,CAAC;cAC7C,CAAC,MAAM;gBACLD,YAAY,EAAE;gBACdlH,OAAO,CAACoB,KAAK,CAAC,UAAU+F,QAAQ,cAAc,CAAC;cACjD;YACF,CAAC,CAAC,OAAO/F,KAAK,EAAE;cACd8F,YAAY,EAAE;cACdlH,OAAO,CAACoB,KAAK,CAAC,UAAU+F,QAAQ,aAAa,EAAE/F,KAAK,CAAC;cACrDpB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACC,OAAO,CAAC;cACzCrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACY,KAAK,CAAC;YACzC;UACF,CAAC,MAAM;YACLkF,YAAY,EAAE;YACdlH,OAAO,CAACoB,KAAK,CAAC,UAAU+F,QAAQ,eAAe,EAAEO,SAAS,CAAC;UAC7D;QACF,CAAC,MAAM;UACLR,YAAY,EAAE;UACdlH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,eAAe,CAAC;QAChD;MACF,CAAC,MAAM;QACLnH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,UAAU,CAAC;MAC3C;;MAEA;MACA,IAAIU,cAAc,GAAG,IAAI;MACzB,IAAIR,MAAM,CAACS,gBAAgB,EAAE;QAC3Bd,WAAW,EAAE;QACbhH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,WAAW,EAAEE,MAAM,CAACS,gBAAgB,CAAC;QACnE9H,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,OAAOoH,MAAM,CAACS,gBAAgB,CAAC;QAE1D,MAAML,UAAU,GAAGnH,cAAc,CAAC+G,MAAM,CAACS,gBAAgB,CAAC;QAC1D9H,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEwH,UAAU,CAAC;QACxCzH,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEwH,UAAU,CAAC1G,MAAM,CAAC;QAEjD,IAAI0G,UAAU,IAAIA,UAAU,CAAC1G,MAAM,GAAG,CAAC,EAAE;UACvC,MAAM2G,SAAS,GAAGD,UAAU,CAAC,CAAC,CAAC;UAC/BzH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEyH,SAAS,CAAC;UACtC1H,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,OAAOyH,SAAS,CAAC;;UAE5C;UACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;YACjC;YACA,IAAIjF,QAAQ,GAAGiF,SAAS;;YAExB;YACA,IAAIA,SAAS,CAAClH,UAAU,CAAC,GAAG,CAAC,EAAE;cAC7BiC,QAAQ,GAAGkF,MAAM,CAACC,QAAQ,CAAC7E,MAAM,GAAG2E,SAAS;cAC7C1H,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE0H,MAAM,CAACC,QAAQ,CAAC7E,MAAM,CAAC;YAC9D;YAEA/C,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,cAAc,EAAE1E,QAAQ,CAAC;YAEvD,IAAI;cACFzC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;cAC/B4H,cAAc,GAAG,MAAM5F,gBAAgB,CAACQ,QAAQ,CAAC;cACjDzC,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,sBAAsB,EAAEU,cAAc,GAAGA,cAAc,CAAC9G,MAAM,GAAG,CAAC,CAAC;cACjGf,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE4H,cAAc,GAAGA,cAAc,CAACtD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC;cAErG,IAAIsD,cAAc,IAAIA,cAAc,CAAC9G,MAAM,GAAG,GAAG,EAAE;gBACjDkG,gBAAgB,EAAE;gBAClBjH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,YAAY,CAAC;cAC7C,CAAC,MAAM;gBACLD,YAAY,EAAE;gBACdlH,OAAO,CAACoB,KAAK,CAAC,UAAU+F,QAAQ,cAAc,CAAC;cACjD;YACF,CAAC,CAAC,OAAO/F,KAAK,EAAE;cACd8F,YAAY,EAAE;cACdlH,OAAO,CAACoB,KAAK,CAAC,UAAU+F,QAAQ,aAAa,EAAE/F,KAAK,CAAC;cACrDpB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACC,OAAO,CAAC;cACzCrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACY,KAAK,CAAC;YACzC;UACF,CAAC,MAAM;YACLkF,YAAY,EAAE;YACdlH,OAAO,CAACoB,KAAK,CAAC,UAAU+F,QAAQ,eAAe,EAAEO,SAAS,CAAC;UAC7D;QACF,CAAC,MAAM;UACLR,YAAY,EAAE;UACdlH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,eAAe,CAAC;QAChD;MACF,CAAC,MAAM;QACLnH,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,UAAU,CAAC;MAC3C;;MAEA;MACAJ,aAAa,CAACgB,IAAI,CAAC;QACjB,GAAGX,GAAG;QACNY,iBAAiB,EAAET,eAAe;QAClCU,gBAAgB,EAAEJ;MACpB,CAAC,CAAC;MACF7H,OAAO,CAACC,GAAG,CAAC,UAAUkH,QAAQ,gBAAgB,EAAE;QAC9Ce,WAAW,EAAE,CAAC,CAACX,eAAe;QAC9BY,UAAU,EAAE,CAAC,CAACN;MAChB,CAAC,CAAC;IACJ;IAEA7H,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE8G,aAAa,CAAChG,MAAM,CAAC;IAClDf,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE;MACzBmI,IAAI,EAAEpB,WAAW;MACjBqB,IAAI,EAAEpB,gBAAgB;MACtBqB,IAAI,EAAEpB;IACR,CAAC,CAAC;;IAEF;IACA,IAAIqB,YAAY,GAAG,KAAK;IACxB,IAAIC,cAAc,GAAG,CAAC;IACtB,KAAK,MAAMpB,GAAG,IAAIL,aAAa,EAAE;MAC/B,IAAIK,GAAG,CAACY,iBAAiB,IAAIZ,GAAG,CAACa,gBAAgB,EAAE;QACjDM,YAAY,GAAG,IAAI;QACnBC,cAAc,EAAE;MAClB;IACF;IAEAxI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEsI,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;IACrDvI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEuI,cAAc,CAAC;IAE5C,IAAI,CAACD,YAAY,EAAE;MACjBvI,OAAO,CAACiE,IAAI,CAAC,iCAAiC,CAAC;IACjD;;IAEA;IACA,MAAMwE,KAAK,GAAGvD,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CsD,KAAK,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;IAC5BzD,QAAQ,CAAC0D,IAAI,CAACC,WAAW,CAACJ,KAAK,CAAC;IAChCzI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;IAE3B;IACA,MAAM6I,KAAK,GAAG5D,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7C,MAAM4D,SAAS,GAAG7D,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;IAE9C7B,OAAO,CAACK,OAAO,CAACqF,MAAM,IAAI;MACxB,MAAMC,EAAE,GAAG/D,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;MACvC8D,EAAE,CAACC,WAAW,GAAGF,MAAM,CAACG,IAAI;MAC5BJ,SAAS,CAACF,WAAW,CAACI,EAAE,CAAC;MACzBjJ,OAAO,CAACC,GAAG,CAAC,aAAa+I,MAAM,CAACG,IAAI,EAAE,CAAC;IACzC,CAAC,CAAC;IAEFL,KAAK,CAACD,WAAW,CAACE,SAAS,CAAC;IAC5BN,KAAK,CAACI,WAAW,CAACC,KAAK,CAAC;IACxB9I,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;IAEzB;IACA,MAAMmJ,KAAK,GAAGlE,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;;IAE7C;IACA4B,aAAa,CAACpD,OAAO,CAAC,CAACyD,GAAG,EAAEiC,KAAK,KAAK;MACpCrJ,OAAO,CAACC,GAAG,CAAC,WAAWoJ,KAAK,GAAG,CAAC,IAAItC,aAAa,CAAChG,MAAM,OAAO,CAAC;MAChE,MAAMuI,EAAE,GAAGpE,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;MAEvC7B,OAAO,CAACK,OAAO,CAACqF,MAAM,IAAI;QACxB,MAAMO,EAAE,GAAGrE,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;;QAEvC;QACA,IAAI6D,MAAM,CAACQ,KAAK,KAAK,OAAO,EAAE;UAC5B,IAAIpC,GAAG,CAACY,iBAAiB,EAAE;YACzBhI,OAAO,CAACC,GAAG,CAAC,WAAWoJ,KAAK,GAAG,CAAC,mBAAmB,EAAEjC,GAAG,CAACY,iBAAiB,CAACjH,MAAM,CAAC;YAClF;YACA,MAAMgE,GAAG,GAAGG,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACzCJ,GAAG,CAAClD,GAAG,GAAGuF,GAAG,CAACY,iBAAiB;YAC/BjD,GAAG,CAAC2D,KAAK,CAAChE,KAAK,GAAG,OAAO;YACzBK,GAAG,CAAC2D,KAAK,CAAC/D,MAAM,GAAG,OAAO;YAC1BI,GAAG,CAAC0E,GAAG,GAAG,OAAO;YACjBzJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEmH,GAAG,CAACY,iBAAiB,CAACjH,MAAM,CAAC;;YAEhE;YACA,IAAI,CAACgE,GAAG,CAACwB,QAAQ,EAAE;cACjBvG,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;cACtC8E,GAAG,CAACX,MAAM,GAAG,MAAM;gBACjBpE,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,aAAa,CAAC;cAC9C,CAAC;cACDtE,GAAG,CAACH,OAAO,GAAIxD,KAAK,IAAK;gBACvBpB,OAAO,CAACoB,KAAK,CAAC,SAASiI,KAAK,GAAG,CAAC,cAAc,EAAEjI,KAAK,CAAC;gBACtDmI,EAAE,CAACL,WAAW,GAAG,QAAQ;cAC3B,CAAC;YACH,CAAC,MAAM;cACLlJ,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,cAAc,CAAC;YAC/C;YAEAE,EAAE,CAACV,WAAW,CAAC9D,GAAG,CAAC;YACnB/E,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,aAAa,CAAC;UAC9C,CAAC,MAAM;YACLE,EAAE,CAACL,WAAW,GAAG,KAAK;YACtBlJ,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,WAAW,CAAC;UAC5C;QACF;QACA;QAAA,KACK,IAAIL,MAAM,CAACQ,KAAK,KAAK,OAAO,EAAE;UACjC,IAAIpC,GAAG,CAACa,gBAAgB,EAAE;YACxBjI,OAAO,CAACC,GAAG,CAAC,WAAWoJ,KAAK,GAAG,CAAC,mBAAmB,EAAEjC,GAAG,CAACa,gBAAgB,CAAClH,MAAM,CAAC;YACjF;YACA,MAAMgE,GAAG,GAAGG,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACzCJ,GAAG,CAAClD,GAAG,GAAGuF,GAAG,CAACa,gBAAgB;YAC9BlD,GAAG,CAAC2D,KAAK,CAAChE,KAAK,GAAG,OAAO;YACzBK,GAAG,CAAC2D,KAAK,CAAC/D,MAAM,GAAG,OAAO;YAC1BI,GAAG,CAAC0E,GAAG,GAAG,OAAO;YACjBzJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEmH,GAAG,CAACa,gBAAgB,CAAClH,MAAM,CAAC;;YAE/D;YACA,IAAI,CAACgE,GAAG,CAACwB,QAAQ,EAAE;cACjBvG,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;cACtC8E,GAAG,CAACX,MAAM,GAAG,MAAM;gBACjBpE,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,aAAa,CAAC;cAC9C,CAAC;cACDtE,GAAG,CAACH,OAAO,GAAIxD,KAAK,IAAK;gBACvBpB,OAAO,CAACoB,KAAK,CAAC,SAASiI,KAAK,GAAG,CAAC,cAAc,EAAEjI,KAAK,CAAC;gBACtDmI,EAAE,CAACL,WAAW,GAAG,QAAQ;cAC3B,CAAC;YACH,CAAC,MAAM;cACLlJ,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,cAAc,CAAC;YAC/C;YAEAE,EAAE,CAACV,WAAW,CAAC9D,GAAG,CAAC;YACnB/E,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,aAAa,CAAC;UAC9C,CAAC,MAAM;YACLE,EAAE,CAACL,WAAW,GAAG,KAAK;YACtBlJ,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,WAAW,CAAC;UAC5C;QACF,CAAC,MACI;UACH;UACAE,EAAE,CAACL,WAAW,GAAG9B,GAAG,CAAC4B,MAAM,CAACQ,KAAK,CAAC,IAAI,EAAE;UACxCxJ,OAAO,CAACC,GAAG,CAAC,WAAWoJ,KAAK,GAAG,CAAC,MAAML,MAAM,CAACQ,KAAK,OAAOpC,GAAG,CAAC4B,MAAM,CAACQ,KAAK,CAAC,IAAI,KAAK,EAAE,CAAC;QACxF;QAEAF,EAAE,CAACT,WAAW,CAACU,EAAE,CAAC;MACpB,CAAC,CAAC;MAEFH,KAAK,CAACP,WAAW,CAACS,EAAE,CAAC;MACrBtJ,OAAO,CAACC,GAAG,CAAC,SAASoJ,KAAK,GAAG,CAAC,QAAQ,CAAC;IACzC,CAAC,CAAC;IAEFZ,KAAK,CAACI,WAAW,CAACO,KAAK,CAAC;IACxBpJ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;IAEzB;IACAD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEwI,KAAK,CAACiB,IAAI,CAAC3I,MAAM,CAAC;IAC3Cf,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEwI,KAAK,CAACiB,IAAI,CAAC,CAAC,CAAC,GAAGjB,KAAK,CAACiB,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC5I,MAAM,GAAG,CAAC,CAAC;;IAExE;IACAf,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAM2J,WAAW,GAAG,IAAI7J,WAAW,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;IAEpC;IACAD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B,MAAM4J,WAAW,GAAGpB,KAAK,CAACqB,gBAAgB,CAAC,KAAK,CAAC;IACjD9J,OAAO,CAACC,GAAG,CAAC,aAAa4J,WAAW,CAAC9I,MAAM,MAAM,CAAC;;IAElD;IACAF,KAAK,CAACkJ,IAAI,CAACF,WAAW,CAAC,CAAClG,OAAO,CAAC,CAACoB,GAAG,EAAEiF,GAAG,KAAK;MAC5ChK,OAAO,CAACC,GAAG,CAAC,UAAU+J,GAAG,GAAG,CAAC,MAAM,EAAE;QACnCzD,QAAQ,EAAExB,GAAG,CAACwB,QAAQ;QACtB0D,YAAY,EAAElF,GAAG,CAACkF,YAAY;QAC9BC,aAAa,EAAEnF,GAAG,CAACmF,aAAa;QAChCC,KAAK,EAAEpF,GAAG,CAAClD,GAAG,CAACd;MACjB,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI8I,WAAW,CAAC9I,MAAM,KAAK,CAAC,EAAE;MAC5Bf,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B,IAAI;QACFD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC2J,WAAW,CAACQ,MAAM,CAAC3B,KAAK,EAAE3B,YAAY,CAAC;QACvC9G,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;QAE/B;QACAiF,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAAC5B,KAAK,CAAC;QAChCzI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAE1B,OAAO,IAAI;MACb,CAAC,CAAC,OAAOqK,WAAW,EAAE;QACpBtK,OAAO,CAACoB,KAAK,CAAC,mBAAmB,EAAEkJ,WAAW,CAAC;QAC/CtK,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEkJ,WAAW,CAACjJ,OAAO,CAAC;QAC/CrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEkJ,WAAW,CAACtI,KAAK,CAAC;;QAE7C;QACAkD,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAAC5B,KAAK,CAAC;QAChCzI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAE1B,MAAMqK,WAAW;MACnB;IACF,CAAC,MAAM;MACL;MACAtK,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;MAEjC;MACA,MAAMsK,WAAW,GAAG1J,KAAK,CAACkJ,IAAI,CAACF,WAAW,CAAC,CAACpI,GAAG,CAAC,CAACsD,GAAG,EAAEyF,QAAQ,KAAK;QACjE,OAAO,IAAItI,OAAO,CAAEC,OAAO,IAAK;UAC9B,IAAI4C,GAAG,CAACwB,QAAQ,EAAE;YAChBvG,OAAO,CAACC,GAAG,CAAC,UAAUuK,QAAQ,GAAG,CAAC,YAAY,EAAEzF,GAAG,CAACkF,YAAY,EAAE,GAAG,EAAElF,GAAG,CAACmF,aAAa,CAAC;YACzF/H,OAAO,CAAC,CAAC;UACX,CAAC,MAAM;YACLnC,OAAO,CAACC,GAAG,CAAC,YAAYuK,QAAQ,GAAG,CAAC,QAAQ,CAAC;YAC7CzF,GAAG,CAACX,MAAM,GAAG,MAAM;cACjBpE,OAAO,CAACC,GAAG,CAAC,UAAUuK,QAAQ,GAAG,CAAC,WAAW,EAAEzF,GAAG,CAACkF,YAAY,EAAE,GAAG,EAAElF,GAAG,CAACmF,aAAa,CAAC;cACxF/H,OAAO,CAAC,CAAC;YACX,CAAC;YACD4C,GAAG,CAACH,OAAO,GAAIxD,KAAK,IAAK;cACvBpB,OAAO,CAACoB,KAAK,CAAC,UAAUoJ,QAAQ,GAAG,CAAC,QAAQ,EAAEpJ,KAAK,CAAC;cACpDpB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,GAAGA,KAAK,CAACC,OAAO,GAAG,eAAe,CAAC;cACnEc,OAAO,CAAC,CAAC,CAAC,CAAC;YACb,CAAC;;YAED;YACAmE,UAAU,CAAC,MAAM;cACf,IAAI,CAACvB,GAAG,CAACwB,QAAQ,EAAE;gBACjBvG,OAAO,CAACoB,KAAK,CAAC,UAAUoJ,QAAQ,GAAG,CAAC,OAAO,CAAC;gBAC5CrI,OAAO,CAAC,CAAC,CAAC,CAAC;cACb;YACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;UACZ;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,IAAI;QACF,MAAMD,OAAO,CAACuI,GAAG,CAACF,WAAW,CAAC;QAC9BvK,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;QAEnC;QACAD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/BY,KAAK,CAACkJ,IAAI,CAACF,WAAW,CAAC,CAAClG,OAAO,CAAC,CAACoB,GAAG,EAAEiF,GAAG,KAAK;UAC5ChK,OAAO,CAACC,GAAG,CAAC,UAAU+J,GAAG,GAAG,CAAC,QAAQ,EAAE;YACrCzD,QAAQ,EAAExB,GAAG,CAACwB,QAAQ;YACtB0D,YAAY,EAAElF,GAAG,CAACkF,YAAY;YAC9BC,aAAa,EAAEnF,GAAG,CAACmF,aAAa;YAChCC,KAAK,EAAEpF,GAAG,CAAClD,GAAG,CAACd;UACjB,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,IAAI;UACFf,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UAChC2J,WAAW,CAACQ,MAAM,CAAC3B,KAAK,EAAE3B,YAAY,CAAC;UACvC9G,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;UAE/B;UACAiF,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAAC5B,KAAK,CAAC;UAChCzI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAE1B,OAAO,IAAI;QACb,CAAC,CAAC,OAAOqK,WAAW,EAAE;UACpBtK,OAAO,CAACoB,KAAK,CAAC,mBAAmB,EAAEkJ,WAAW,CAAC;UAC/CtK,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEkJ,WAAW,CAACjJ,OAAO,CAAC;UAC/CrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEkJ,WAAW,CAACtI,KAAK,CAAC;;UAE7C;UACAkD,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAAC5B,KAAK,CAAC;UAChCzI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAE1B,MAAMqK,WAAW;QACnB;MACF,CAAC,CAAC,OAAOI,YAAY,EAAE;QACrB1K,OAAO,CAACoB,KAAK,CAAC,oBAAoB,EAAEsJ,YAAY,CAAC;QACjD1K,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEsJ,YAAY,CAACrJ,OAAO,CAAC;QAChDrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEsJ,YAAY,CAAC1I,KAAK,CAAC;QAE9C,IAAI;UACFhC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;UAC5B2J,WAAW,CAACQ,MAAM,CAAC3B,KAAK,EAAE3B,YAAY,CAAC;UACvC9G,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;UAEzB;UACAiF,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAAC5B,KAAK,CAAC;UAChCzI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAE1B,OAAO,IAAI;QACb,CAAC,CAAC,OAAO0K,gBAAgB,EAAE;UACzB3K,OAAO,CAACoB,KAAK,CAAC,aAAa,EAAEuJ,gBAAgB,CAAC;UAC9C3K,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEuJ,gBAAgB,CAACtJ,OAAO,CAAC;UACpDrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEuJ,gBAAgB,CAAC3I,KAAK,CAAC;;UAElD;UACAkD,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAAC5B,KAAK,CAAC;UAChCzI,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAE1B,MAAM0K,gBAAgB;QACxB;MACF;IACF;EACF,CAAC,CAAC,OAAOvJ,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDpB,OAAO,CAACoB,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;IACrCrB,OAAO,CAACoB,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACY,KAAK,CAAC;;IAEnC;IACA,MAAM4I,SAAS,GAAG,CAAC,CAAC;IACpB,IAAIC,eAAe,GAAG,KAAK;;IAE3B;IACAnE,IAAI,CAAC/C,OAAO,CAAC,CAACyD,GAAG,EAAEiC,KAAK,KAAK;MAC3B,MAAMhC,MAAM,GAAGD,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;MACtC,IAAIC,MAAM,CAACG,iBAAiB,IAAIH,MAAM,CAACS,gBAAgB,EAAE;QACvD8C,SAAS,CAACvB,KAAK,CAAC,GAAG;UACjBnB,WAAW,EAAEb,MAAM,CAACG,iBAAiB;UACrCW,UAAU,EAAEd,MAAM,CAACS;QACrB,CAAC;QACD+C,eAAe,GAAG,IAAI;MACxB;IACF,CAAC,CAAC;IAEF7K,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE4K,eAAe,GAAG,GAAG,GAAG,GAAG,CAAC;IACpE7K,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEU,IAAI,CAACmB,SAAS,CAAC8I,SAAS,CAAC,CAAC;;IAErD;IACA5K,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,IAAI;MACF;MACAD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvB,MAAM6K,EAAE,GAAGhL,IAAI,CAACiL,KAAK,CAACC,QAAQ,CAAC,CAAC;;MAEhC;MACA,MAAMC,UAAU,GAAGvE,IAAI,CAACjF,GAAG,CAAC2F,GAAG,IAAI;QACjC,MAAM8D,SAAS,GAAG,CAAC,CAAC;QACpB5H,OAAO,CAACK,OAAO,CAACqF,MAAM,IAAI;UACxBkC,SAAS,CAAClC,MAAM,CAACG,IAAI,CAAC,GAAG/B,GAAG,CAAC4B,MAAM,CAACQ,KAAK,CAAC,IAAI,EAAE;QAClD,CAAC,CAAC;QACF,OAAO0B,SAAS;MAClB,CAAC,CAAC;MAEFlL,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvB,MAAMkL,EAAE,GAAGrL,IAAI,CAACiL,KAAK,CAACK,aAAa,CAACH,UAAU,CAAC;;MAE/C;MACAnL,IAAI,CAACiL,KAAK,CAACM,iBAAiB,CAACP,EAAE,EAAEK,EAAE,EAAE,QAAQ,CAAC;;MAE9C;MACA,MAAM7I,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACsE,WAAW,CAAC,CAAC,CAACD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACrC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;MACjF,MAAMuC,YAAY,GAAG,GAAGH,QAAQ,IAAIrE,SAAS,EAAE;;MAE/C;MACAtC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B,MAAMqL,SAAS,GAAGxL,IAAI,CAACyL,KAAK,CAACT,EAAE,EAAE;QAAEU,QAAQ,EAAE,MAAM;QAAE9H,IAAI,EAAE;MAAQ,CAAC,CAAC;;MAErE;MACA,MAAMK,IAAI,GAAG,IAAI0H,IAAI,CAAC,CAACH,SAAS,CAAC,EAAE;QAAE5H,IAAI,EAAE;MAAoE,CAAC,CAAC;;MAEjH;MACA,MAAM9B,GAAG,GAAGe,GAAG,CAAC+I,eAAe,CAAC3H,IAAI,CAAC;MACrC,MAAM4H,CAAC,GAAGzG,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACrCwG,CAAC,CAACC,IAAI,GAAGhK,GAAG;MACZ+J,CAAC,CAACE,QAAQ,GAAG,GAAG/E,YAAY,OAAO;;MAEnC;MACA5B,QAAQ,CAAC0D,IAAI,CAACC,WAAW,CAAC8C,CAAC,CAAC;MAC5BA,CAAC,CAACG,KAAK,CAAC,CAAC;;MAET;MACAxF,UAAU,CAAC,MAAM;QACfpB,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAACsB,CAAC,CAAC;QAC5BhJ,GAAG,CAACoJ,eAAe,CAACnK,GAAG,CAAC;MAC1B,CAAC,EAAE,CAAC,CAAC;MAEL5B,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B,OAAO,IAAI;IACb,CAAC,CAAC,OAAO+L,SAAS,EAAE;MAClBhM,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAE4K,SAAS,CAAC;;MAErC;MACAhM,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACzB,OAAOgM,WAAW,CAACvF,IAAI,EAAEC,QAAQ,EAAErD,OAAO,CAAC;IAC7C;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM4I,aAAa,GAAGA,CAACxF,IAAI,EAAEC,QAAQ,EAAErD,OAAO,EAAEsH,SAAS,GAAG,IAAI,KAAK;EAC1E,IAAI,CAAClE,IAAI,IAAIA,IAAI,CAAC3F,MAAM,KAAK,CAAC,EAAE;IAC9Bf,OAAO,CAACoB,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAO,KAAK;EACd;;EAEA;EACAuF,QAAQ,GAAGA,QAAQ,CAACC,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;EACjD,MAAMtE,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACsE,WAAW,CAAC,CAAC,CAACD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACrC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjF,MAAMuC,YAAY,GAAG,GAAGH,QAAQ,IAAIrE,SAAS,EAAE;EAE/CtC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEyG,IAAI,CAAC3F,MAAM,CAAC;;EAExD;EACA,IAAIwH,YAAY,GAAG,KAAK;EACxB,IAAIqC,SAAS,EAAE;IACb,MAAMuB,aAAa,GAAGhM,MAAM,CAACC,IAAI,CAACwK,SAAS,CAAC;IAC5CrC,YAAY,GAAG4D,aAAa,CAACpL,MAAM,GAAG,CAAC;IACvCf,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEsI,YAAY,GAAG,GAAG,GAAG,GAAG,CAAC;IACrDvI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEkM,aAAa,CAACpL,MAAM,CAAC;IAEhD,IAAIwH,YAAY,EAAE;MAChB;MACA,MAAM6D,aAAa,GAAGD,aAAa,CAAC,CAAC,CAAC;MACtC,MAAME,cAAc,GAAGzB,SAAS,CAACwB,aAAa,CAAC;MAC/CpM,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEU,IAAI,CAACmB,SAAS,CAACuK,cAAc,CAAC,CAAC;IAC7D;EACF,CAAC,MAAM;IACLrM,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC/B;;EAEA;EACA,IAAI;IACFD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;IAE/B;IACA,MAAM6K,EAAE,GAAGhL,IAAI,CAACiL,KAAK,CAACC,QAAQ,CAAC,CAAC;IAChChL,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;;IAE1B;IACA,IAAIqM,YAAY,GAAG,EAAE;;IAErB;IACA,IAAI/D,YAAY,EAAE;MAChBvI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BqM,YAAY,GAAG5F,IAAI,CAACjF,GAAG,CAAC,CAAC2F,GAAG,EAAEiC,KAAK,KAAK;QACtC,MAAM6B,SAAS,GAAG,CAAC,CAAC;;QAEpB;QACA5H,OAAO,CAACK,OAAO,CAACqF,MAAM,IAAI;UACxBkC,SAAS,CAAClC,MAAM,CAACG,IAAI,CAAC,GAAG/B,GAAG,CAAC4B,MAAM,CAACQ,KAAK,CAAC,IAAI,EAAE;QAClD,CAAC,CAAC;;QAEF;QACA,IAAIoB,SAAS,CAACvB,KAAK,CAAC,EAAE;UACpB,IAAIuB,SAAS,CAACvB,KAAK,CAAC,CAACnB,WAAW,EAAE;YAChCgD,SAAS,CAAC,SAAS,CAAC,GAAGrK,KAAK,CAACC,OAAO,CAAC8J,SAAS,CAACvB,KAAK,CAAC,CAACnB,WAAW,CAAC,GAC9D0C,SAAS,CAACvB,KAAK,CAAC,CAACnB,WAAW,CAAC7H,IAAI,CAAC,IAAI,CAAC,GACvCuK,SAAS,CAACvB,KAAK,CAAC,CAACnB,WAAW;UAClC;UAEA,IAAI0C,SAAS,CAACvB,KAAK,CAAC,CAAClB,UAAU,EAAE;YAC/B+C,SAAS,CAAC,SAAS,CAAC,GAAGrK,KAAK,CAACC,OAAO,CAAC8J,SAAS,CAACvB,KAAK,CAAC,CAAClB,UAAU,CAAC,GAC7DyC,SAAS,CAACvB,KAAK,CAAC,CAAClB,UAAU,CAAC9H,IAAI,CAAC,IAAI,CAAC,GACtCuK,SAAS,CAACvB,KAAK,CAAC,CAAClB,UAAU;UACjC;QACF;QAEA,OAAO+C,SAAS;MAClB,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACAoB,YAAY,GAAG5F,IAAI,CAACjF,GAAG,CAAC2F,GAAG,IAAI;QAC7B,MAAM8D,SAAS,GAAG,CAAC,CAAC;QACpB5H,OAAO,CAACK,OAAO,CAACqF,MAAM,IAAI;UACxBkC,SAAS,CAAClC,MAAM,CAACG,IAAI,CAAC,GAAG/B,GAAG,CAAC4B,MAAM,CAACQ,KAAK,CAAC,IAAI,EAAE;QAClD,CAAC,CAAC;QACF,OAAO0B,SAAS;MAClB,CAAC,CAAC;IACJ;IAEAlL,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,MAAMkL,EAAE,GAAGrL,IAAI,CAACiL,KAAK,CAACK,aAAa,CAACkB,YAAY,CAAC;;IAEjD;IACAxM,IAAI,CAACiL,KAAK,CAACM,iBAAiB,CAACP,EAAE,EAAEK,EAAE,EAAE,QAAQ,CAAC;;IAE9C;IACAnL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/B,MAAMqL,SAAS,GAAGxL,IAAI,CAACyL,KAAK,CAACT,EAAE,EAAE;MAAEU,QAAQ,EAAE,MAAM;MAAE9H,IAAI,EAAE;IAAQ,CAAC,CAAC;;IAErE;IACA,MAAMK,IAAI,GAAG,IAAI0H,IAAI,CAAC,CAACH,SAAS,CAAC,EAAE;MAAE5H,IAAI,EAAE;IAAoE,CAAC,CAAC;;IAEjH;IACA,MAAM9B,GAAG,GAAGe,GAAG,CAAC+I,eAAe,CAAC3H,IAAI,CAAC;IACrC,MAAM4H,CAAC,GAAGzG,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACrCwG,CAAC,CAACC,IAAI,GAAGhK,GAAG;IACZ+J,CAAC,CAACE,QAAQ,GAAG,GAAG/E,YAAY,OAAO;;IAEnC;IACA5B,QAAQ,CAAC0D,IAAI,CAACC,WAAW,CAAC8C,CAAC,CAAC;IAC5BA,CAAC,CAACG,KAAK,CAAC,CAAC;;IAET;IACAxF,UAAU,CAAC,MAAM;MACfpB,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAACsB,CAAC,CAAC;MAC5BhJ,GAAG,CAACoJ,eAAe,CAACnK,GAAG,CAAC;IAC1B,CAAC,EAAE,CAAC,CAAC;IAEL5B,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B,OAAO,IAAI;EACb,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtCpB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACC,OAAO,CAAC;IACzCrB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACY,KAAK,CAAC;;IAEvC;IACAhC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,OAAOgM,WAAW,CAACvF,IAAI,EAAEC,QAAQ,EAAErD,OAAO,CAAC;EAC7C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2I,WAAW,GAAGA,CAACvF,IAAI,EAAEC,QAAQ,EAAErD,OAAO,KAAK;EACtD;EACA,MAAMhB,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACsE,WAAW,CAAC,CAAC,CAACD,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACrC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjF,MAAMgI,WAAW,GAAG,GAAG5F,QAAQ,IAAIrE,SAAS,MAAM;;EAElD;EACA,IAAIkK,UAAU,GAAG,QAAQ,CAAC,CAAC;;EAE3B;EACA,MAAMzD,SAAS,GAAGzF,OAAO,CAAC7B,GAAG,CAACgL,CAAC,IAAI,IAAIA,CAAC,CAACC,KAAK,GAAG,CAAC,CAACrM,IAAI,CAAC,GAAG,CAAC;EAC5DmM,UAAU,IAAIzD,SAAS,GAAG,MAAM;;EAEhC;EACArC,IAAI,CAAC/C,OAAO,CAACzC,IAAI,IAAI;IACnB,MAAMkG,GAAG,GAAG9D,OAAO,CAAC7B,GAAG,CAACuH,MAAM,IAAI;MAChC,MAAMpF,KAAK,GAAG1C,IAAI,CAAC8H,MAAM,CAACQ,KAAK,CAAC;;MAEhC;MACA,IAAI5F,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK+I,SAAS,EAAE;QACzC,OAAO,EAAE;MACX;;MAEA;MACA,IAAI3D,MAAM,CAACtF,IAAI,KAAK,QAAQ,IAAI,OAAOE,KAAK,KAAK,QAAQ,EAAE;QACzD,OAAOA,KAAK;MACd;;MAEA;MACA,IAAIgJ,SAAS,GAAG7K,MAAM,CAAC6B,KAAK,CAAC;MAC7B,IAAIgJ,SAAS,CAACtL,QAAQ,CAAC,GAAG,CAAC,IAAIsL,SAAS,CAACtL,QAAQ,CAAC,GAAG,CAAC,IAAIsL,SAAS,CAACtL,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClFsL,SAAS,GAAGA,SAAS,CAAChG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3CgG,SAAS,GAAG,IAAIA,SAAS,GAAG,CAAC,CAAC;MAChC;MAEA,OAAOA,SAAS;IAClB,CAAC,CAAC,CAACvM,IAAI,CAAC,GAAG,CAAC;IAEZmM,UAAU,IAAIpF,GAAG,GAAG,MAAM;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAMrD,IAAI,GAAG,IAAI0H,IAAI,CAAC,CAACe,UAAU,CAAC,EAAE;IAAE9I,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxE,MAAM9B,GAAG,GAAGe,GAAG,CAAC+I,eAAe,CAAC3H,IAAI,CAAC;EACrC,MAAM8I,IAAI,GAAG3H,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxC0H,IAAI,CAACC,YAAY,CAAC,MAAM,EAAElL,GAAG,CAAC;EAC9BiL,IAAI,CAACC,YAAY,CAAC,UAAU,EAAEP,WAAW,CAAC;EAC1CM,IAAI,CAACnE,KAAK,CAACqE,UAAU,GAAG,QAAQ;EAChC7H,QAAQ,CAAC0D,IAAI,CAACC,WAAW,CAACgE,IAAI,CAAC;EAC/BA,IAAI,CAACf,KAAK,CAAC,CAAC;EACZ5G,QAAQ,CAAC0D,IAAI,CAACyB,WAAW,CAACwC,IAAI,CAAC;EAC/BlK,GAAG,CAACoJ,eAAe,CAACnK,GAAG,CAAC;EAExB5B,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+M,sBAAsB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EAChE,MAAMtC,SAAS,GAAG,CAAC,CAAC;EAEpB,IAAI;IACF5K,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgN,OAAO,CAAClM,MAAM,CAAC;IAC1Cf,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEiN,OAAO,CAAC;;IAE9B;IACAD,OAAO,CAACtJ,OAAO,CAAC,CAAC0D,MAAM,EAAEgC,KAAK,KAAK;MACjCuB,SAAS,CAACvB,KAAK,CAAC,GAAG;QACjB8D,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE;MACf,CAAC;;MAED;MACA,IAAI/F,MAAM,CAACG,iBAAiB,EAAE;QAC5BxH,OAAO,CAACC,GAAG,CAAC,MAAMoJ,KAAK,WAAW,EAAEhC,MAAM,CAACG,iBAAiB,CAAC;QAE7D,IAAI6F,WAAW,GAAG,EAAE;QACpB,IAAI;UACF;UACA,IAAI,OAAOhG,MAAM,CAACG,iBAAiB,KAAK,QAAQ,IAAIH,MAAM,CAACG,iBAAiB,CAAChH,UAAU,CAAC,GAAG,CAAC,EAAE;YAC5F6M,WAAW,GAAG1M,IAAI,CAACC,KAAK,CAACyG,MAAM,CAACG,iBAAiB,CAAC;YAClDxH,OAAO,CAACC,GAAG,CAAC,MAAMoJ,KAAK,eAAe,EAAEgE,WAAW,CAAC;UACtD,CAAC,MAAM;YACLA,WAAW,GAAG,CAAChG,MAAM,CAACG,iBAAiB,CAAC;UAC1C;QACF,CAAC,CAAC,OAAO8F,CAAC,EAAE;UACVtN,OAAO,CAACoB,KAAK,CAAC,cAAc,EAAEkM,CAAC,CAAC;UAChCD,WAAW,GAAG,CAAChG,MAAM,CAACG,iBAAiB,CAAC;QAC1C;;QAEA;QACAoD,SAAS,CAACvB,KAAK,CAAC,CAAC8D,YAAY,GAAGE,WAAW,CAAC5L,GAAG,CAAClB,IAAI,IAAI;UACtD;UACA,MAAMgN,OAAO,GAAGxL,MAAM,CAACxB,IAAI,CAAC;UAC5B;UACA,IAAIgN,OAAO,CAAC/M,UAAU,CAAC,SAAS,CAAC,IAAI+M,OAAO,CAAC/M,UAAU,CAAC,UAAU,CAAC,EAAE;YACnE,OAAO+M,OAAO;UAChB;UACA;UACA,OAAO,GAAGL,OAAO,GAAGK,OAAO,EAAE;QAC/B,CAAC,CAAC;QAEFvN,OAAO,CAACC,GAAG,CAAC,MAAMoJ,KAAK,eAAe,EAAEuB,SAAS,CAACvB,KAAK,CAAC,CAAC8D,YAAY,CAAC;MACxE;;MAEA;MACA,IAAI9F,MAAM,CAACS,gBAAgB,EAAE;QAC3B9H,OAAO,CAACC,GAAG,CAAC,MAAMoJ,KAAK,WAAW,EAAEhC,MAAM,CAACS,gBAAgB,CAAC;QAE5D,IAAI0F,UAAU,GAAG,EAAE;QACnB,IAAI;UACF;UACA,IAAI,OAAOnG,MAAM,CAACS,gBAAgB,KAAK,QAAQ,IAAIT,MAAM,CAACS,gBAAgB,CAACtH,UAAU,CAAC,GAAG,CAAC,EAAE;YAC1FgN,UAAU,GAAG7M,IAAI,CAACC,KAAK,CAACyG,MAAM,CAACS,gBAAgB,CAAC;YAChD9H,OAAO,CAACC,GAAG,CAAC,MAAMoJ,KAAK,eAAe,EAAEmE,UAAU,CAAC;UACrD,CAAC,MAAM;YACLA,UAAU,GAAG,CAACnG,MAAM,CAACS,gBAAgB,CAAC;UACxC;QACF,CAAC,CAAC,OAAOwF,CAAC,EAAE;UACVtN,OAAO,CAACoB,KAAK,CAAC,cAAc,EAAEkM,CAAC,CAAC;UAChCE,UAAU,GAAG,CAACnG,MAAM,CAACS,gBAAgB,CAAC;QACxC;;QAEA;QACA8C,SAAS,CAACvB,KAAK,CAAC,CAAC+D,WAAW,GAAGI,UAAU,CAAC/L,GAAG,CAAClB,IAAI,IAAI;UACpD;UACA,MAAMgN,OAAO,GAAGxL,MAAM,CAACxB,IAAI,CAAC;UAC5B;UACA,IAAIgN,OAAO,CAAC/M,UAAU,CAAC,SAAS,CAAC,IAAI+M,OAAO,CAAC/M,UAAU,CAAC,UAAU,CAAC,EAAE;YACnE,OAAO+M,OAAO;UAChB;UACA;UACA,OAAO,GAAGL,OAAO,GAAGK,OAAO,EAAE;QAC/B,CAAC,CAAC;QAEFvN,OAAO,CAACC,GAAG,CAAC,MAAMoJ,KAAK,eAAe,EAAEuB,SAAS,CAACvB,KAAK,CAAC,CAAC+D,WAAW,CAAC;MACvE;IACF,CAAC,CAAC;IAEFpN,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,MAAM,CAACC,IAAI,CAACwK,SAAS,CAAC,CAAC7J,MAAM,CAAC;IAC5D,OAAO6J,SAAS;EAClB,CAAC,CAAC,OAAOxJ,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,CAAC,CAAC;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}