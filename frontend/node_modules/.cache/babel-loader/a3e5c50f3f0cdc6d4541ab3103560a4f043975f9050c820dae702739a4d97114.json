{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport ExcelJS from 'exceljs';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\n * 将数据导出为Excel文件（使用ExcelJS，支持图片）\n * @param {Array} data - 要导出的数据数组\n * @param {String} fileName - 导出的文件名（不含后缀）\n * @param {Array} headers - 要导出的列标题和对应字段名\n * @param {Object} imageData - 图片数据对象（可选）\n */\nexport const exportToExcel = async (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n    console.log('图片数据内容示例:', JSON.stringify(Object.keys(imageData).slice(0, 2).reduce((obj, key) => {\n      obj[key] = imageData[key];\n      return obj;\n    }, {})));\n  }\n  try {\n    console.log('使用ExcelJS导出Excel...');\n\n    // 创建新的工作簿\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = '危险废物管理系统';\n    workbook.lastModifiedBy = '危险废物管理系统';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n\n    // 添加工作表\n    const worksheet = workbook.addWorksheet('危险废物记录');\n\n    // 设置列\n    const columns = headers.map(header => ({\n      header: header.text,\n      key: header.field,\n      width: 15\n    }));\n    worksheet.columns = columns;\n\n    // 添加数据行\n    data.forEach((record, rowIndex) => {\n      const row = {};\n      headers.forEach(header => {\n        row[header.field] = record[header.field] || '';\n      });\n      worksheet.addRow(row);\n\n      // 处理图片\n      if (imageData && imageData[rowIndex]) {\n        console.log(`处理第${rowIndex + 1}行的图片数据:`, JSON.stringify(Object.keys(imageData[rowIndex])));\n\n        // 处理清理前照片\n        if (imageData[rowIndex][7] && imageData[rowIndex][7].base64) {\n          try {\n            // 从base64添加图片\n            const beforePhotoBase64 = imageData[rowIndex][7].base64;\n            // 确保base64字符串格式正确\n            const base64Data = beforePhotoBase64.startsWith('data:') ? beforePhotoBase64 : `data:image/jpeg;base64,${beforePhotoBase64}`;\n            const beforePhotoId = workbook.addImage({\n              base64: base64Data,\n              extension: 'jpeg'\n            });\n\n            // 计算图片位置（清理前照片列）\n            const beforePhotoColIndex = 7; // 直接使用索引，因为我们知道清理前照片在第8列（索引为7）\n\n            // 添加图片到单元格，设置宽高\n            worksheet.addImage(beforePhotoId, {\n              tl: {\n                col: beforePhotoColIndex,\n                row: rowIndex + 1\n              },\n              ext: {\n                width: 80,\n                height: 80\n              }\n            });\n\n            // 调整行高以适应图片\n            worksheet.getRow(rowIndex + 2).height = 60;\n            console.log(`成功添加第${rowIndex + 1}行的清理前照片`);\n          } catch (imgError) {\n            console.error(`添加清理前照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n\n        // 处理清理后照片\n        if (imageData[rowIndex][8] && imageData[rowIndex][8].base64) {\n          try {\n            // 从base64添加图片\n            const afterPhotoBase64 = imageData[rowIndex][8].base64;\n            // 确保base64字符串格式正确\n            const base64Data = afterPhotoBase64.startsWith('data:') ? afterPhotoBase64 : `data:image/jpeg;base64,${afterPhotoBase64}`;\n            const afterPhotoId = workbook.addImage({\n              base64: base64Data,\n              extension: 'jpeg'\n            });\n\n            // 计算图片位置（清理后照片列）\n            const afterPhotoColIndex = 8; // 直接使用索引，因为我们知道清理后照片在第9列（索引为8）\n\n            // 添加图片到单元格，设置宽高\n            worksheet.addImage(afterPhotoId, {\n              tl: {\n                col: afterPhotoColIndex,\n                row: rowIndex + 1\n              },\n              ext: {\n                width: 80,\n                height: 80\n              }\n            });\n\n            // 调整行高以适应图片\n            worksheet.getRow(rowIndex + 2).height = 60;\n            console.log(`成功添加第${rowIndex + 1}行的清理后照片`);\n          } catch (imgError) {\n            console.error(`添加清理后照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n      }\n    });\n\n    // 设置表头样式\n    worksheet.getRow(1).font = {\n      bold: true\n    };\n    worksheet.getRow(1).alignment = {\n      vertical: 'middle',\n      horizontal: 'center'\n    };\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 生成buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n\n    // 创建Blob对象\n    const blob = new Blob([buffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\n * 导出为CSV文件\n * @param {Array} data - 数据数组\n * @param {String} fileName - 文件名\n * @param {Array} headers - 表头配置\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.text}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\n * 将图片URL转换为Base64格式\n * @param {string} url 图片URL\n * @returns {Promise<string>} Base64格式的图片数据\n */\nexport const imageUrlToBase64 = async url => {\n  console.log('开始转换图片到Base64:', url);\n\n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n\n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, {\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = e => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n\n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n\n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = e => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n\n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\n * 准备带图片的导出数据\n * @param {Array} records 记录数据\n * @param {string} baseUrl 基础URL\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  console.log('准备图片导出数据，记录数:', records.length);\n  console.log('使用的基础URL:', baseUrl);\n\n  // 调试：打印第一条记录的所有字段\n  if (records.length > 0) {\n    console.log('第一条记录的所有字段:');\n    const firstRecord = records[0];\n    Object.keys(firstRecord).forEach(key => {\n      console.log(`${key}: ${typeof firstRecord[key] === 'object' ? JSON.stringify(firstRecord[key]) : firstRecord[key]}`);\n    });\n  }\n  const imageData = {};\n  let processedCount = 0;\n  let successCount = 0;\n\n  // 解析照片路径的函数\n  const parsePhotoPath = path => {\n    if (!path) return [];\n    try {\n      // 尝试解析为JSON\n      if (path.startsWith('[') && path.endsWith(']')) {\n        return JSON.parse(path);\n      }\n      // 如果不是JSON格式，则将其作为单个路径返回\n      return [path];\n    } catch (error) {\n      console.error('解析照片路径失败:', error);\n      // 如果解析失败，将其作为单个路径返回\n      return [path];\n    }\n  };\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n    console.log(`处理记录 ${i + 1}/${records.length}, ID: ${record.id}`);\n\n    // 初始化该记录的图片数据\n    imageData[i] = {};\n\n    // 处理清理前照片\n    if (record.photo_path_before) {\n      const beforePhotoPaths = parsePhotoPath(record.photo_path_before);\n      console.log(`记录 ${i + 1} 清理前照片路径:`, beforePhotoPaths);\n      if (beforePhotoPaths.length > 0) {\n        const beforePhotoUrl = `${baseUrl}${beforePhotoPaths[0]}`;\n        console.log(`记录 ${i + 1} 清理前照片URL:`, beforePhotoUrl);\n        try {\n          const beforePhotoBase64 = await imageUrlToBase64(beforePhotoUrl);\n          if (beforePhotoBase64) {\n            imageData[i][7] = {\n              url: beforePhotoUrl,\n              base64: beforePhotoBase64\n            };\n            console.log(`记录 ${i + 1} 清理前照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i + 1} 清理前照片转换失败`);\n            // 仍然保留URL\n            imageData[i][7] = {\n              url: beforePhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i + 1} 清理前照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][7] = {\n            url: beforePhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i + 1} 没有清理前照片`);\n    }\n\n    // 处理清理后照片\n    if (record.photo_path_after) {\n      const afterPhotoPaths = parsePhotoPath(record.photo_path_after);\n      console.log(`记录 ${i + 1} 清理后照片路径:`, afterPhotoPaths);\n      if (afterPhotoPaths.length > 0) {\n        const afterPhotoUrl = `${baseUrl}${afterPhotoPaths[0]}`;\n        console.log(`记录 ${i + 1} 清理后照片URL:`, afterPhotoUrl);\n        try {\n          const afterPhotoBase64 = await imageUrlToBase64(afterPhotoUrl);\n          if (afterPhotoBase64) {\n            imageData[i][8] = {\n              url: afterPhotoUrl,\n              base64: afterPhotoBase64\n            };\n            console.log(`记录 ${i + 1} 清理后照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i + 1} 清理后照片转换失败`);\n            // 仍然保留URL\n            imageData[i][8] = {\n              url: afterPhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i + 1} 清理后照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][8] = {\n            url: afterPhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i + 1} 没有清理后照片`);\n    }\n\n    // 添加单位名称\n    if (record.unit_name) {\n      imageData[i].unit_name = record.unit_name;\n    }\n    processedCount++;\n  }\n  console.log(`图片数据准备完成，处理记录: ${processedCount}/${records.length}, 成功转换图片: ${successCount}`);\n  return imageData;\n};","map":{"version":3,"names":["XLSX","ExcelJS","console","log","version","Object","keys","join","exportToExcel","data","fileName","headers","imageData","length","error","replace","timestamp","Date","toISOString","substring","JSON","stringify","slice","reduce","obj","key","workbook","Workbook","creator","lastModifiedBy","created","modified","worksheet","addWorksheet","columns","map","header","text","field","width","forEach","record","rowIndex","row","addRow","base64","beforePhotoBase64","base64Data","startsWith","beforePhotoId","addImage","extension","beforePhotoColIndex","tl","col","ext","height","getRow","imgError","afterPhotoBase64","afterPhotoId","afterPhotoColIndex","font","bold","alignment","vertical","horizontal","excelFileName","buffer","xlsx","writeBuffer","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportToCSV","csvFileName","csvContent","headerRow","h","item","value","undefined","cellValue","String","includes","setAttribute","style","visibility","imageUrlToBase64","response","fetch","mode","cache","ok","Error","status","size","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","e","readAsDataURL","warn","img","Image","crossOrigin","onload","src","canvas","ctx","getContext","drawImage","toDataURL","error2","prepareImageExportData","records","baseUrl","firstRecord","processedCount","successCount","parsePhotoPath","path","endsWith","parse","i","id","photo_path_before","beforePhotoPaths","beforePhotoUrl","photo_path_after","afterPhotoPaths","afterPhotoUrl","unit_name"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport ExcelJS from 'exceljs';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\n * 将数据导出为Excel文件（使用ExcelJS，支持图片）\n * @param {Array} data - 要导出的数据数组\n * @param {String} fileName - 导出的文件名（不含后缀）\n * @param {Array} headers - 要导出的列标题和对应字段名\n * @param {Object} imageData - 图片数据对象（可选）\n */\nexport const exportToExcel = async (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  \n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n    console.log('图片数据内容示例:', JSON.stringify(Object.keys(imageData).slice(0, 2).reduce((obj, key) => {\n      obj[key] = imageData[key];\n      return obj;\n    }, {})));\n  }\n  \n  try {\n    console.log('使用ExcelJS导出Excel...');\n    \n    // 创建新的工作簿\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = '危险废物管理系统';\n    workbook.lastModifiedBy = '危险废物管理系统';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n    \n    // 添加工作表\n    const worksheet = workbook.addWorksheet('危险废物记录');\n    \n    // 设置列\n    const columns = headers.map(header => ({\n      header: header.text,\n      key: header.field,\n      width: 15\n    }));\n    worksheet.columns = columns;\n    \n    // 添加数据行\n    data.forEach((record, rowIndex) => {\n      const row = {};\n      headers.forEach(header => {\n        row[header.field] = record[header.field] || '';\n      });\n      worksheet.addRow(row);\n      \n      // 处理图片\n      if (imageData && imageData[rowIndex]) {\n        console.log(`处理第${rowIndex+1}行的图片数据:`, JSON.stringify(Object.keys(imageData[rowIndex])));\n        \n        // 处理清理前照片\n        if (imageData[rowIndex][7] && imageData[rowIndex][7].base64) {\n          try {\n            // 从base64添加图片\n            const beforePhotoBase64 = imageData[rowIndex][7].base64;\n            // 确保base64字符串格式正确\n            const base64Data = beforePhotoBase64.startsWith('data:') \n              ? beforePhotoBase64 \n              : `data:image/jpeg;base64,${beforePhotoBase64}`;\n              \n            const beforePhotoId = workbook.addImage({\n              base64: base64Data,\n              extension: 'jpeg',\n            });\n            \n            // 计算图片位置（清理前照片列）\n            const beforePhotoColIndex = 7; // 直接使用索引，因为我们知道清理前照片在第8列（索引为7）\n            \n            // 添加图片到单元格，设置宽高\n            worksheet.addImage(beforePhotoId, {\n              tl: { col: beforePhotoColIndex, row: rowIndex + 1 },\n              ext: { width: 80, height: 80 }\n            });\n            \n            // 调整行高以适应图片\n            worksheet.getRow(rowIndex + 2).height = 60;\n            console.log(`成功添加第${rowIndex+1}行的清理前照片`);\n          } catch (imgError) {\n            console.error(`添加清理前照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n        \n        // 处理清理后照片\n        if (imageData[rowIndex][8] && imageData[rowIndex][8].base64) {\n          try {\n            // 从base64添加图片\n            const afterPhotoBase64 = imageData[rowIndex][8].base64;\n            // 确保base64字符串格式正确\n            const base64Data = afterPhotoBase64.startsWith('data:') \n              ? afterPhotoBase64 \n              : `data:image/jpeg;base64,${afterPhotoBase64}`;\n              \n            const afterPhotoId = workbook.addImage({\n              base64: base64Data,\n              extension: 'jpeg',\n            });\n            \n            // 计算图片位置（清理后照片列）\n            const afterPhotoColIndex = 8; // 直接使用索引，因为我们知道清理后照片在第9列（索引为8）\n            \n            // 添加图片到单元格，设置宽高\n            worksheet.addImage(afterPhotoId, {\n              tl: { col: afterPhotoColIndex, row: rowIndex + 1 },\n              ext: { width: 80, height: 80 }\n            });\n            \n            // 调整行高以适应图片\n            worksheet.getRow(rowIndex + 2).height = 60;\n            console.log(`成功添加第${rowIndex+1}行的清理后照片`);\n          } catch (imgError) {\n            console.error(`添加清理后照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n      }\n    });\n    \n    // 设置表头样式\n    worksheet.getRow(1).font = { bold: true };\n    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };\n    \n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n    \n    // 生成buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n    \n    // 创建Blob对象\n    const blob = new Blob([buffer], { \n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n    });\n    \n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    \n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\n * 导出为CSV文件\n * @param {Array} data - 数据数组\n * @param {String} fileName - 文件名\n * @param {Array} headers - 表头配置\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n  \n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n  \n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.text}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n  \n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n      \n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n      \n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n      \n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      \n      return cellValue;\n    }).join(',');\n    \n    csvContent += row + '\\r\\n';\n  });\n  \n  // 创建下载链接\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  \n  console.log('CSV导出成功');\n};\n\n/**\n * 将图片URL转换为Base64格式\n * @param {string} url 图片URL\n * @returns {Promise<string>} Base64格式的图片数据\n */\nexport const imageUrlToBase64 = async (url) => {\n  console.log('开始转换图片到Base64:', url);\n  \n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n  \n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, { \n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    \n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    \n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = (e) => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n    \n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n      \n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = (e) => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      \n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n      \n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n      \n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\n * 准备带图片的导出数据\n * @param {Array} records 记录数据\n * @param {string} baseUrl 基础URL\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  console.log('准备图片导出数据，记录数:', records.length);\n  console.log('使用的基础URL:', baseUrl);\n  \n  // 调试：打印第一条记录的所有字段\n  if (records.length > 0) {\n    console.log('第一条记录的所有字段:');\n    const firstRecord = records[0];\n    Object.keys(firstRecord).forEach(key => {\n      console.log(`${key}: ${typeof firstRecord[key] === 'object' ? JSON.stringify(firstRecord[key]) : firstRecord[key]}`);\n    });\n  }\n  \n  const imageData = {};\n  let processedCount = 0;\n  let successCount = 0;\n  \n  // 解析照片路径的函数\n  const parsePhotoPath = (path) => {\n    if (!path) return [];\n    \n    try {\n      // 尝试解析为JSON\n      if (path.startsWith('[') && path.endsWith(']')) {\n        return JSON.parse(path);\n      }\n      // 如果不是JSON格式，则将其作为单个路径返回\n      return [path];\n    } catch (error) {\n      console.error('解析照片路径失败:', error);\n      // 如果解析失败，将其作为单个路径返回\n      return [path];\n    }\n  };\n  \n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n    console.log(`处理记录 ${i+1}/${records.length}, ID: ${record.id}`);\n    \n    // 初始化该记录的图片数据\n    imageData[i] = {};\n    \n    // 处理清理前照片\n    if (record.photo_path_before) {\n      const beforePhotoPaths = parsePhotoPath(record.photo_path_before);\n      console.log(`记录 ${i+1} 清理前照片路径:`, beforePhotoPaths);\n      \n      if (beforePhotoPaths.length > 0) {\n        const beforePhotoUrl = `${baseUrl}${beforePhotoPaths[0]}`;\n        console.log(`记录 ${i+1} 清理前照片URL:`, beforePhotoUrl);\n        \n        try {\n          const beforePhotoBase64 = await imageUrlToBase64(beforePhotoUrl);\n          if (beforePhotoBase64) {\n            imageData[i][7] = {\n              url: beforePhotoUrl,\n              base64: beforePhotoBase64\n            };\n            console.log(`记录 ${i+1} 清理前照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i+1} 清理前照片转换失败`);\n            // 仍然保留URL\n            imageData[i][7] = {\n              url: beforePhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i+1} 清理前照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][7] = {\n            url: beforePhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i+1} 没有清理前照片`);\n    }\n    \n    // 处理清理后照片\n    if (record.photo_path_after) {\n      const afterPhotoPaths = parsePhotoPath(record.photo_path_after);\n      console.log(`记录 ${i+1} 清理后照片路径:`, afterPhotoPaths);\n      \n      if (afterPhotoPaths.length > 0) {\n        const afterPhotoUrl = `${baseUrl}${afterPhotoPaths[0]}`;\n        console.log(`记录 ${i+1} 清理后照片URL:`, afterPhotoUrl);\n        \n        try {\n          const afterPhotoBase64 = await imageUrlToBase64(afterPhotoUrl);\n          if (afterPhotoBase64) {\n            imageData[i][8] = {\n              url: afterPhotoUrl,\n              base64: afterPhotoBase64\n            };\n            console.log(`记录 ${i+1} 清理后照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i+1} 清理后照片转换失败`);\n            // 仍然保留URL\n            imageData[i][8] = {\n              url: afterPhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i+1} 清理后照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][8] = {\n            url: afterPhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i+1} 没有清理后照片`);\n    }\n    \n    // 添加单位名称\n    if (record.unit_name) {\n      imageData[i].unit_name = record.unit_name;\n    }\n    \n    processedCount++;\n  }\n  \n  console.log(`图片数据准备完成，处理记录: ${processedCount}/${records.length}, 成功转换图片: ${successCount}`);\n  return imageData;\n};\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,OAAOC,OAAO,MAAM,SAAS;AAC7B;;AAEA;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,IAAI,CAACI,OAAO,CAAC;AACrCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,GAAG,IAAI,KAAK;EAChF,IAAI,CAACH,IAAI,IAAIA,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;IAC9BX,OAAO,CAACY,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAO,KAAK;EACd;;EAEA;EACAJ,QAAQ,GAAGA,QAAQ,CAACK,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;EACjD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACH,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjFjB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,IAAI,CAACI,MAAM,CAAC;EACzCX,OAAO,CAACC,GAAG,CAAC,UAAU,EAAES,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;EAC9C,IAAIA,SAAS,EAAE;IACbV,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACC,MAAM,CAAC;IACrDX,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEiB,IAAI,CAACC,SAAS,CAAChB,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC9FD,GAAG,CAACC,GAAG,CAAC,GAAGb,SAAS,CAACa,GAAG,CAAC;MACzB,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACV;EAEA,IAAI;IACFtB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;IAElC;IACA,MAAMuB,QAAQ,GAAG,IAAIzB,OAAO,CAAC0B,QAAQ,CAAC,CAAC;IACvCD,QAAQ,CAACE,OAAO,GAAG,UAAU;IAC7BF,QAAQ,CAACG,cAAc,GAAG,UAAU;IACpCH,QAAQ,CAACI,OAAO,GAAG,IAAIb,IAAI,CAAC,CAAC;IAC7BS,QAAQ,CAACK,QAAQ,GAAG,IAAId,IAAI,CAAC,CAAC;;IAE9B;IACA,MAAMe,SAAS,GAAGN,QAAQ,CAACO,YAAY,CAAC,QAAQ,CAAC;;IAEjD;IACA,MAAMC,OAAO,GAAGvB,OAAO,CAACwB,GAAG,CAACC,MAAM,KAAK;MACrCA,MAAM,EAAEA,MAAM,CAACC,IAAI;MACnBZ,GAAG,EAAEW,MAAM,CAACE,KAAK;MACjBC,KAAK,EAAE;IACT,CAAC,CAAC,CAAC;IACHP,SAAS,CAACE,OAAO,GAAGA,OAAO;;IAE3B;IACAzB,IAAI,CAAC+B,OAAO,CAAC,CAACC,MAAM,EAAEC,QAAQ,KAAK;MACjC,MAAMC,GAAG,GAAG,CAAC,CAAC;MACdhC,OAAO,CAAC6B,OAAO,CAACJ,MAAM,IAAI;QACxBO,GAAG,CAACP,MAAM,CAACE,KAAK,CAAC,GAAGG,MAAM,CAACL,MAAM,CAACE,KAAK,CAAC,IAAI,EAAE;MAChD,CAAC,CAAC;MACFN,SAAS,CAACY,MAAM,CAACD,GAAG,CAAC;;MAErB;MACA,IAAI/B,SAAS,IAAIA,SAAS,CAAC8B,QAAQ,CAAC,EAAE;QACpCxC,OAAO,CAACC,GAAG,CAAC,MAAMuC,QAAQ,GAAC,CAAC,SAAS,EAAEtB,IAAI,CAACC,SAAS,CAAChB,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC;;QAExF;QACA,IAAI9B,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI9B,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACG,MAAM,EAAE;UAC3D,IAAI;YACF;YACA,MAAMC,iBAAiB,GAAGlC,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACG,MAAM;YACvD;YACA,MAAME,UAAU,GAAGD,iBAAiB,CAACE,UAAU,CAAC,OAAO,CAAC,GACpDF,iBAAiB,GACjB,0BAA0BA,iBAAiB,EAAE;YAEjD,MAAMG,aAAa,GAAGvB,QAAQ,CAACwB,QAAQ,CAAC;cACtCL,MAAM,EAAEE,UAAU;cAClBI,SAAS,EAAE;YACb,CAAC,CAAC;;YAEF;YACA,MAAMC,mBAAmB,GAAG,CAAC,CAAC,CAAC;;YAE/B;YACApB,SAAS,CAACkB,QAAQ,CAACD,aAAa,EAAE;cAChCI,EAAE,EAAE;gBAAEC,GAAG,EAAEF,mBAAmB;gBAAET,GAAG,EAAED,QAAQ,GAAG;cAAE,CAAC;cACnDa,GAAG,EAAE;gBAAEhB,KAAK,EAAE,EAAE;gBAAEiB,MAAM,EAAE;cAAG;YAC/B,CAAC,CAAC;;YAEF;YACAxB,SAAS,CAACyB,MAAM,CAACf,QAAQ,GAAG,CAAC,CAAC,CAACc,MAAM,GAAG,EAAE;YAC1CtD,OAAO,CAACC,GAAG,CAAC,QAAQuC,QAAQ,GAAC,CAAC,SAAS,CAAC;UAC1C,CAAC,CAAC,OAAOgB,QAAQ,EAAE;YACjBxD,OAAO,CAACY,KAAK,CAAC,eAAe4B,QAAQ,GAAG,CAAC,GAAG,EAAEgB,QAAQ,CAAC;UACzD;QACF;;QAEA;QACA,IAAI9C,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI9B,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACG,MAAM,EAAE;UAC3D,IAAI;YACF;YACA,MAAMc,gBAAgB,GAAG/C,SAAS,CAAC8B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACG,MAAM;YACtD;YACA,MAAME,UAAU,GAAGY,gBAAgB,CAACX,UAAU,CAAC,OAAO,CAAC,GACnDW,gBAAgB,GAChB,0BAA0BA,gBAAgB,EAAE;YAEhD,MAAMC,YAAY,GAAGlC,QAAQ,CAACwB,QAAQ,CAAC;cACrCL,MAAM,EAAEE,UAAU;cAClBI,SAAS,EAAE;YACb,CAAC,CAAC;;YAEF;YACA,MAAMU,kBAAkB,GAAG,CAAC,CAAC,CAAC;;YAE9B;YACA7B,SAAS,CAACkB,QAAQ,CAACU,YAAY,EAAE;cAC/BP,EAAE,EAAE;gBAAEC,GAAG,EAAEO,kBAAkB;gBAAElB,GAAG,EAAED,QAAQ,GAAG;cAAE,CAAC;cAClDa,GAAG,EAAE;gBAAEhB,KAAK,EAAE,EAAE;gBAAEiB,MAAM,EAAE;cAAG;YAC/B,CAAC,CAAC;;YAEF;YACAxB,SAAS,CAACyB,MAAM,CAACf,QAAQ,GAAG,CAAC,CAAC,CAACc,MAAM,GAAG,EAAE;YAC1CtD,OAAO,CAACC,GAAG,CAAC,QAAQuC,QAAQ,GAAC,CAAC,SAAS,CAAC;UAC1C,CAAC,CAAC,OAAOgB,QAAQ,EAAE;YACjBxD,OAAO,CAACY,KAAK,CAAC,eAAe4B,QAAQ,GAAG,CAAC,GAAG,EAAEgB,QAAQ,CAAC;UACzD;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA1B,SAAS,CAACyB,MAAM,CAAC,CAAC,CAAC,CAACK,IAAI,GAAG;MAAEC,IAAI,EAAE;IAAK,CAAC;IACzC/B,SAAS,CAACyB,MAAM,CAAC,CAAC,CAAC,CAACO,SAAS,GAAG;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAC;;IAE5E;IACA,MAAMC,aAAa,GAAG,GAAGzD,QAAQ,IAAIM,SAAS,OAAO;IACrDd,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEgE,aAAa,CAAC;;IAE1C;IACA,MAAMC,MAAM,GAAG,MAAM1C,QAAQ,CAAC2C,IAAI,CAACC,WAAW,CAAC,CAAC;;IAEhD;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,MAAM,CAAC,EAAE;MAC9BK,IAAI,EAAE;IACR,CAAC,CAAC;;IAEF;IACA,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;IACrC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGN,GAAG;IACfG,IAAI,CAACI,QAAQ,GAAGd,aAAa;;IAE7B;IACAW,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;IAC/BF,GAAG,CAACW,eAAe,CAACZ,GAAG,CAAC;IAExBxE,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvCZ,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB;IACAoF,WAAW,CAAC9E,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IACpC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM4E,WAAW,GAAGA,CAAC9E,IAAI,EAAEC,QAAQ,EAAEC,OAAO,KAAK;EACtD;EACA,MAAMK,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACH,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjF,MAAMqE,WAAW,GAAG,GAAG9E,QAAQ,IAAIM,SAAS,MAAM;;EAElD;EACA,IAAIyE,UAAU,GAAG,QAAQ,CAAC,CAAC;;EAE3B;EACA,MAAMC,SAAS,GAAG/E,OAAO,CAACwB,GAAG,CAACwD,CAAC,IAAI,IAAIA,CAAC,CAACtD,IAAI,GAAG,CAAC,CAAC9B,IAAI,CAAC,GAAG,CAAC;EAC3DkF,UAAU,IAAIC,SAAS,GAAG,MAAM;;EAEhC;EACAjF,IAAI,CAAC+B,OAAO,CAACoD,IAAI,IAAI;IACnB,MAAMjD,GAAG,GAAGhC,OAAO,CAACwB,GAAG,CAACC,MAAM,IAAI;MAChC,MAAMyD,KAAK,GAAGD,IAAI,CAACxD,MAAM,CAACE,KAAK,CAAC;;MAEhC;MACA,IAAIuD,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,EAAE;QACzC,OAAO,EAAE;MACX;;MAEA;MACA,IAAI1D,MAAM,CAACqC,IAAI,KAAK,QAAQ,IAAI,OAAOoB,KAAK,KAAK,QAAQ,EAAE;QACzD,OAAOA,KAAK;MACd;;MAEA;MACA,IAAIE,SAAS,GAAGC,MAAM,CAACH,KAAK,CAAC;MAC7B,IAAIE,SAAS,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClFF,SAAS,GAAGA,SAAS,CAAChF,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3CgF,SAAS,GAAG,IAAIA,SAAS,GAAG,CAAC,CAAC;MAChC;MAEA,OAAOA,SAAS;IAClB,CAAC,CAAC,CAACxF,IAAI,CAAC,GAAG,CAAC;IAEZkF,UAAU,IAAI9C,GAAG,GAAG,MAAM;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAM4B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACiB,UAAU,CAAC,EAAE;IAAEhB,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxE,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACL,IAAI,CAAC;EACrC,MAAMM,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACqB,YAAY,CAAC,MAAM,EAAExB,GAAG,CAAC;EAC9BG,IAAI,CAACqB,YAAY,CAAC,UAAU,EAAEV,WAAW,CAAC;EAC1CX,IAAI,CAACsB,KAAK,CAACC,UAAU,GAAG,QAAQ;EAChCtB,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;EAC/BF,GAAG,CAACW,eAAe,CAACZ,GAAG,CAAC;EAExBxE,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMkG,gBAAgB,GAAG,MAAO3B,GAAG,IAAK;EAC7CxE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEuE,GAAG,CAAC;;EAElC;EACA,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnCxE,OAAO,CAACY,KAAK,CAAC,WAAW,EAAE4D,GAAG,CAAC;IAC/B,OAAO,IAAI;EACb;;EAEA;EACA,IAAI;IACFxE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMmG,QAAQ,GAAG,MAAMC,KAAK,CAAC7B,GAAG,EAAE;MAChC8B,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,WAAWL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC/C;IAEA,MAAMrC,IAAI,GAAG,MAAM+B,QAAQ,CAAC/B,IAAI,CAAC,CAAC;IAClCrE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEoE,IAAI,CAACsC,IAAI,EAAE,SAAS,EAAEtC,IAAI,CAACE,IAAI,CAAC;IAE1D,OAAO,IAAIqC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACvBjH,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE8G,MAAM,CAACG,MAAM,CAACvG,MAAM,CAAC;QACtDkG,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;MACxB,CAAC;MACDH,MAAM,CAACI,OAAO,GAAIC,CAAC,IAAK;QACtBpH,OAAO,CAACY,KAAK,CAAC,eAAe,EAAEwG,CAAC,CAAC;QACjCN,MAAM,CAACM,CAAC,CAAC;MACX,CAAC;MACDL,MAAM,CAACM,aAAa,CAAChD,IAAI,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOzD,KAAK,EAAE;IACdZ,OAAO,CAACsH,IAAI,CAAC,oBAAoB,EAAE1G,KAAK,CAAC;;IAEzC;IACA,IAAI;MACFZ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,MAAMsH,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,WAAW,GAAG,WAAW,CAAC,CAAC;;MAE/B;MACA,MAAM,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACrCS,GAAG,CAACG,MAAM,GAAGb,OAAO;QACpBU,GAAG,CAACJ,OAAO,GAAIC,CAAC,IAAK;UACnBpH,OAAO,CAACY,KAAK,CAAC,SAAS,EAAEwG,CAAC,CAAC;UAC3BN,MAAM,CAACM,CAAC,CAAC;QACX,CAAC;QACDG,GAAG,CAACI,GAAG,GAAGnD,GAAG;MACf,CAAC,CAAC;MAEFxE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEsH,GAAG,CAAClF,KAAK,EAAE,GAAG,EAAEkF,GAAG,CAACjE,MAAM,CAAC;;MAErD;MACA,MAAMsE,MAAM,GAAGhD,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C+C,MAAM,CAACvF,KAAK,GAAGkF,GAAG,CAAClF,KAAK;MACxBuF,MAAM,CAACtE,MAAM,GAAGiE,GAAG,CAACjE,MAAM;MAC1B,MAAMuE,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAACE,SAAS,CAACR,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;;MAExB;MACA,MAAM5E,MAAM,GAAGiF,MAAM,CAACI,SAAS,CAAC,YAAY,CAAC;MAC7ChI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE0C,MAAM,CAAChC,MAAM,CAAC;MAC/C,OAAOgC,MAAM;IACf,CAAC,CAAC,OAAOsF,MAAM,EAAE;MACfjI,OAAO,CAACY,KAAK,CAAC,mBAAmB,EAAEqH,MAAM,CAAC;MAC1C,OAAO,IAAI;IACb;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EAChEpI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEkI,OAAO,CAACxH,MAAM,CAAC;EAC5CX,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEmI,OAAO,CAAC;;EAEjC;EACA,IAAID,OAAO,CAACxH,MAAM,GAAG,CAAC,EAAE;IACtBX,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,MAAMoI,WAAW,GAAGF,OAAO,CAAC,CAAC,CAAC;IAC9BhI,MAAM,CAACC,IAAI,CAACiI,WAAW,CAAC,CAAC/F,OAAO,CAACf,GAAG,IAAI;MACtCvB,OAAO,CAACC,GAAG,CAAC,GAAGsB,GAAG,KAAK,OAAO8G,WAAW,CAAC9G,GAAG,CAAC,KAAK,QAAQ,GAAGL,IAAI,CAACC,SAAS,CAACkH,WAAW,CAAC9G,GAAG,CAAC,CAAC,GAAG8G,WAAW,CAAC9G,GAAG,CAAC,EAAE,CAAC;IACtH,CAAC,CAAC;EACJ;EAEA,MAAMb,SAAS,GAAG,CAAC,CAAC;EACpB,IAAI4H,cAAc,GAAG,CAAC;EACtB,IAAIC,YAAY,GAAG,CAAC;;EAEpB;EACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IAEpB,IAAI;MACF;MACA,IAAIA,IAAI,CAAC3F,UAAU,CAAC,GAAG,CAAC,IAAI2F,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC9C,OAAOxH,IAAI,CAACyH,KAAK,CAACF,IAAI,CAAC;MACzB;MACA;MACA,OAAO,CAACA,IAAI,CAAC;IACf,CAAC,CAAC,OAAO7H,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC;MACA,OAAO,CAAC6H,IAAI,CAAC;IACf;EACF,CAAC;EAED,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,OAAO,CAACxH,MAAM,EAAEiI,CAAC,EAAE,EAAE;IACvC,MAAMrG,MAAM,GAAG4F,OAAO,CAACS,CAAC,CAAC;IACzB5I,OAAO,CAACC,GAAG,CAAC,QAAQ2I,CAAC,GAAC,CAAC,IAAIT,OAAO,CAACxH,MAAM,SAAS4B,MAAM,CAACsG,EAAE,EAAE,CAAC;;IAE9D;IACAnI,SAAS,CAACkI,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEjB;IACA,IAAIrG,MAAM,CAACuG,iBAAiB,EAAE;MAC5B,MAAMC,gBAAgB,GAAGP,cAAc,CAACjG,MAAM,CAACuG,iBAAiB,CAAC;MACjE9I,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,WAAW,EAAEG,gBAAgB,CAAC;MAEnD,IAAIA,gBAAgB,CAACpI,MAAM,GAAG,CAAC,EAAE;QAC/B,MAAMqI,cAAc,GAAG,GAAGZ,OAAO,GAAGW,gBAAgB,CAAC,CAAC,CAAC,EAAE;QACzD/I,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,YAAY,EAAEI,cAAc,CAAC;QAElD,IAAI;UACF,MAAMpG,iBAAiB,GAAG,MAAMuD,gBAAgB,CAAC6C,cAAc,CAAC;UAChE,IAAIpG,iBAAiB,EAAE;YACrBlC,SAAS,CAACkI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBpE,GAAG,EAAEwE,cAAc;cACnBrG,MAAM,EAAEC;YACV,CAAC;YACD5C,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,YAAY,CAAC;YAClCL,YAAY,EAAE;UAChB,CAAC,MAAM;YACLvI,OAAO,CAACsH,IAAI,CAAC,MAAMsB,CAAC,GAAC,CAAC,YAAY,CAAC;YACnC;YACAlI,SAAS,CAACkI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBpE,GAAG,EAAEwE;YACP,CAAC;UACH;QACF,CAAC,CAAC,OAAOpI,KAAK,EAAE;UACdZ,OAAO,CAACY,KAAK,CAAC,MAAMgI,CAAC,GAAC,CAAC,aAAa,EAAEhI,KAAK,CAAC;UAC5C;UACAF,SAAS,CAACkI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;YAChBpE,GAAG,EAAEwE;UACP,CAAC;QACH;MACF;IACF,CAAC,MAAM;MACLhJ,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,UAAU,CAAC;IAClC;;IAEA;IACA,IAAIrG,MAAM,CAAC0G,gBAAgB,EAAE;MAC3B,MAAMC,eAAe,GAAGV,cAAc,CAACjG,MAAM,CAAC0G,gBAAgB,CAAC;MAC/DjJ,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,WAAW,EAAEM,eAAe,CAAC;MAElD,IAAIA,eAAe,CAACvI,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAMwI,aAAa,GAAG,GAAGf,OAAO,GAAGc,eAAe,CAAC,CAAC,CAAC,EAAE;QACvDlJ,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,YAAY,EAAEO,aAAa,CAAC;QAEjD,IAAI;UACF,MAAM1F,gBAAgB,GAAG,MAAM0C,gBAAgB,CAACgD,aAAa,CAAC;UAC9D,IAAI1F,gBAAgB,EAAE;YACpB/C,SAAS,CAACkI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBpE,GAAG,EAAE2E,aAAa;cAClBxG,MAAM,EAAEc;YACV,CAAC;YACDzD,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,YAAY,CAAC;YAClCL,YAAY,EAAE;UAChB,CAAC,MAAM;YACLvI,OAAO,CAACsH,IAAI,CAAC,MAAMsB,CAAC,GAAC,CAAC,YAAY,CAAC;YACnC;YACAlI,SAAS,CAACkI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBpE,GAAG,EAAE2E;YACP,CAAC;UACH;QACF,CAAC,CAAC,OAAOvI,KAAK,EAAE;UACdZ,OAAO,CAACY,KAAK,CAAC,MAAMgI,CAAC,GAAC,CAAC,aAAa,EAAEhI,KAAK,CAAC;UAC5C;UACAF,SAAS,CAACkI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;YAChBpE,GAAG,EAAE2E;UACP,CAAC;QACH;MACF;IACF,CAAC,MAAM;MACLnJ,OAAO,CAACC,GAAG,CAAC,MAAM2I,CAAC,GAAC,CAAC,UAAU,CAAC;IAClC;;IAEA;IACA,IAAIrG,MAAM,CAAC6G,SAAS,EAAE;MACpB1I,SAAS,CAACkI,CAAC,CAAC,CAACQ,SAAS,GAAG7G,MAAM,CAAC6G,SAAS;IAC3C;IAEAd,cAAc,EAAE;EAClB;EAEAtI,OAAO,CAACC,GAAG,CAAC,kBAAkBqI,cAAc,IAAIH,OAAO,CAACxH,MAAM,aAAa4H,YAAY,EAAE,CAAC;EAC1F,OAAO7H,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}