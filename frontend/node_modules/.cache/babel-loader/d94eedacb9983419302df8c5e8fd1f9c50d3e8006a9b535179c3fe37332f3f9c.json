{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\n// import Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n// 解析照片路径\nconst parsePhotoPath = path => {\n  console.log('解析照片路径:', path);\n  if (!path) {\n    console.log('照片路径为空');\n    return [];\n  }\n\n  // 如果path已经是数组，直接返回\n  if (Array.isArray(path)) {\n    console.log('照片路径已经是数组:', path);\n    return path;\n  }\n  try {\n    // 尝试解析为JSON\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\n      console.log('尝试将照片路径解析为JSON');\n      const parsed = JSON.parse(path);\n      console.log('JSON解析结果:', parsed);\n      if (Array.isArray(parsed)) {\n        return parsed;\n      } else {\n        console.error('JSON解析结果不是数组:', parsed);\n        return [path]; // 如果解析结果不是数组，则将原始路径作为单个元素返回\n      }\n    }\n\n    // 如果不是JSON格式，则将其作为单个路径返回\n    console.log('照片路径不是JSON格式，作为单个路径返回');\n    return [path];\n  } catch (error) {\n    console.error('解析照片路径失败:', error);\n    console.error('错误详情:', error.message);\n    // 如果解析失败，则将原始路径作为单个元素返回\n    return [path];\n  }\n};\n\n// 将图片URL转换为Base64\nconst imageUrlToBase64 = url => {\n  console.log('开始转换图片URL到Base64:', url);\n\n  // 检查URL是否有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return Promise.reject(new Error('Invalid image URL'));\n  }\n\n  // 检查URL是否为相对路径，如果是，添加origin\n  let fullUrl = url;\n  if (url.startsWith('/')) {\n    fullUrl = window.location.origin + url;\n    console.log('转换为完整URL:', fullUrl);\n  }\n\n  // 添加时间戳参数，避免缓存问题\n  const timestamp = new Date().getTime();\n  fullUrl = fullUrl.includes('?') ? `${fullUrl}&_t=${timestamp}` : `${fullUrl}?_t=${timestamp}`;\n  console.log('添加时间戳后的URL:', fullUrl);\n  return new Promise((resolve, reject) => {\n    // 尝试直接使用fetch API获取图片，可以更好地处理跨域问题\n    console.log('使用fetch API获取图片:', fullUrl);\n    fetch(fullUrl).then(response => {\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\n      }\n      return response.blob();\n    }).then(blob => {\n      console.log('图片获取成功，大小:', blob.size, '字节');\n      console.log('图片类型:', blob.type);\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64data = reader.result;\n        console.log('图片转换为Base64成功，长度:', base64data.length);\n        resolve(base64data);\n      };\n      reader.onerror = error => {\n        console.error('图片转换为Base64失败:', error);\n        reject(error);\n      };\n      reader.readAsDataURL(blob);\n    }).catch(error => {\n      console.error('获取图片失败，尝试使用Image对象:', error);\n\n      // 如果fetch失败，回退到使用Image对象\n      const img = new Image();\n      img.crossOrigin = 'anonymous'; // 尝试解决跨域问题\n\n      img.onload = () => {\n        try {\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          console.log('图片尺寸:', img.width, 'x', img.height);\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n\n          // 尝试不同的格式\n          let base64data;\n          try {\n            base64data = canvas.toDataURL('image/jpeg', 0.8);\n            console.log('JPEG格式转换成功');\n          } catch (jpegError) {\n            console.error('JPEG格式转换失败，尝试PNG:', jpegError);\n            try {\n              base64data = canvas.toDataURL('image/png');\n              console.log('PNG格式转换成功');\n            } catch (pngError) {\n              console.error('PNG格式也转换失败:', pngError);\n              throw pngError;\n            }\n          }\n          console.log('图片转换为Base64成功，长度:', base64data.length);\n          resolve(base64data);\n        } catch (canvasError) {\n          console.error('Canvas处理图片失败:', canvasError);\n          reject(canvasError);\n        }\n      };\n      img.onerror = imgError => {\n        console.error('图片加载失败:', imgError);\n        console.error('URL:', fullUrl);\n        reject(new Error(`Failed to load image: ${imgError}`));\n      };\n\n      // 设置超时\n      const timeout = setTimeout(() => {\n        console.error('图片加载超时');\n        img.src = ''; // 取消加载\n        reject(new Error('Image loading timeout'));\n      }, 10000); // 10秒超时\n\n      img.onload = () => {\n        clearTimeout(timeout);\n        try {\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          console.log('图片尺寸:', img.width, 'x', img.height);\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n\n          // 尝试不同的格式\n          let base64data;\n          try {\n            base64data = canvas.toDataURL('image/jpeg', 0.8);\n            console.log('JPEG格式转换成功');\n          } catch (jpegError) {\n            console.error('JPEG格式转换失败，尝试PNG:', jpegError);\n            try {\n              base64data = canvas.toDataURL('image/png');\n              console.log('PNG格式转换成功');\n            } catch (pngError) {\n              console.error('PNG格式也转换失败:', pngError);\n              throw pngError;\n            }\n          }\n          console.log('图片转换为Base64成功，长度:', base64data.length);\n          resolve(base64data);\n        } catch (canvasError) {\n          console.error('Canvas处理图片失败:', canvasError);\n          reject(canvasError);\n        }\n      };\n\n      // 设置图片源\n      img.src = fullUrl;\n    });\n  });\n};\n\n/**\r\n * 将数据导出为Excel文件，包含图片（使用XLSX库）\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\n  console.log('=== exportToExcelWithImages 函数被调用 ===');\n  console.log('数据条数:', data.length);\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('使用XLSX导出Excel，开始处理图片...');\n    console.log('数据条数:', data.length);\n    console.log('第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n    console.log('导出文件名:', fullFileName);\n\n    // 预处理图片，确保所有图片都加载完成\n    const processedData = [];\n\n    // 逐行处理数据\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n      console.log(`处理第 ${rowIndex + 1}/${data.length} 条记录...`);\n      const row = data[rowIndex];\n      const record = row['__original'] || {};\n      console.log(`记录ID: ${record.id || 'unknown'}`);\n\n      // 处理清理前照片\n      let beforePhotoData = null;\n      if (record.photo_path_before) {\n        console.log(`记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\n        const photoPaths = parsePhotoPath(record.photo_path_before);\n        console.log(`解析后的照片路径:`, photoPaths);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`选择第一张照片:`, firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n            }\n            console.log(`记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\n            try {\n              console.log(`开始转换清理前照片...`);\n              beforePhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\n            } catch (error) {\n              console.error(`记录 ${rowIndex} 清理前照片转换失败:`, error);\n              console.error('错误详情:', error.message);\n            }\n          } else {\n            console.error(`记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\n          }\n        } else {\n          console.log(`记录 ${rowIndex} 没有有效的清理前照片路径`);\n        }\n      } else {\n        console.log(`记录 ${rowIndex} 没有清理前照片`);\n      }\n\n      // 处理清理后照片\n      let afterPhotoData = null;\n      if (record.photo_path_after) {\n        console.log(`记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\n        const photoPaths = parsePhotoPath(record.photo_path_after);\n        console.log(`解析后的照片路径:`, photoPaths);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`选择第一张照片:`, firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n            }\n            console.log(`记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\n            try {\n              console.log(`开始转换清理后照片...`);\n              afterPhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\n            } catch (error) {\n              console.error(`记录 ${rowIndex} 清理后照片转换失败:`, error);\n              console.error('错误详情:', error.message);\n            }\n          } else {\n            console.error(`记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\n          }\n        } else {\n          console.log(`记录 ${rowIndex} 没有有效的清理后照片路径`);\n        }\n      } else {\n        console.log(`记录 ${rowIndex} 没有清理后照片`);\n      }\n\n      // 保存处理后的数据\n      processedData.push({\n        ...row,\n        __beforePhotoData: beforePhotoData,\n        __afterPhotoData: afterPhotoData\n      });\n      console.log(`记录 ${rowIndex} 处理完成`);\n    }\n    console.log('所有图片处理完成，开始创建Excel...');\n    console.log('处理后的数据条数:', processedData.length);\n\n    // 检查是否有任何图片数据\n    let hasImageData = false;\n    for (const row of processedData) {\n      if (row.__beforePhotoData || row.__afterPhotoData) {\n        hasImageData = true;\n        console.log('找到图片数据，将使用图片导出模式');\n        break;\n      }\n    }\n    if (!hasImageData) {\n      console.warn('没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\n    }\n\n    // 准备导出数据\n    const exportRows = [];\n\n    // 提取表头\n    const headerRow = {};\n    headers.forEach(header => {\n      headerRow[header.text] = header.text;\n    });\n    exportRows.push(headerRow);\n\n    // 处理数据行\n    processedData.forEach(row => {\n      const exportRow = {};\n      headers.forEach(header => {\n        // 对于普通文本字段，直接添加\n        if (!header.isImage) {\n          exportRow[header.text] = row[header.field] || '';\n        }\n        // 图片字段只能在导出为带图片的Excel时处理\n        // 这里只能导出图片链接文本\n        else {\n          exportRow[header.text] = row[header.field] || '';\n        }\n      });\n      exportRows.push(exportRow);\n    });\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n\n    // 创建工作表 - 将准备好的数据行转换为工作表\n    const ws = XLSX.utils.json_to_sheet(exportRows, {\n      skipHeader: true\n    });\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n\n    // 导出Excel文件\n    const excelFileName = `${fullFileName}.xlsx`;\n\n    // 生成Excel数据\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败:', error);\n    console.error('错误详情:', error.message);\n    console.error('错误堆栈:', error.stack);\n\n    // 尝试使用普通的Excel导出（不包含图片）\n    console.log('尝试使用普通Excel导出（不包含图片）...');\n    try {\n      return exportToExcel(data, fileName, headers);\n    } catch (fallbackError) {\n      console.error('普通Excel导出也失败:', fallbackError);\n      return false;\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcel = (data, fileName, headers) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n\n  // 使用XLSX导出Excel\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    const exportRows = data.map(row => {\n      const exportRow = {};\n      headers.forEach(header => {\n        exportRow[header.text] = row[header.field] || '';\n      });\n      return exportRow;\n    });\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(exportRows);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\n      }\n    });\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","console","log","version","Object","keys","join","parsePhotoPath","path","Array","isArray","startsWith","endsWith","parsed","JSON","parse","error","message","imageUrlToBase64","url","Promise","reject","Error","fullUrl","window","location","origin","timestamp","Date","getTime","includes","resolve","fetch","then","response","ok","status","statusText","blob","size","type","reader","FileReader","onload","base64data","result","length","onerror","readAsDataURL","catch","img","Image","crossOrigin","canvas","document","createElement","width","height","ctx","getContext","drawImage","toDataURL","jpegError","pngError","canvasError","imgError","timeout","setTimeout","src","clearTimeout","exportToExcelWithImages","data","fileName","headers","stringify","substring","replace","toISOString","fullFileName","processedData","rowIndex","row","record","id","beforePhotoData","photo_path_before","photoPaths","firstPath","imageUrl","afterPhotoData","photo_path_after","push","__beforePhotoData","__afterPhotoData","hasImageData","warn","exportRows","headerRow","forEach","header","text","exportRow","isImage","field","wb","utils","book_new","ws","json_to_sheet","skipHeader","colWidths","map","wch","book_append_sheet","excelFileName","wbout","write","bookType","Blob","URL","createObjectURL","link","href","download","body","appendChild","click","removeChild","revokeObjectURL","stack","exportToExcel","fallbackError","a","exportToCSV","csvFileName","csvContent","h","title","item","value","undefined","cellValue","String","setAttribute","style","visibility","prepareImageExportData","records","baseUrl","imageData","index","beforeImages","afterImages","beforePaths","e","pathStr","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\n// import Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n// 解析照片路径\r\nconst parsePhotoPath = (path) => {\r\n  console.log('解析照片路径:', path);\r\n  \r\n  if (!path) {\r\n    console.log('照片路径为空');\r\n    return [];\r\n  }\r\n  \r\n  // 如果path已经是数组，直接返回\r\n  if (Array.isArray(path)) {\r\n    console.log('照片路径已经是数组:', path);\r\n    return path;\r\n  }\r\n  \r\n  try {\r\n    // 尝试解析为JSON\r\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\r\n      console.log('尝试将照片路径解析为JSON');\r\n      const parsed = JSON.parse(path);\r\n      console.log('JSON解析结果:', parsed);\r\n      \r\n      if (Array.isArray(parsed)) {\r\n        return parsed;\r\n      } else {\r\n        console.error('JSON解析结果不是数组:', parsed);\r\n        return [path]; // 如果解析结果不是数组，则将原始路径作为单个元素返回\r\n      }\r\n    }\r\n    \r\n    // 如果不是JSON格式，则将其作为单个路径返回\r\n    console.log('照片路径不是JSON格式，作为单个路径返回');\r\n    return [path];\r\n  } catch (error) {\r\n    console.error('解析照片路径失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    // 如果解析失败，则将原始路径作为单个元素返回\r\n    return [path];\r\n  }\r\n};\r\n\r\n// 将图片URL转换为Base64\r\nconst imageUrlToBase64 = (url) => {\r\n  console.log('开始转换图片URL到Base64:', url);\r\n  \r\n  // 检查URL是否有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('无效的图片URL:', url);\r\n    return Promise.reject(new Error('Invalid image URL'));\r\n  }\r\n  \r\n  // 检查URL是否为相对路径，如果是，添加origin\r\n  let fullUrl = url;\r\n  if (url.startsWith('/')) {\r\n    fullUrl = window.location.origin + url;\r\n    console.log('转换为完整URL:', fullUrl);\r\n  }\r\n  \r\n  // 添加时间戳参数，避免缓存问题\r\n  const timestamp = new Date().getTime();\r\n  fullUrl = fullUrl.includes('?') \r\n    ? `${fullUrl}&_t=${timestamp}` \r\n    : `${fullUrl}?_t=${timestamp}`;\r\n  console.log('添加时间戳后的URL:', fullUrl);\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    // 尝试直接使用fetch API获取图片，可以更好地处理跨域问题\r\n    console.log('使用fetch API获取图片:', fullUrl);\r\n    \r\n    fetch(fullUrl)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\r\n        }\r\n        return response.blob();\r\n      })\r\n      .then(blob => {\r\n        console.log('图片获取成功，大小:', blob.size, '字节');\r\n        console.log('图片类型:', blob.type);\r\n        \r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          const base64data = reader.result;\r\n          console.log('图片转换为Base64成功，长度:', base64data.length);\r\n          resolve(base64data);\r\n        };\r\n        reader.onerror = (error) => {\r\n          console.error('图片转换为Base64失败:', error);\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(blob);\r\n      })\r\n      .catch(error => {\r\n        console.error('获取图片失败，尝试使用Image对象:', error);\r\n        \r\n        // 如果fetch失败，回退到使用Image对象\r\n        const img = new Image();\r\n        img.crossOrigin = 'anonymous'; // 尝试解决跨域问题\r\n        \r\n        img.onload = () => {\r\n          try {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            \r\n            console.log('图片尺寸:', img.width, 'x', img.height);\r\n            \r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0);\r\n            \r\n            // 尝试不同的格式\r\n            let base64data;\r\n            try {\r\n              base64data = canvas.toDataURL('image/jpeg', 0.8);\r\n              console.log('JPEG格式转换成功');\r\n            } catch (jpegError) {\r\n              console.error('JPEG格式转换失败，尝试PNG:', jpegError);\r\n              try {\r\n                base64data = canvas.toDataURL('image/png');\r\n                console.log('PNG格式转换成功');\r\n              } catch (pngError) {\r\n                console.error('PNG格式也转换失败:', pngError);\r\n                throw pngError;\r\n              }\r\n            }\r\n            \r\n            console.log('图片转换为Base64成功，长度:', base64data.length);\r\n            resolve(base64data);\r\n          } catch (canvasError) {\r\n            console.error('Canvas处理图片失败:', canvasError);\r\n            reject(canvasError);\r\n          }\r\n        };\r\n        \r\n        img.onerror = (imgError) => {\r\n          console.error('图片加载失败:', imgError);\r\n          console.error('URL:', fullUrl);\r\n          reject(new Error(`Failed to load image: ${imgError}`));\r\n        };\r\n        \r\n        // 设置超时\r\n        const timeout = setTimeout(() => {\r\n          console.error('图片加载超时');\r\n          img.src = ''; // 取消加载\r\n          reject(new Error('Image loading timeout'));\r\n        }, 10000); // 10秒超时\r\n        \r\n        img.onload = () => {\r\n          clearTimeout(timeout);\r\n          try {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            \r\n            console.log('图片尺寸:', img.width, 'x', img.height);\r\n            \r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0);\r\n            \r\n            // 尝试不同的格式\r\n            let base64data;\r\n            try {\r\n              base64data = canvas.toDataURL('image/jpeg', 0.8);\r\n              console.log('JPEG格式转换成功');\r\n            } catch (jpegError) {\r\n              console.error('JPEG格式转换失败，尝试PNG:', jpegError);\r\n              try {\r\n                base64data = canvas.toDataURL('image/png');\r\n                console.log('PNG格式转换成功');\r\n              } catch (pngError) {\r\n                console.error('PNG格式也转换失败:', pngError);\r\n                throw pngError;\r\n              }\r\n            }\r\n            \r\n            console.log('图片转换为Base64成功，长度:', base64data.length);\r\n            resolve(base64data);\r\n          } catch (canvasError) {\r\n            console.error('Canvas处理图片失败:', canvasError);\r\n            reject(canvasError);\r\n          }\r\n        };\r\n        \r\n        // 设置图片源\r\n        img.src = fullUrl;\r\n      });\r\n  });\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件，包含图片（使用XLSX库）\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\r\n  console.log('=== exportToExcelWithImages 函数被调用 ===');\r\n  console.log('数据条数:', data.length);\r\n  \r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('使用XLSX导出Excel，开始处理图片...');\r\n    console.log('数据条数:', data.length);\r\n    console.log('第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    console.log('导出文件名:', fullFileName);\r\n    \r\n    // 预处理图片，确保所有图片都加载完成\r\n    const processedData = [];\r\n    \r\n    // 逐行处理数据\r\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n      console.log(`处理第 ${rowIndex + 1}/${data.length} 条记录...`);\r\n      const row = data[rowIndex];\r\n      const record = row['__original'] || {};\r\n      console.log(`记录ID: ${record.id || 'unknown'}`);\r\n      \r\n      // 处理清理前照片\r\n      let beforePhotoData = null;\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\r\n        const photoPaths = parsePhotoPath(record.photo_path_before);\r\n        console.log(`解析后的照片路径:`, photoPaths);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`选择第一张照片:`, firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n            }\r\n            \r\n            console.log(`记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`开始转换清理前照片...`);\r\n              beforePhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\r\n            } catch (error) {\r\n              console.error(`记录 ${rowIndex} 清理前照片转换失败:`, error);\r\n              console.error('错误详情:', error.message);\r\n            }\r\n          } else {\r\n            console.error(`记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          console.log(`记录 ${rowIndex} 没有有效的清理前照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`记录 ${rowIndex} 没有清理前照片`);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      let afterPhotoData = null;\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\r\n        const photoPaths = parsePhotoPath(record.photo_path_after); \r\n        console.log(`解析后的照片路径:`, photoPaths);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`选择第一张照片:`, firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n            }\r\n            \r\n            console.log(`记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`开始转换清理后照片...`);\r\n              afterPhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\r\n            } catch (error) {\r\n              console.error(`记录 ${rowIndex} 清理后照片转换失败:`, error);\r\n              console.error('错误详情:', error.message);\r\n            }\r\n          } else {\r\n            console.error(`记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          console.log(`记录 ${rowIndex} 没有有效的清理后照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`记录 ${rowIndex} 没有清理后照片`);\r\n      }\r\n      \r\n      // 保存处理后的数据\r\n      processedData.push({\r\n        ...row,\r\n        __beforePhotoData: beforePhotoData,\r\n        __afterPhotoData: afterPhotoData\r\n      });\r\n      console.log(`记录 ${rowIndex} 处理完成`);\r\n    }\r\n    \r\n    console.log('所有图片处理完成，开始创建Excel...');\r\n    console.log('处理后的数据条数:', processedData.length);\r\n    \r\n    // 检查是否有任何图片数据\r\n    let hasImageData = false;\r\n    for (const row of processedData) {\r\n      if (row.__beforePhotoData || row.__afterPhotoData) {\r\n        hasImageData = true;\r\n        console.log('找到图片数据，将使用图片导出模式');\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!hasImageData) {\r\n      console.warn('没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\r\n    }\r\n    \r\n    // 准备导出数据\r\n    const exportRows = [];\r\n    \r\n    // 提取表头\r\n    const headerRow = {};\r\n    headers.forEach(header => {\r\n      headerRow[header.text] = header.text;\r\n    });\r\n    exportRows.push(headerRow);\r\n    \r\n    // 处理数据行\r\n    processedData.forEach(row => {\r\n      const exportRow = {};\r\n      headers.forEach(header => {\r\n        // 对于普通文本字段，直接添加\r\n        if (!header.isImage) {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        }\r\n        // 图片字段只能在导出为带图片的Excel时处理\r\n        // 这里只能导出图片链接文本\r\n        else {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        }\r\n      });\r\n      exportRows.push(exportRow);\r\n    });\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    \r\n    // 创建工作表 - 将准备好的数据行转换为工作表\r\n    const ws = XLSX.utils.json_to_sheet(exportRows, { skipHeader: true });\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fullFileName}.xlsx`;\r\n    \r\n    // 生成Excel数据\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n    \r\n  } catch (error) {\r\n    console.error('导出Excel失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    console.error('错误堆栈:', error.stack);\r\n    \r\n    // 尝试使用普通的Excel导出（不包含图片）\r\n    console.log('尝试使用普通Excel导出（不包含图片）...');\r\n    try {\r\n      return exportToExcel(data, fileName, headers);\r\n    } catch (fallbackError) {\r\n      console.error('普通Excel导出也失败:', fallbackError);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcel = (data, fileName, headers) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  \r\n  // 使用XLSX导出Excel\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    const exportRows = data.map(row => {\r\n      const exportRow = {};\r\n      headers.forEach(header => {\r\n        exportRow[header.text] = row[header.field] || '';\r\n      });\r\n      return exportRow;\r\n    });\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(exportRows);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\r\n        \r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\r\n        \r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\r\n      }\r\n    });\r\n    \r\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}