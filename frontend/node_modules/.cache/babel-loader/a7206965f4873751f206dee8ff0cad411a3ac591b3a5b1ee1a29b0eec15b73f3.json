{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\n// import { saveAs } from 'file-saver';\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    return;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n\n  // 如果有图片数据，使用XLSX导出\n  if (imageData) {\n    try {\n      console.log('正在导出带图片的Excel...');\n      console.log('图片数据:', Object.keys(imageData).length);\n\n      // 创建工作簿\n      const wb = XLSX.utils.book_new();\n\n      // 准备数据（添加图片链接列）\n      const enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n\n      // 创建工作表\n      const ws = XLSX.utils.json_to_sheet(enhancedData, {\n        header: headers.map(h => h.field)\n      });\n\n      // 设置列宽\n      const colWidths = headers.map(() => ({\n        wch: 20\n      }));\n      ws['!cols'] = colWidths;\n\n      // 添加工作表到工作簿\n      XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n\n      // 导出Excel文件\n      const excelFileName = `${fileName}_${timestamp}.xlsx`;\n\n      // 使用writeFile导出（仅在浏览器环境中有效）\n      try {\n        XLSX.writeFile(wb, excelFileName);\n        console.log('Excel导出成功');\n        return true;\n      } catch (e) {\n        console.warn('使用writeFile导出失败，尝试使用替代方法:', e);\n\n        // 替代方法：手动创建下载链接\n        const wbout = XLSX.write(wb, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        const blob = new Blob([wbout], {\n          type: 'application/octet-stream'\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = excelFileName;\n        link.click();\n        URL.revokeObjectURL(url);\n        console.log('Excel导出成功（替代方法）');\n        return true;\n      }\n    } catch (error) {\n      console.error('导出带图片的Excel失败:', error);\n      // 如果带图片导出失败，回退到CSV导出\n      exportToCSV(data, fileName, headers);\n      return false;\n    }\n  } else {\n    // 使用CSV导出\n    exportToCSV(data, fileName, headers);\n    return true;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nconst exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\nconst imageUrlToBase64 = async url => {\n  try {\n    // 创建一个新的图片元素\n    const img = new Image();\n    img.crossOrigin = 'Anonymous'; // 允许跨域\n\n    // 等待图片加载\n    await new Promise((resolve, reject) => {\n      img.onload = resolve;\n      img.onerror = reject;\n      img.src = url;\n    });\n\n    // 创建canvas并绘制图片\n    const canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n\n    // 转换为base64\n    return canvas.toDataURL('image/jpeg');\n  } catch (error) {\n    console.error('转换图片到Base64失败:', error);\n    return null;\n  }\n};\n\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @param {Function} parsePhotoPath 解析照片路径的函数\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\n  console.log('准备导出数据，记录数量:', records.length);\n\n  // 准备导出数据\n  const dataToExport = [];\n  const imageData = {};\n\n  // 处理每条记录\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n\n    // 基本数据\n    const exportItem = {\n      '单位': record.unit_name || '',\n      '废物类型': record.waste_type_name || '',\n      '收集地点': record.location || '',\n      '收集时间': record.collection_start_time ? new Date(record.collection_start_time).toLocaleString() : '',\n      '数量(kg)': record.quantity || 0,\n      '记录时间': record.created_at ? new Date(record.created_at).toLocaleString() : '',\n      '汇报人': record.creator_name || '未知',\n      '清理前照片': '',\n      '清理后照片': ''\n    };\n    dataToExport.push(exportItem);\n\n    // 处理清理前照片\n    try {\n      const beforePhotos = parsePhotoPath(record.photo_path_before);\n      if (beforePhotos && beforePhotos.length > 0) {\n        const photoUrl = beforePhotos[0].startsWith('http') ? beforePhotos[0] : `${baseUrl}${beforePhotos[0]}`;\n        console.log(`记录${i + 1}清理前照片URL:`, photoUrl);\n        if (!imageData[i]) imageData[i] = {};\n        imageData[i][7] = {\n          url: photoUrl,\n          width: 150,\n          height: 100\n        };\n\n        // 尝试转换为base64（可选）\n        try {\n          const base64Data = await imageUrlToBase64(photoUrl);\n          if (base64Data) {\n            imageData[i][7].base64 = base64Data;\n          }\n        } catch (e) {\n          console.warn('转换清理前照片到base64失败:', e);\n        }\n      }\n    } catch (error) {\n      console.error('处理清理前照片失败:', error);\n    }\n\n    // 处理清理后照片\n    try {\n      const afterPhotos = parsePhotoPath(record.photo_path_after);\n      if (afterPhotos && afterPhotos.length > 0) {\n        const photoUrl = afterPhotos[0].startsWith('http') ? afterPhotos[0] : `${baseUrl}${afterPhotos[0]}`;\n        console.log(`记录${i + 1}清理后照片URL:`, photoUrl);\n        if (!imageData[i]) imageData[i] = {};\n        imageData[i][8] = {\n          url: photoUrl,\n          width: 150,\n          height: 100\n        };\n\n        // 尝试转换为base64（可选）\n        try {\n          const base64Data = await imageUrlToBase64(photoUrl);\n          if (base64Data) {\n            imageData[i][8].base64 = base64Data;\n          }\n        } catch (e) {\n          console.warn('转换清理后照片到base64失败:', e);\n        }\n      }\n    } catch (error) {\n      console.error('处理清理后照片失败:', error);\n    }\n  }\n  console.log('导出数据准备完成，数据条数:', dataToExport.length);\n  console.log('图片数据条数:', Object.keys(imageData).length);\n  return {\n    dataToExport,\n    imageData\n  };\n};","map":{"version":3,"names":["XLSX","exportToExcel","data","fileName","headers","imageData","length","replace","timestamp","Date","toISOString","substring","console","log","Object","keys","wb","utils","book_new","enhancedData","map","row","index","newRow","url","ws","json_to_sheet","header","h","field","colWidths","wch","book_append_sheet","excelFileName","writeFile","e","warn","wbout","write","bookType","type","blob","Blob","URL","createObjectURL","link","document","createElement","href","download","click","revokeObjectURL","error","exportToCSV","csvFileName","csvContent","headerRow","title","join","forEach","item","value","undefined","cellValue","String","includes","setAttribute","style","visibility","body","appendChild","removeChild","imageUrlToBase64","img","Image","crossOrigin","Promise","resolve","reject","onload","onerror","src","canvas","width","height","ctx","getContext","drawImage","toDataURL","prepareImageExportData","records","baseUrl","parsePhotoPath","dataToExport","i","record","exportItem","unit_name","waste_type_name","location","collection_start_time","toLocaleString","quantity","created_at","creator_name","push","beforePhotos","photo_path_before","photoUrl","startsWith","base64Data","base64","afterPhotos","photo_path_after"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\n// import { saveAs } from 'file-saver';\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  // 如果有图片数据，使用XLSX导出\r\n  if (imageData) {\r\n    try {\r\n      console.log('正在导出带图片的Excel...');\r\n      console.log('图片数据:', Object.keys(imageData).length);\r\n      \r\n      // 创建工作簿\r\n      const wb = XLSX.utils.book_new();\r\n      \r\n      // 准备数据（添加图片链接列）\r\n      const enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n      \r\n      // 创建工作表\r\n      const ws = XLSX.utils.json_to_sheet(enhancedData, {\r\n        header: headers.map(h => h.field)\r\n      });\r\n      \r\n      // 设置列宽\r\n      const colWidths = headers.map(() => ({ wch: 20 }));\r\n      ws['!cols'] = colWidths;\r\n      \r\n      // 添加工作表到工作簿\r\n      XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n      \r\n      // 导出Excel文件\r\n      const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n      \r\n      // 使用writeFile导出（仅在浏览器环境中有效）\r\n      try {\r\n        XLSX.writeFile(wb, excelFileName);\r\n        console.log('Excel导出成功');\r\n        return true;\r\n      } catch (e) {\r\n        console.warn('使用writeFile导出失败，尝试使用替代方法:', e);\r\n        \r\n        // 替代方法：手动创建下载链接\r\n        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = excelFileName;\r\n        link.click();\r\n        URL.revokeObjectURL(url);\r\n        \r\n        console.log('Excel导出成功（替代方法）');\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('导出带图片的Excel失败:', error);\r\n      // 如果带图片导出失败，回退到CSV导出\r\n      exportToCSV(data, fileName, headers);\r\n      return false;\r\n    }\r\n  } else {\r\n    // 使用CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return true;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nconst exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\r\nconst imageUrlToBase64 = async (url) => {\r\n  try {\r\n    // 创建一个新的图片元素\r\n    const img = new Image();\r\n    img.crossOrigin = 'Anonymous'; // 允许跨域\r\n    \r\n    // 等待图片加载\r\n    await new Promise((resolve, reject) => {\r\n      img.onload = resolve;\r\n      img.onerror = reject;\r\n      img.src = url;\r\n    });\r\n    \r\n    // 创建canvas并绘制图片\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.drawImage(img, 0, 0);\r\n    \r\n    // 转换为base64\r\n    return canvas.toDataURL('image/jpeg');\r\n  } catch (error) {\r\n    console.error('转换图片到Base64失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @param {Function} parsePhotoPath 解析照片路径的函数\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\r\n  console.log('准备导出数据，记录数量:', records.length);\r\n  \r\n  // 准备导出数据\r\n  const dataToExport = [];\r\n  const imageData = {};\r\n  \r\n  // 处理每条记录\r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    \r\n    // 基本数据\r\n    const exportItem = {\r\n      '单位': record.unit_name || '',\r\n      '废物类型': record.waste_type_name || '',\r\n      '收集地点': record.location || '',\r\n      '收集时间': record.collection_start_time ? new Date(record.collection_start_time).toLocaleString() : '',\r\n      '数量(kg)': record.quantity || 0,\r\n      '记录时间': record.created_at ? new Date(record.created_at).toLocaleString() : '',\r\n      '汇报人': record.creator_name || '未知',\r\n      '清理前照片': '',\r\n      '清理后照片': ''\r\n    };\r\n    \r\n    dataToExport.push(exportItem);\r\n    \r\n    // 处理清理前照片\r\n    try {\r\n      const beforePhotos = parsePhotoPath(record.photo_path_before);\r\n      if (beforePhotos && beforePhotos.length > 0) {\r\n        const photoUrl = beforePhotos[0].startsWith('http') \r\n          ? beforePhotos[0] \r\n          : `${baseUrl}${beforePhotos[0]}`;\r\n        \r\n        console.log(`记录${i+1}清理前照片URL:`, photoUrl);\r\n        \r\n        if (!imageData[i]) imageData[i] = {};\r\n        imageData[i][7] = { \r\n          url: photoUrl,\r\n          width: 150, \r\n          height: 100 \r\n        };\r\n        \r\n        // 尝试转换为base64（可选）\r\n        try {\r\n          const base64Data = await imageUrlToBase64(photoUrl);\r\n          if (base64Data) {\r\n            imageData[i][7].base64 = base64Data;\r\n          }\r\n        } catch (e) {\r\n          console.warn('转换清理前照片到base64失败:', e);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('处理清理前照片失败:', error);\r\n    }\r\n    \r\n    // 处理清理后照片\r\n    try {\r\n      const afterPhotos = parsePhotoPath(record.photo_path_after);\r\n      if (afterPhotos && afterPhotos.length > 0) {\r\n        const photoUrl = afterPhotos[0].startsWith('http') \r\n          ? afterPhotos[0] \r\n          : `${baseUrl}${afterPhotos[0]}`;\r\n        \r\n        console.log(`记录${i+1}清理后照片URL:`, photoUrl);\r\n        \r\n        if (!imageData[i]) imageData[i] = {};\r\n        imageData[i][8] = { \r\n          url: photoUrl,\r\n          width: 150, \r\n          height: 100 \r\n        };\r\n        \r\n        // 尝试转换为base64（可选）\r\n        try {\r\n          const base64Data = await imageUrlToBase64(photoUrl);\r\n          if (base64Data) {\r\n            imageData[i][8].base64 = base64Data;\r\n          }\r\n        } catch (e) {\r\n          console.warn('转换清理后照片到base64失败:', e);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('处理清理后照片失败:', error);\r\n    }\r\n  }\r\n  \r\n  console.log('导出数据准备完成，数据条数:', dataToExport.length);\r\n  console.log('图片数据条数:', Object.keys(imageData).length);\r\n  \r\n  return { dataToExport, imageData };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}