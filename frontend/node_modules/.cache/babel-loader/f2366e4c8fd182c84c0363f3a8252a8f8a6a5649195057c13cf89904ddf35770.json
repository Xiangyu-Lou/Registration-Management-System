{"ast":null,"code":"import { reactive } from 'vue';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\n\n// 初始化状态\nconst defaultState = {\n  user: null,\n  token: null,\n  isLoggedIn: false,\n  loading: false,\n  error: null\n};\n\n// 创建响应式状态\nconst state = reactive({\n  ...defaultState\n});\n\n// 从localStorage获取已保存的用户信息和token\nconst init = () => {\n  const savedUser = localStorage.getItem('user');\n  const savedToken = localStorage.getItem('token');\n  if (savedUser && savedToken) {\n    try {\n      const user = JSON.parse(savedUser);\n      state.user = user;\n      state.token = savedToken;\n      state.isLoggedIn = true;\n      // 设置 token 到 httpService\n      if (httpService.defaults && httpService.defaults.headers) {\n        httpService.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n      }\n    } catch (e) {\n      console.error('Error parsing saved user data:', e);\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n    }\n  }\n};\n\n// 登录方法\nconst login = async (phone, password, rememberMe = false, userType = 1) => {\n  // 设置加载状态\n  state.loading = true;\n  state.error = null;\n  console.log('auth.login 开始执行，手机号:', phone, '用户类型:', userType);\n  try {\n    // 构建登录请求数据\n    const postData = {\n      phone,\n      rememberMe,\n      userType // 添加用户类型\n    };\n\n    // 只有在密码存在且非空时才添加到请求中\n    if (password !== null && password !== undefined && password !== '') {\n      postData.password = password;\n      console.log('auth.login 发送密码参数');\n    } else {\n      console.log('auth.login 不发送密码参数');\n    }\n    console.log('发送登录请求，数据:', postData);\n    const response = await httpService.post(apiConfig.endpoints.login, postData);\n    console.log('登录请求成功响应:', response.data);\n    const {\n      token,\n      ...user\n    } = response.data;\n    state.user = user;\n    state.token = token;\n    state.isLoggedIn = true;\n\n    // 设置 token 到 httpService\n    if (httpService.defaults && httpService.defaults.headers) {\n      httpService.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n\n    // 如果选择记住登录，保存到localStorage\n    if (rememberMe) {\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } else {\n      // 否则只保存在 sessionStorage 中\n      sessionStorage.setItem('user', JSON.stringify(user));\n      sessionStorage.setItem('token', token);\n    }\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    // 只设置错误状态，不显示错误消息\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\n    console.error('Login error:', error);\n    return {\n      success: false,\n      error: state.error\n    };\n  } finally {\n    state.loading = false;\n  }\n};\n\n// 注销方法\nconst logout = () => {\n  state.user = null;\n  state.token = null;\n  state.isLoggedIn = false;\n  if (httpService.defaults && httpService.defaults.headers) {\n    delete httpService.defaults.headers.common['Authorization'];\n  }\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n  sessionStorage.removeItem('token');\n};\n\n// 判断是否为超级管理员\nconst isAdmin = () => {\n  return state.isLoggedIn && state.user && state.user.role_id === 3;\n};\n\n// 判断是否为单位管理员\nconst isUnitAdmin = () => {\n  return state.isLoggedIn && state.user && state.user.role_id === 2;\n};\n\n// 获取当前用户ID\nconst getUserId = () => {\n  return state.user ? state.user.id : null;\n};\n\n// 获取当前用户单位ID\nconst getUnitId = () => {\n  return state.user ? state.user.unit_id : null;\n};\n\n// 初始化认证状态\ninit();\nexport default {\n  state,\n  login,\n  logout,\n  isAdmin,\n  isUnitAdmin,\n  getUserId,\n  getUnitId\n};","map":{"version":3,"names":["reactive","httpService","apiConfig","defaultState","user","token","isLoggedIn","loading","error","state","init","savedUser","localStorage","getItem","savedToken","JSON","parse","defaults","headers","common","e","console","removeItem","login","phone","password","rememberMe","userType","log","postData","undefined","response","post","endpoints","data","setItem","stringify","sessionStorage","success","logout","isAdmin","role_id","isUnitAdmin","getUserId","id","getUnitId","unit_id"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/store/auth.js"],"sourcesContent":["import { reactive } from 'vue';\r\nimport httpService from '../config/httpService';\r\nimport apiConfig from '../config/api';\r\n\r\n// 初始化状态\r\nconst defaultState = {\r\n  user: null,\r\n  token: null,\r\n  isLoggedIn: false,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// 创建响应式状态\r\nconst state = reactive({\r\n  ...defaultState\r\n});\r\n\r\n// 从localStorage获取已保存的用户信息和token\r\nconst init = () => {\r\n  const savedUser = localStorage.getItem('user');\r\n  const savedToken = localStorage.getItem('token');\r\n  if (savedUser && savedToken) {\r\n    try {\r\n      const user = JSON.parse(savedUser);\r\n      state.user = user;\r\n      state.token = savedToken;\r\n      state.isLoggedIn = true;\r\n      // 设置 token 到 httpService\r\n      if (httpService.defaults && httpService.defaults.headers) {\r\n        httpService.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error parsing saved user data:', e);\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n    }\r\n  }\r\n};\r\n\r\n// 登录方法\r\nconst login = async (phone, password, rememberMe = false, userType = 1) => {\r\n  // 设置加载状态\r\n  state.loading = true;\r\n  state.error = null;\r\n  \r\n  console.log('auth.login 开始执行，手机号:', phone, '用户类型:', userType);\r\n\r\n  try {\r\n    // 构建登录请求数据\r\n    const postData = { \r\n      phone, \r\n      rememberMe,\r\n      userType // 添加用户类型\r\n    };\r\n    \r\n    // 只有在密码存在且非空时才添加到请求中\r\n    if (password !== null && password !== undefined && password !== '') {\r\n      postData.password = password;\r\n      console.log('auth.login 发送密码参数');\r\n    } else {\r\n      console.log('auth.login 不发送密码参数');\r\n    }\r\n    \r\n    console.log('发送登录请求，数据:', postData);\r\n    const response = await httpService.post(apiConfig.endpoints.login, postData);\r\n    console.log('登录请求成功响应:', response.data);\r\n\r\n    const { token, ...user } = response.data;\r\n    state.user = user;\r\n    state.token = token;\r\n    state.isLoggedIn = true;\r\n    \r\n    // 设置 token 到 httpService\r\n    if (httpService.defaults && httpService.defaults.headers) {\r\n      httpService.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    // 如果选择记住登录，保存到localStorage\r\n    if (rememberMe) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n    } else {\r\n      // 否则只保存在 sessionStorage 中\r\n      sessionStorage.setItem('user', JSON.stringify(user));\r\n      sessionStorage.setItem('token', token);\r\n    }\r\n    \r\n    return { success: true, user };\r\n  } catch (error) {\r\n    // 只设置错误状态，不显示错误消息\r\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\r\n    console.error('Login error:', error);\r\n    return { success: false, error: state.error };\r\n  } finally {\r\n    state.loading = false;\r\n  }\r\n};\r\n\r\n// 注销方法\r\nconst logout = () => {\r\n  state.user = null;\r\n  state.token = null;\r\n  state.isLoggedIn = false;\r\n  if (httpService.defaults && httpService.defaults.headers) {\r\n    delete httpService.defaults.headers.common['Authorization'];\r\n  }\r\n  localStorage.removeItem('user');\r\n  localStorage.removeItem('token');\r\n  sessionStorage.removeItem('user');\r\n  sessionStorage.removeItem('token');\r\n};\r\n\r\n// 判断是否为超级管理员\r\nconst isAdmin = () => {\r\n  return state.isLoggedIn && state.user && state.user.role_id === 3;\r\n};\r\n\r\n// 判断是否为单位管理员\r\nconst isUnitAdmin = () => {\r\n  return state.isLoggedIn && state.user && state.user.role_id === 2;\r\n};\r\n\r\n// 获取当前用户ID\r\nconst getUserId = () => {\r\n  return state.user ? state.user.id : null;\r\n};\r\n\r\n// 获取当前用户单位ID\r\nconst getUnitId = () => {\r\n  return state.user ? state.user.unit_id : null;\r\n};\r\n\r\n// 初始化认证状态\r\ninit();\r\n\r\nexport default {\r\n  state,\r\n  login,\r\n  logout,\r\n  isAdmin,\r\n  isUnitAdmin,\r\n  getUserId,\r\n  getUnitId\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,KAAK;AAC9B,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,SAAS,MAAM,eAAe;;AAErC;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,KAAK;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,KAAK,GAAGT,QAAQ,CAAC;EACrB,GAAGG;AACL,CAAC,CAAC;;AAEF;AACA,MAAMO,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC9C,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAChD,IAAIF,SAAS,IAAIG,UAAU,EAAE;IAC3B,IAAI;MACF,MAAMV,IAAI,GAAGW,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;MAClCF,KAAK,CAACL,IAAI,GAAGA,IAAI;MACjBK,KAAK,CAACJ,KAAK,GAAGS,UAAU;MACxBL,KAAK,CAACH,UAAU,GAAG,IAAI;MACvB;MACA,IAAIL,WAAW,CAACgB,QAAQ,IAAIhB,WAAW,CAACgB,QAAQ,CAACC,OAAO,EAAE;QACxDjB,WAAW,CAACgB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,UAAU,EAAE;MAC/E;IACF,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVC,OAAO,CAACb,KAAK,CAAC,gCAAgC,EAAEY,CAAC,CAAC;MAClDR,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;MAC/BV,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;IAClC;EACF;AACF,CAAC;;AAED;AACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,GAAG,KAAK,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACzE;EACAlB,KAAK,CAACF,OAAO,GAAG,IAAI;EACpBE,KAAK,CAACD,KAAK,GAAG,IAAI;EAElBa,OAAO,CAACO,GAAG,CAAC,sBAAsB,EAAEJ,KAAK,EAAE,OAAO,EAAEG,QAAQ,CAAC;EAE7D,IAAI;IACF;IACA,MAAME,QAAQ,GAAG;MACfL,KAAK;MACLE,UAAU;MACVC,QAAQ,CAAC;IACX,CAAC;;IAED;IACA,IAAIF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKK,SAAS,IAAIL,QAAQ,KAAK,EAAE,EAAE;MAClEI,QAAQ,CAACJ,QAAQ,GAAGA,QAAQ;MAC5BJ,OAAO,CAACO,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC,MAAM;MACLP,OAAO,CAACO,GAAG,CAAC,oBAAoB,CAAC;IACnC;IAEAP,OAAO,CAACO,GAAG,CAAC,YAAY,EAAEC,QAAQ,CAAC;IACnC,MAAME,QAAQ,GAAG,MAAM9B,WAAW,CAAC+B,IAAI,CAAC9B,SAAS,CAAC+B,SAAS,CAACV,KAAK,EAAEM,QAAQ,CAAC;IAC5ER,OAAO,CAACO,GAAG,CAAC,WAAW,EAAEG,QAAQ,CAACG,IAAI,CAAC;IAEvC,MAAM;MAAE7B,KAAK;MAAE,GAAGD;IAAK,CAAC,GAAG2B,QAAQ,CAACG,IAAI;IACxCzB,KAAK,CAACL,IAAI,GAAGA,IAAI;IACjBK,KAAK,CAACJ,KAAK,GAAGA,KAAK;IACnBI,KAAK,CAACH,UAAU,GAAG,IAAI;;IAEvB;IACA,IAAIL,WAAW,CAACgB,QAAQ,IAAIhB,WAAW,CAACgB,QAAQ,CAACC,OAAO,EAAE;MACxDjB,WAAW,CAACgB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUd,KAAK,EAAE;IAC1E;;IAEA;IACA,IAAIqB,UAAU,EAAE;MACdd,YAAY,CAACuB,OAAO,CAAC,MAAM,EAAEpB,IAAI,CAACqB,SAAS,CAAChC,IAAI,CAAC,CAAC;MAClDQ,YAAY,CAACuB,OAAO,CAAC,OAAO,EAAE9B,KAAK,CAAC;IACtC,CAAC,MAAM;MACL;MACAgC,cAAc,CAACF,OAAO,CAAC,MAAM,EAAEpB,IAAI,CAACqB,SAAS,CAAChC,IAAI,CAAC,CAAC;MACpDiC,cAAc,CAACF,OAAO,CAAC,OAAO,EAAE9B,KAAK,CAAC;IACxC;IAEA,OAAO;MAAEiC,OAAO,EAAE,IAAI;MAAElC;IAAK,CAAC;EAChC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACAC,KAAK,CAACD,KAAK,GAAGA,KAAK,CAACuB,QAAQ,EAAEG,IAAI,EAAE1B,KAAK,IAAI,cAAc;IAC3Da,OAAO,CAACb,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO;MAAE8B,OAAO,EAAE,KAAK;MAAE9B,KAAK,EAAEC,KAAK,CAACD;IAAM,CAAC;EAC/C,CAAC,SAAS;IACRC,KAAK,CAACF,OAAO,GAAG,KAAK;EACvB;AACF,CAAC;;AAED;AACA,MAAMgC,MAAM,GAAGA,CAAA,KAAM;EACnB9B,KAAK,CAACL,IAAI,GAAG,IAAI;EACjBK,KAAK,CAACJ,KAAK,GAAG,IAAI;EAClBI,KAAK,CAACH,UAAU,GAAG,KAAK;EACxB,IAAIL,WAAW,CAACgB,QAAQ,IAAIhB,WAAW,CAACgB,QAAQ,CAACC,OAAO,EAAE;IACxD,OAAOjB,WAAW,CAACgB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EAC7D;EACAP,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;EAC/BV,YAAY,CAACU,UAAU,CAAC,OAAO,CAAC;EAChCe,cAAc,CAACf,UAAU,CAAC,MAAM,CAAC;EACjCe,cAAc,CAACf,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC;;AAED;AACA,MAAMkB,OAAO,GAAGA,CAAA,KAAM;EACpB,OAAO/B,KAAK,CAACH,UAAU,IAAIG,KAAK,CAACL,IAAI,IAAIK,KAAK,CAACL,IAAI,CAACqC,OAAO,KAAK,CAAC;AACnE,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,OAAOjC,KAAK,CAACH,UAAU,IAAIG,KAAK,CAACL,IAAI,IAAIK,KAAK,CAACL,IAAI,CAACqC,OAAO,KAAK,CAAC;AACnE,CAAC;;AAED;AACA,MAAME,SAAS,GAAGA,CAAA,KAAM;EACtB,OAAOlC,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAACwC,EAAE,GAAG,IAAI;AAC1C,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,OAAOpC,KAAK,CAACL,IAAI,GAAGK,KAAK,CAACL,IAAI,CAAC0C,OAAO,GAAG,IAAI;AAC/C,CAAC;;AAED;AACApC,IAAI,CAAC,CAAC;AAEN,eAAe;EACbD,KAAK;EACLc,KAAK;EACLgB,MAAM;EACNC,OAAO;EACPE,WAAW;EACXC,SAAS;EACTE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}