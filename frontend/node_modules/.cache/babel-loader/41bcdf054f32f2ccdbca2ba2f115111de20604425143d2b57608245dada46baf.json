{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象\r\n */\nexport const exportToExcelWithImages = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('使用js-table2excel导出Excel...');\n    console.log('图片数据:', imageData);\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n\n    // 创建一个临时表格元素\n    const table = document.createElement('table');\n    table.style.display = 'none';\n    document.body.appendChild(table);\n\n    // 创建表头\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header => {\n      const th = document.createElement('th');\n      th.textContent = header.text;\n      headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    // 创建表体\n    const tbody = document.createElement('tbody');\n\n    // 添加数据行\n    data.forEach((row, rowIndex) => {\n      const tr = document.createElement('tr');\n      headers.forEach(header => {\n        const td = document.createElement('td');\n\n        // 处理图片列\n        if (header.field === '清理前照片' && imageData && imageData[rowIndex] && imageData[rowIndex].beforeImages && imageData[rowIndex].beforeImages.length > 0) {\n          // 只取第一张图片\n          const firstImageUrl = imageData[rowIndex].beforeImages[0];\n          console.log(`行 ${rowIndex} 清理前照片URL:`, firstImageUrl);\n          if (firstImageUrl) {\n            const img = document.createElement('img');\n            img.src = firstImageUrl;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            td.appendChild(img);\n          } else {\n            td.textContent = '无图片';\n          }\n        } else if (header.field === '清理后照片' && imageData && imageData[rowIndex] && imageData[rowIndex].afterImages && imageData[rowIndex].afterImages.length > 0) {\n          // 只取第一张图片\n          const firstImageUrl = imageData[rowIndex].afterImages[0];\n          console.log(`行 ${rowIndex} 清理后照片URL:`, firstImageUrl);\n          if (firstImageUrl) {\n            const img = document.createElement('img');\n            img.src = firstImageUrl;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            td.appendChild(img);\n          } else {\n            td.textContent = '无图片';\n          }\n        } else {\n          // 普通文本列\n          td.textContent = row[header.field] || '';\n        }\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n    table.appendChild(tbody);\n\n    // 使用js-table2excel导出\n    const table2excel = new Table2Excel();\n    table2excel.export(table, fullFileName);\n\n    // 导出完成后移除临时表格\n    document.body.removeChild(table);\n    return true;\n  } catch (error) {\n    console.error('使用js-table2excel导出Excel失败:', error);\n\n    // 如果js-table2excel导出失败，尝试使用CSV导出\n    try {\n      console.log('尝试使用CSV导出...');\n\n      // 准备CSV内容\n      let csvContent = '';\n\n      // 添加表头\n      csvContent += headers.map(header => `\"${header.text}\"`).join(',') + '\\n';\n\n      // 添加数据行\n      data.forEach(row => {\n        const rowData = headers.map(header => {\n          const value = row[header.field] || '';\n          // 如果值包含逗号、双引号或换行符，需要用双引号包裹并转义内部的双引号\n          if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return `\"${value}\"`;\n        });\n        csvContent += rowData.join(',') + '\\n';\n      });\n\n      // 创建Blob对象\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n\n      // 创建下载链接\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${fileName}_${new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14)}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n\n      // 触发下载\n      link.click();\n\n      // 清理\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      return true;\n    } catch (csvError) {\n      console.error('CSV导出也失败:', csvError);\n      return false;\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片链接\n    if (imageData && Object.keys(imageData).length > 0) {\n      enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n    } else {\n      enhancedData = data;\n    }\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\nexport const imageUrlToBase64 = async url => {\n  console.log('开始转换图片到Base64:', url);\n\n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n\n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, {\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = e => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n\n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n\n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = e => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n\n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => `${baseUrl}${path}`);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => `${baseUrl}${path}`);\n      }\n    });\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","Table2Excel","console","log","version","Object","keys","join","exportToExcelWithImages","data","fileName","headers","imageData","length","error","replace","timestamp","Date","toISOString","substring","fullFileName","table","document","createElement","style","display","body","appendChild","thead","headerRow","forEach","header","th","textContent","text","tbody","row","rowIndex","tr","td","field","beforeImages","firstImageUrl","img","src","width","height","afterImages","table2excel","export","removeChild","csvContent","map","rowData","value","includes","blob","Blob","type","link","url","URL","createObjectURL","setAttribute","visibility","click","revokeObjectURL","csvError","exportToExcel","wb","utils","book_new","enhancedData","index","newRow","ws","json_to_sheet","colWidths","wch","book_append_sheet","excelFileName","wbout","write","bookType","size","href","download","exportToCSV","csvFileName","h","title","item","undefined","cellValue","String","imageUrlToBase64","response","fetch","mode","cache","ok","Error","status","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","e","readAsDataURL","warn","Image","crossOrigin","onload","canvas","ctx","getContext","drawImage","base64","toDataURL","error2","prepareImageExportData","records","baseUrl","record","photo_path_before","beforePaths","startsWith","JSON","parse","path","photo_path_after","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象\r\n */\r\nexport const exportToExcelWithImages = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('使用js-table2excel导出Excel...');\r\n    console.log('图片数据:', imageData);\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    \r\n    // 创建一个临时表格元素\r\n    const table = document.createElement('table');\r\n    table.style.display = 'none';\r\n    document.body.appendChild(table);\r\n    \r\n    // 创建表头\r\n    const thead = document.createElement('thead');\r\n    const headerRow = document.createElement('tr');\r\n    \r\n    headers.forEach(header => {\r\n      const th = document.createElement('th');\r\n      th.textContent = header.text;\r\n      headerRow.appendChild(th);\r\n    });\r\n    \r\n    thead.appendChild(headerRow);\r\n    table.appendChild(thead);\r\n    \r\n    // 创建表体\r\n    const tbody = document.createElement('tbody');\r\n    \r\n    // 添加数据行\r\n    data.forEach((row, rowIndex) => {\r\n      const tr = document.createElement('tr');\r\n      \r\n      headers.forEach(header => {\r\n        const td = document.createElement('td');\r\n        \r\n        // 处理图片列\r\n        if (header.field === '清理前照片' && imageData && imageData[rowIndex] && imageData[rowIndex].beforeImages && imageData[rowIndex].beforeImages.length > 0) {\r\n          // 只取第一张图片\r\n          const firstImageUrl = imageData[rowIndex].beforeImages[0];\r\n          console.log(`行 ${rowIndex} 清理前照片URL:`, firstImageUrl);\r\n          \r\n          if (firstImageUrl) {\r\n            const img = document.createElement('img');\r\n            img.src = firstImageUrl;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            td.appendChild(img);\r\n          } else {\r\n            td.textContent = '无图片';\r\n          }\r\n        } \r\n        else if (header.field === '清理后照片' && imageData && imageData[rowIndex] && imageData[rowIndex].afterImages && imageData[rowIndex].afterImages.length > 0) {\r\n          // 只取第一张图片\r\n          const firstImageUrl = imageData[rowIndex].afterImages[0];\r\n          console.log(`行 ${rowIndex} 清理后照片URL:`, firstImageUrl);\r\n          \r\n          if (firstImageUrl) {\r\n            const img = document.createElement('img');\r\n            img.src = firstImageUrl;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            td.appendChild(img);\r\n          } else {\r\n            td.textContent = '无图片';\r\n          }\r\n        }\r\n        else {\r\n          // 普通文本列\r\n          td.textContent = row[header.field] || '';\r\n        }\r\n        \r\n        tr.appendChild(td);\r\n      });\r\n      \r\n      tbody.appendChild(tr);\r\n    });\r\n    \r\n    table.appendChild(tbody);\r\n    \r\n    // 使用js-table2excel导出\r\n    const table2excel = new Table2Excel();\r\n    table2excel.export(table, fullFileName);\r\n    \r\n    // 导出完成后移除临时表格\r\n    document.body.removeChild(table);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('使用js-table2excel导出Excel失败:', error);\r\n    \r\n    // 如果js-table2excel导出失败，尝试使用CSV导出\r\n    try {\r\n      console.log('尝试使用CSV导出...');\r\n      \r\n      // 准备CSV内容\r\n      let csvContent = '';\r\n      \r\n      // 添加表头\r\n      csvContent += headers.map(header => `\"${header.text}\"`).join(',') + '\\n';\r\n      \r\n      // 添加数据行\r\n      data.forEach(row => {\r\n        const rowData = headers.map(header => {\r\n          const value = row[header.field] || '';\r\n          // 如果值包含逗号、双引号或换行符，需要用双引号包裹并转义内部的双引号\r\n          if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\r\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n          }\r\n          return `\"${value}\"`;\r\n        });\r\n        csvContent += rowData.join(',') + '\\n';\r\n      });\r\n      \r\n      // 创建Blob对象\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      \r\n      // 创建下载链接\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', `${fileName}_${new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14)}.csv`);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      \r\n      // 触发下载\r\n      link.click();\r\n      \r\n      // 清理\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      return true;\r\n    } catch (csvError) {\r\n      console.error('CSV导出也失败:', csvError);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片链接\r\n    if (imageData && Object.keys(imageData).length > 0) {\r\n      enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n    } else {\r\n      enhancedData = data;\r\n    }\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\r\nexport const imageUrlToBase64 = async (url) => {\r\n  console.log('开始转换图片到Base64:', url);\r\n  \r\n  // 确保URL有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('无效的图片URL:', url);\r\n    return null;\r\n  }\r\n  \r\n  // 尝试方法1：使用fetch API\r\n  try {\r\n    console.log('尝试使用fetch API获取图片...');\r\n    const response = await fetch(url, { \r\n      mode: 'cors',\r\n      cache: 'no-cache'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP错误: ${response.status}`);\r\n    }\r\n    \r\n    const blob = await response.blob();\r\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = (e) => {\r\n        console.error('FileReader错误:', e);\r\n        reject(e);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  } catch (error) {\r\n    console.warn('使用fetch API获取图片失败:', error);\r\n    \r\n    // 尝试方法2：使用Image对象\r\n    try {\r\n      console.log('尝试使用Image对象获取图片...');\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous'; // 允许跨域\r\n      \r\n      // 等待图片加载\r\n      await new Promise((resolve, reject) => {\r\n        img.onload = resolve;\r\n        img.onerror = (e) => {\r\n          console.error('图片加载错误:', e);\r\n          reject(e);\r\n        };\r\n        img.src = url;\r\n      });\r\n      \r\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\r\n      \r\n      // 创建canvas并绘制图片\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n      \r\n      // 转换为base64\r\n      const base64 = canvas.toDataURL('image/jpeg');\r\n      console.log('图片转换为Base64成功，长度:', base64.length);\r\n      return base64;\r\n    } catch (error2) {\r\n      console.error('使用Image对象获取图片也失败:', error2);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => `${baseUrl}${path}`);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => `${baseUrl}${path}`);\r\n      }\r\n    });\r\n    \r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}