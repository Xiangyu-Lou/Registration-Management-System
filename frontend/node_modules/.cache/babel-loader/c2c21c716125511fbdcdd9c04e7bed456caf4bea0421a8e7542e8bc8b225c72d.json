{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n// 解析照片路径\nconst parsePhotoPath = path => {\n  console.log('解析照片路径:', path);\n  if (!path) {\n    console.log('照片路径为空');\n    return [];\n  }\n\n  // 如果path已经是数组，直接返回\n  if (Array.isArray(path)) {\n    console.log('照片路径已经是数组:', path);\n    return path;\n  }\n  try {\n    // 尝试解析为JSON\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\n      console.log('尝试将照片路径解析为JSON');\n      const parsed = JSON.parse(path);\n      console.log('JSON解析结果:', parsed);\n      if (Array.isArray(parsed)) {\n        return parsed;\n      } else {\n        console.error('JSON解析结果不是数组:', parsed);\n        return [path]; // 如果解析结果不是数组，则将原始路径作为单个元素返回\n      }\n    }\n\n    // 如果不是JSON格式，则将其作为单个路径返回\n    console.log('照片路径不是JSON格式，作为单个路径返回');\n    return [path];\n  } catch (error) {\n    console.error('解析照片路径失败:', error);\n    console.error('错误详情:', error.message);\n    // 如果解析失败，则将原始路径作为单个元素返回\n    return [path];\n  }\n};\n\n// 将图片URL转换为Base64\nconst imageUrlToBase64 = url => {\n  console.log('开始转换图片URL到Base64:', url);\n\n  // 检查URL是否有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return Promise.reject(new Error('Invalid image URL'));\n  }\n\n  // 检查URL是否为相对路径，如果是，添加origin\n  let fullUrl = url;\n  if (url.startsWith('/')) {\n    fullUrl = window.location.origin + url;\n    console.log('转换为完整URL:', fullUrl);\n  }\n  return new Promise((resolve, reject) => {\n    // 尝试直接使用fetch API获取图片，可以更好地处理跨域问题\n    console.log('使用fetch API获取图片:', fullUrl);\n\n    // 添加时间戳避免缓存问题\n    const urlWithTimestamp = fullUrl + (fullUrl.includes('?') ? '&' : '?') + '_t=' + new Date().getTime();\n    console.log('添加时间戳后的URL:', urlWithTimestamp);\n    fetch(urlWithTimestamp, {\n      mode: 'cors',\n      credentials: 'same-origin',\n      cache: 'no-cache' // 禁用缓存\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      console.log('fetch成功，状态:', response.status);\n      return response.blob();\n    }).then(blob => {\n      console.log('获取到blob数据，大小:', blob.size, '类型:', blob.type);\n\n      // 使用FileReader将blob转换为base64\n      const reader = new FileReader();\n      reader.onload = e => {\n        console.log('FileReader加载成功，数据长度:', e.target.result.length);\n        resolve(e.target.result);\n      };\n      reader.onerror = error => {\n        console.error('FileReader错误:', error);\n        reject(error);\n      };\n      reader.readAsDataURL(blob);\n    }).catch(error => {\n      console.error('fetch失败，回退到Image方法:', error);\n\n      // 如果fetch失败，回退到Image方法\n      const img = new Image();\n      img.crossOrigin = 'anonymous'; // 处理跨域问题，使用小写\n      console.log('设置图片crossOrigin为anonymous');\n\n      // 添加时间戳避免缓存问题\n      const imgUrlWithTimestamp = fullUrl + (fullUrl.includes('?') ? '&' : '?') + '_t=' + new Date().getTime();\n      console.log('图片URL添加时间戳:', imgUrlWithTimestamp);\n      img.onload = () => {\n        console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n        try {\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          console.log('创建canvas元素，尺寸:', canvas.width, 'x', canvas.height);\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          console.log('图片已绘制到canvas');\n          try {\n            const dataURL = canvas.toDataURL('image/jpeg');\n            console.log('转换为dataURL成功，长度:', dataURL.length);\n            console.log('dataURL前30个字符:', dataURL.substring(0, 30) + '...');\n            resolve(dataURL);\n          } catch (toDataURLError) {\n            console.error('toDataURL失败:', toDataURLError);\n            // 尝试使用其他格式\n            try {\n              const pngDataURL = canvas.toDataURL('image/png');\n              console.log('转换为PNG dataURL成功，长度:', pngDataURL.length);\n              resolve(pngDataURL);\n            } catch (pngError) {\n              console.error('PNG转换也失败:', pngError);\n              reject(pngError);\n            }\n          }\n        } catch (error) {\n          console.error('转换图片失败:', error);\n          console.error('错误详情:', error.message);\n          console.error('错误堆栈:', error.stack);\n          reject(error);\n        }\n      };\n      img.onerror = error => {\n        console.error('加载图片失败:', error);\n        console.error('图片URL:', imgUrlWithTimestamp);\n        console.error('错误类型:', typeof error);\n        console.error('错误详情:', error ? error.message : 'Unknown error');\n        reject(error);\n      };\n      console.log('设置图片src:', imgUrlWithTimestamp);\n      img.src = imgUrlWithTimestamp;\n\n      // 添加超时处理\n      setTimeout(() => {\n        if (!img.complete) {\n          console.error('图片加载超时:', imgUrlWithTimestamp);\n          reject(new Error('Image loading timeout'));\n        }\n      }, 10000); // 10秒超时\n    });\n  });\n};\n\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\n  console.log('=== exportToExcelWithImages 函数被调用 ===');\n  console.log('数据条数:', data.length);\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('使用js-table2excel导出Excel，开始处理图片...');\n    console.log('数据条数:', data.length);\n    console.log('第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n    console.log('导出文件名:', fullFileName);\n\n    // 预处理图片，确保所有图片都加载完成\n    const processedData = [];\n\n    // 逐行处理数据\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n      console.log(`处理第 ${rowIndex + 1}/${data.length} 条记录...`);\n      const row = data[rowIndex];\n      const record = row['__original'] || {};\n      console.log(`记录ID: ${record.id || 'unknown'}`);\n\n      // 处理清理前照片\n      let beforePhotoData = null;\n      if (record.photo_path_before) {\n        console.log(`记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\n        const photoPaths = parsePhotoPath(record.photo_path_before);\n        console.log(`解析后的照片路径:`, photoPaths);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`选择第一张照片:`, firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n            }\n            console.log(`记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\n            try {\n              console.log(`开始转换清理前照片...`);\n              beforePhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\n            } catch (error) {\n              console.error(`记录 ${rowIndex} 清理前照片转换失败:`, error);\n              console.error('错误详情:', error.message);\n            }\n          } else {\n            console.error(`记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\n          }\n        } else {\n          console.log(`记录 ${rowIndex} 没有有效的清理前照片路径`);\n        }\n      } else {\n        console.log(`记录 ${rowIndex} 没有清理前照片`);\n      }\n\n      // 处理清理后照片\n      let afterPhotoData = null;\n      if (record.photo_path_after) {\n        console.log(`记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\n        const photoPaths = parsePhotoPath(record.photo_path_after);\n        console.log(`解析后的照片路径:`, photoPaths);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`选择第一张照片:`, firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n            }\n            console.log(`记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\n            try {\n              console.log(`开始转换清理后照片...`);\n              afterPhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\n            } catch (error) {\n              console.error(`记录 ${rowIndex} 清理后照片转换失败:`, error);\n              console.error('错误详情:', error.message);\n            }\n          } else {\n            console.error(`记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\n          }\n        } else {\n          console.log(`记录 ${rowIndex} 没有有效的清理后照片路径`);\n        }\n      } else {\n        console.log(`记录 ${rowIndex} 没有清理后照片`);\n      }\n\n      // 保存处理后的数据\n      processedData.push({\n        ...row,\n        __beforePhotoData: beforePhotoData,\n        __afterPhotoData: afterPhotoData\n      });\n      console.log(`记录 ${rowIndex} 处理完成`);\n    }\n    console.log('所有图片处理完成，开始创建Excel...');\n    console.log('处理后的数据条数:', processedData.length);\n\n    // 创建一个临时表格元素\n    const table = document.createElement('table');\n    table.style.display = 'none';\n    document.body.appendChild(table);\n    console.log('创建临时表格元素');\n\n    // 创建表头\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header => {\n      const th = document.createElement('th');\n      th.textContent = header.text;\n      headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n    console.log('表头创建完成');\n\n    // 创建表体\n    const tbody = document.createElement('tbody');\n\n    // 添加数据行\n    processedData.forEach((row, index) => {\n      console.log(`创建第 ${index + 1}/${processedData.length} 行...`);\n      const tr = document.createElement('tr');\n      headers.forEach(header => {\n        const td = document.createElement('td');\n\n        // 处理清理前照片列\n        if (header.field === '清理前照片') {\n          if (row.__beforePhotoData) {\n            console.log(`添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__beforePhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            td.appendChild(img);\n            console.log(`第 ${index + 1} 行清理前照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`第 ${index + 1} 行没有清理前照片`);\n          }\n        }\n        // 处理清理后照片列 \n        else if (header.field === '清理后照片') {\n          if (row.__afterPhotoData) {\n            console.log(`添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__afterPhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            td.appendChild(img);\n            console.log(`第 ${index + 1} 行清理后照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`第 ${index + 1} 行没有清理后照片`);\n          }\n        } else {\n          // 普通文本列\n          td.textContent = row[header.field] || '';\n        }\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n      console.log(`第 ${index + 1} 行创建完成`);\n    });\n    table.appendChild(tbody);\n    console.log('表格创建完成');\n\n    // 检查表格内容\n    console.log('表格行数:', table.rows.length);\n    console.log('表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\n\n    // 使用js-table2excel导出\n    console.log('开始使用js-table2excel导出...');\n    const table2excel = new Table2Excel();\n    console.log('Table2Excel实例创建成功');\n    try {\n      console.log('调用export方法...');\n      table2excel.export(table, fullFileName);\n      console.log('export方法调用成功');\n    } catch (exportError) {\n      console.error('export方法调用失败:', exportError);\n      throw exportError;\n    }\n\n    // 导出完成后移除临时表格\n    document.body.removeChild(table);\n    console.log('临时表格已移除');\n    return true;\n  } catch (error) {\n    console.error('使用js-table2excel导出Excel失败:', error);\n    console.error('错误详情:', error.message);\n    console.error('错误堆栈:', error.stack);\n\n    // 如果js-table2excel导出失败，尝试使用CSV导出\n    try {\n      console.log('尝试使用CSV导出...');\n\n      // 准备CSV内容\n      let csvContent = '';\n\n      // 添加表头\n      csvContent += headers.map(header => `\"${header.text}\"`).join(',') + '\\n';\n\n      // 添加数据行\n      data.forEach(row => {\n        const rowData = headers.map(header => {\n          const value = row[header.field] || '';\n          // 如果值包含逗号、双引号或换行符，需要用双引号包裹并转义内部的双引号\n          if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return `\"${value}\"`;\n        });\n        csvContent += rowData.join(',') + '\\n';\n      });\n\n      // 创建Blob对象\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n\n      // 创建下载链接\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${fileName}_${new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14)}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n\n      // 触发下载\n      link.click();\n\n      // 清理\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      return true;\n    } catch (csvError) {\n      console.error('CSV导出也失败:', csvError);\n      return false;\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片链接\n    if (imageData && Object.keys(imageData).length > 0) {\n      enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n    } else {\n      enhancedData = data;\n    }\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\n      }\n    });\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","Table2Excel","console","log","version","Object","keys","join","parsePhotoPath","path","Array","isArray","startsWith","endsWith","parsed","JSON","parse","error","message","imageUrlToBase64","url","Promise","reject","Error","fullUrl","window","location","origin","resolve","urlWithTimestamp","includes","Date","getTime","fetch","mode","credentials","cache","then","response","ok","status","blob","size","type","reader","FileReader","onload","e","target","result","length","onerror","readAsDataURL","catch","img","Image","crossOrigin","imgUrlWithTimestamp","width","height","canvas","document","createElement","ctx","getContext","drawImage","dataURL","toDataURL","substring","toDataURLError","pngDataURL","pngError","stack","src","setTimeout","complete","exportToExcelWithImages","data","fileName","headers","stringify","replace","timestamp","toISOString","fullFileName","processedData","rowIndex","row","record","id","beforePhotoData","photo_path_before","photoPaths","firstPath","imageUrl","afterPhotoData","photo_path_after","push","__beforePhotoData","__afterPhotoData","table","style","display","body","appendChild","thead","headerRow","forEach","header","th","textContent","text","tbody","index","tr","td","field","rows","cells","table2excel","export","exportError","removeChild","csvContent","map","rowData","value","Blob","link","URL","createObjectURL","setAttribute","visibility","click","revokeObjectURL","csvError","exportToExcel","imageData","wb","utils","book_new","enhancedData","newRow","ws","json_to_sheet","colWidths","wch","book_append_sheet","excelFileName","wbout","write","bookType","href","download","exportToCSV","csvFileName","h","title","item","undefined","cellValue","String","prepareImageExportData","records","baseUrl","beforeImages","afterImages","beforePaths","pathStr","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n// 解析照片路径\r\nconst parsePhotoPath = (path) => {\r\n  console.log('解析照片路径:', path);\r\n  \r\n  if (!path) {\r\n    console.log('照片路径为空');\r\n    return [];\r\n  }\r\n  \r\n  // 如果path已经是数组，直接返回\r\n  if (Array.isArray(path)) {\r\n    console.log('照片路径已经是数组:', path);\r\n    return path;\r\n  }\r\n  \r\n  try {\r\n    // 尝试解析为JSON\r\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\r\n      console.log('尝试将照片路径解析为JSON');\r\n      const parsed = JSON.parse(path);\r\n      console.log('JSON解析结果:', parsed);\r\n      \r\n      if (Array.isArray(parsed)) {\r\n        return parsed;\r\n      } else {\r\n        console.error('JSON解析结果不是数组:', parsed);\r\n        return [path]; // 如果解析结果不是数组，则将原始路径作为单个元素返回\r\n      }\r\n    }\r\n    \r\n    // 如果不是JSON格式，则将其作为单个路径返回\r\n    console.log('照片路径不是JSON格式，作为单个路径返回');\r\n    return [path];\r\n  } catch (error) {\r\n    console.error('解析照片路径失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    // 如果解析失败，则将原始路径作为单个元素返回\r\n    return [path];\r\n  }\r\n};\r\n\r\n// 将图片URL转换为Base64\r\nconst imageUrlToBase64 = (url) => {\r\n  console.log('开始转换图片URL到Base64:', url);\r\n  \r\n  // 检查URL是否有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('无效的图片URL:', url);\r\n    return Promise.reject(new Error('Invalid image URL'));\r\n  }\r\n  \r\n  // 检查URL是否为相对路径，如果是，添加origin\r\n  let fullUrl = url;\r\n  if (url.startsWith('/')) {\r\n    fullUrl = window.location.origin + url;\r\n    console.log('转换为完整URL:', fullUrl);\r\n  }\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    // 尝试直接使用fetch API获取图片，可以更好地处理跨域问题\r\n    console.log('使用fetch API获取图片:', fullUrl);\r\n    \r\n    // 添加时间戳避免缓存问题\r\n    const urlWithTimestamp = fullUrl + (fullUrl.includes('?') ? '&' : '?') + '_t=' + new Date().getTime();\r\n    console.log('添加时间戳后的URL:', urlWithTimestamp);\r\n    \r\n    fetch(urlWithTimestamp, {\r\n      mode: 'cors',\r\n      credentials: 'same-origin',\r\n      cache: 'no-cache' // 禁用缓存\r\n    })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        console.log('fetch成功，状态:', response.status);\r\n        return response.blob();\r\n      })\r\n      .then(blob => {\r\n        console.log('获取到blob数据，大小:', blob.size, '类型:', blob.type);\r\n        \r\n        // 使用FileReader将blob转换为base64\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          console.log('FileReader加载成功，数据长度:', e.target.result.length);\r\n          resolve(e.target.result);\r\n        };\r\n        reader.onerror = (error) => {\r\n          console.error('FileReader错误:', error);\r\n          reject(error);\r\n        };\r\n        reader.readAsDataURL(blob);\r\n      })\r\n      .catch(error => {\r\n        console.error('fetch失败，回退到Image方法:', error);\r\n        \r\n        // 如果fetch失败，回退到Image方法\r\n        const img = new Image();\r\n        img.crossOrigin = 'anonymous'; // 处理跨域问题，使用小写\r\n        console.log('设置图片crossOrigin为anonymous');\r\n        \r\n        // 添加时间戳避免缓存问题\r\n        const imgUrlWithTimestamp = fullUrl + (fullUrl.includes('?') ? '&' : '?') + '_t=' + new Date().getTime();\r\n        console.log('图片URL添加时间戳:', imgUrlWithTimestamp);\r\n        \r\n        img.onload = () => {\r\n          console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\r\n          try {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            console.log('创建canvas元素，尺寸:', canvas.width, 'x', canvas.height);\r\n            \r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0);\r\n            console.log('图片已绘制到canvas');\r\n            \r\n            try {\r\n              const dataURL = canvas.toDataURL('image/jpeg');\r\n              console.log('转换为dataURL成功，长度:', dataURL.length);\r\n              console.log('dataURL前30个字符:', dataURL.substring(0, 30) + '...');\r\n              resolve(dataURL);\r\n            } catch (toDataURLError) {\r\n              console.error('toDataURL失败:', toDataURLError);\r\n              // 尝试使用其他格式\r\n              try {\r\n                const pngDataURL = canvas.toDataURL('image/png');\r\n                console.log('转换为PNG dataURL成功，长度:', pngDataURL.length);\r\n                resolve(pngDataURL);\r\n              } catch (pngError) {\r\n                console.error('PNG转换也失败:', pngError);\r\n                reject(pngError);\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error('转换图片失败:', error);\r\n            console.error('错误详情:', error.message);\r\n            console.error('错误堆栈:', error.stack);\r\n            reject(error);\r\n          }\r\n        };\r\n        \r\n        img.onerror = (error) => {\r\n          console.error('加载图片失败:', error);\r\n          console.error('图片URL:', imgUrlWithTimestamp);\r\n          console.error('错误类型:', typeof error);\r\n          console.error('错误详情:', error ? error.message : 'Unknown error');\r\n          reject(error);\r\n        };\r\n        \r\n        console.log('设置图片src:', imgUrlWithTimestamp);\r\n        img.src = imgUrlWithTimestamp;\r\n        \r\n        // 添加超时处理\r\n        setTimeout(() => {\r\n          if (!img.complete) {\r\n            console.error('图片加载超时:', imgUrlWithTimestamp);\r\n            reject(new Error('Image loading timeout'));\r\n          }\r\n        }, 10000); // 10秒超时\r\n      });\r\n  });\r\n};\r\n\r\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\r\n  console.log('=== exportToExcelWithImages 函数被调用 ===');\r\n  console.log('数据条数:', data.length);\r\n  \r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('使用js-table2excel导出Excel，开始处理图片...');\r\n    console.log('数据条数:', data.length);\r\n    console.log('第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    console.log('导出文件名:', fullFileName);\r\n    \r\n    // 预处理图片，确保所有图片都加载完成\r\n    const processedData = [];\r\n    \r\n    // 逐行处理数据\r\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n      console.log(`处理第 ${rowIndex + 1}/${data.length} 条记录...`);\r\n      const row = data[rowIndex];\r\n      const record = row['__original'] || {};\r\n      console.log(`记录ID: ${record.id || 'unknown'}`);\r\n      \r\n      // 处理清理前照片\r\n      let beforePhotoData = null;\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\r\n        const photoPaths = parsePhotoPath(record.photo_path_before);\r\n        console.log(`解析后的照片路径:`, photoPaths);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`选择第一张照片:`, firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n            }\r\n            \r\n            console.log(`记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`开始转换清理前照片...`);\r\n              beforePhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\r\n            } catch (error) {\r\n              console.error(`记录 ${rowIndex} 清理前照片转换失败:`, error);\r\n              console.error('错误详情:', error.message);\r\n            }\r\n          } else {\r\n            console.error(`记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          console.log(`记录 ${rowIndex} 没有有效的清理前照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`记录 ${rowIndex} 没有清理前照片`);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      let afterPhotoData = null;\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\r\n        const photoPaths = parsePhotoPath(record.photo_path_after);\r\n        console.log(`解析后的照片路径:`, photoPaths);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`选择第一张照片:`, firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n            }\r\n            \r\n            console.log(`记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`开始转换清理后照片...`);\r\n              afterPhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\r\n            } catch (error) {\r\n              console.error(`记录 ${rowIndex} 清理后照片转换失败:`, error);\r\n              console.error('错误详情:', error.message);\r\n            }\r\n          } else {\r\n            console.error(`记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          console.log(`记录 ${rowIndex} 没有有效的清理后照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`记录 ${rowIndex} 没有清理后照片`);\r\n      }\r\n      \r\n      // 保存处理后的数据\r\n      processedData.push({\r\n        ...row,\r\n        __beforePhotoData: beforePhotoData,\r\n        __afterPhotoData: afterPhotoData\r\n      });\r\n      console.log(`记录 ${rowIndex} 处理完成`);\r\n    }\r\n    \r\n    console.log('所有图片处理完成，开始创建Excel...');\r\n    console.log('处理后的数据条数:', processedData.length);\r\n    \r\n    // 创建一个临时表格元素\r\n    const table = document.createElement('table');\r\n    table.style.display = 'none';\r\n    document.body.appendChild(table);\r\n    console.log('创建临时表格元素');\r\n    \r\n    // 创建表头\r\n    const thead = document.createElement('thead');\r\n    const headerRow = document.createElement('tr');\r\n    \r\n    headers.forEach(header => {\r\n      const th = document.createElement('th');\r\n      th.textContent = header.text;\r\n      headerRow.appendChild(th);\r\n    });\r\n    \r\n    thead.appendChild(headerRow);\r\n    table.appendChild(thead);\r\n    console.log('表头创建完成');\r\n    \r\n    // 创建表体\r\n    const tbody = document.createElement('tbody');\r\n    \r\n    // 添加数据行\r\n    processedData.forEach((row, index) => {\r\n      console.log(`创建第 ${index + 1}/${processedData.length} 行...`);\r\n      const tr = document.createElement('tr');\r\n      \r\n      headers.forEach(header => {\r\n        const td = document.createElement('td');\r\n        \r\n        // 处理清理前照片列\r\n        if (header.field === '清理前照片') {\r\n          if (row.__beforePhotoData) {\r\n            console.log(`添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__beforePhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            td.appendChild(img);\r\n            console.log(`第 ${index + 1} 行清理前照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`第 ${index + 1} 行没有清理前照片`);\r\n          }\r\n        }\r\n        // 处理清理后照片列 \r\n        else if (header.field === '清理后照片') {\r\n          if (row.__afterPhotoData) {\r\n            console.log(`添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__afterPhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            td.appendChild(img);\r\n            console.log(`第 ${index + 1} 行清理后照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`第 ${index + 1} 行没有清理后照片`);\r\n          }\r\n        }\r\n        else {\r\n          // 普通文本列\r\n          td.textContent = row[header.field] || '';\r\n        }\r\n        \r\n        tr.appendChild(td);\r\n      });\r\n      \r\n      tbody.appendChild(tr);\r\n      console.log(`第 ${index + 1} 行创建完成`);\r\n    });\r\n    \r\n    table.appendChild(tbody);\r\n    console.log('表格创建完成');\r\n    \r\n    // 检查表格内容\r\n    console.log('表格行数:', table.rows.length);\r\n    console.log('表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\r\n    \r\n    // 使用js-table2excel导出\r\n    console.log('开始使用js-table2excel导出...');\r\n    const table2excel = new Table2Excel();\r\n    console.log('Table2Excel实例创建成功');\r\n    \r\n    try {\r\n      console.log('调用export方法...');\r\n      table2excel.export(table, fullFileName);\r\n      console.log('export方法调用成功');\r\n    } catch (exportError) {\r\n      console.error('export方法调用失败:', exportError);\r\n      throw exportError;\r\n    }\r\n    \r\n    // 导出完成后移除临时表格\r\n    document.body.removeChild(table);\r\n    console.log('临时表格已移除');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('使用js-table2excel导出Excel失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    console.error('错误堆栈:', error.stack);\r\n    \r\n    // 如果js-table2excel导出失败，尝试使用CSV导出\r\n    try {\r\n      console.log('尝试使用CSV导出...');\r\n      \r\n      // 准备CSV内容\r\n      let csvContent = '';\r\n      \r\n      // 添加表头\r\n      csvContent += headers.map(header => `\"${header.text}\"`).join(',') + '\\n';\r\n      \r\n      // 添加数据行\r\n      data.forEach(row => {\r\n        const rowData = headers.map(header => {\r\n          const value = row[header.field] || '';\r\n          // 如果值包含逗号、双引号或换行符，需要用双引号包裹并转义内部的双引号\r\n          if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\r\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n          }\r\n          return `\"${value}\"`;\r\n        });\r\n        csvContent += rowData.join(',') + '\\n';\r\n      });\r\n      \r\n      // 创建Blob对象\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      \r\n      // 创建下载链接\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', `${fileName}_${new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14)}.csv`);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      \r\n      // 触发下载\r\n      link.click();\r\n      \r\n      // 清理\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      return true;\r\n    } catch (csvError) {\r\n      console.error('CSV导出也失败:', csvError);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片链接\r\n    if (imageData && Object.keys(imageData).length > 0) {\r\n      enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n    } else {\r\n      enhancedData = data;\r\n    }\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\r\n        \r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\r\n        \r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\r\n      }\r\n    });\r\n    \r\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,OAAOC,WAAW,MAAM,gBAAgB;AACxC;;AAEA;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEH,IAAI,CAACI,OAAO,CAAC;AACrCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEvD;AACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;EAC/BP,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,IAAI,CAAC;EAE5B,IAAI,CAACA,IAAI,EAAE;IACTP,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,OAAO,EAAE;EACX;;EAEA;EACA,IAAIO,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;IACvBP,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEM,IAAI,CAAC;IAC/B,OAAOA,IAAI;EACb;EAEA,IAAI;IACF;IACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACG,UAAU,CAAC,GAAG,CAAC,IAAIH,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC1EX,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,MAAMW,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACP,IAAI,CAAC;MAC/BP,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEW,MAAM,CAAC;MAEhC,IAAIJ,KAAK,CAACC,OAAO,CAACG,MAAM,CAAC,EAAE;QACzB,OAAOA,MAAM;MACf,CAAC,MAAM;QACLZ,OAAO,CAACe,KAAK,CAAC,eAAe,EAAEH,MAAM,CAAC;QACtC,OAAO,CAACL,IAAI,CAAC,CAAC,CAAC;MACjB;IACF;;IAEA;IACAP,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,OAAO,CAACM,IAAI,CAAC;EACf,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjCf,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;IACrC;IACA,OAAO,CAACT,IAAI,CAAC;EACf;AACF,CAAC;;AAED;AACA,MAAMU,gBAAgB,GAAIC,GAAG,IAAK;EAChClB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEiB,GAAG,CAAC;;EAErC;EACA,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnClB,OAAO,CAACe,KAAK,CAAC,WAAW,EAAEG,GAAG,CAAC;IAC/B,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,mBAAmB,CAAC,CAAC;EACvD;;EAEA;EACA,IAAIC,OAAO,GAAGJ,GAAG;EACjB,IAAIA,GAAG,CAACR,UAAU,CAAC,GAAG,CAAC,EAAE;IACvBY,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAGP,GAAG;IACtClB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEqB,OAAO,CAAC;EACnC;EAEA,OAAO,IAAIH,OAAO,CAAC,CAACO,OAAO,EAAEN,MAAM,KAAK;IACtC;IACApB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEqB,OAAO,CAAC;;IAExC;IACA,MAAMK,gBAAgB,GAAGL,OAAO,IAAIA,OAAO,CAACM,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACrG9B,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE0B,gBAAgB,CAAC;IAE5CI,KAAK,CAACJ,gBAAgB,EAAE;MACtBK,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE,aAAa;MAC1BC,KAAK,EAAE,UAAU,CAAC;IACpB,CAAC,CAAC,CACCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIhB,KAAK,CAAC,uBAAuBe,QAAQ,CAACE,MAAM,EAAE,CAAC;MAC3D;MACAtC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEmC,QAAQ,CAACE,MAAM,CAAC;MAC3C,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACI,IAAI,IAAI;MACZvC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEsC,IAAI,CAACC,IAAI,EAAE,KAAK,EAAED,IAAI,CAACE,IAAI,CAAC;;MAEzD;MACA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;QACrB7C,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE4C,CAAC,CAACC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC;QAC3DtB,OAAO,CAACmB,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC;MAC1B,CAAC;MACDL,MAAM,CAACO,OAAO,GAAIlC,KAAK,IAAK;QAC1Bf,OAAO,CAACe,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrCK,MAAM,CAACL,KAAK,CAAC;MACf,CAAC;MACD2B,MAAM,CAACQ,aAAa,CAACX,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDY,KAAK,CAACpC,KAAK,IAAI;MACdf,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;MAE3C;MACA,MAAMqC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,WAAW,GAAG,WAAW,CAAC,CAAC;MAC/BtD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;;MAExC;MACA,MAAMsD,mBAAmB,GAAGjC,OAAO,IAAIA,OAAO,CAACM,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACxG9B,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEsD,mBAAmB,CAAC;MAE/CH,GAAG,CAACR,MAAM,GAAG,MAAM;QACjB5C,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEmD,GAAG,CAACI,KAAK,EAAE,GAAG,EAAEJ,GAAG,CAACK,MAAM,CAAC;QACrD,IAAI;UACF,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;UAC/CF,MAAM,CAACF,KAAK,GAAGJ,GAAG,CAACI,KAAK;UACxBE,MAAM,CAACD,MAAM,GAAGL,GAAG,CAACK,MAAM;UAC1BzD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEyD,MAAM,CAACF,KAAK,EAAE,GAAG,EAAEE,MAAM,CAACD,MAAM,CAAC;UAE/D,MAAMI,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;UACnCD,GAAG,CAACE,SAAS,CAACX,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;UACxBpD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAE3B,IAAI;YACF,MAAM+D,OAAO,GAAGN,MAAM,CAACO,SAAS,CAAC,YAAY,CAAC;YAC9CjE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE+D,OAAO,CAAChB,MAAM,CAAC;YAC/ChD,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE+D,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;YAC/DxC,OAAO,CAACsC,OAAO,CAAC;UAClB,CAAC,CAAC,OAAOG,cAAc,EAAE;YACvBnE,OAAO,CAACe,KAAK,CAAC,cAAc,EAAEoD,cAAc,CAAC;YAC7C;YACA,IAAI;cACF,MAAMC,UAAU,GAAGV,MAAM,CAACO,SAAS,CAAC,WAAW,CAAC;cAChDjE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmE,UAAU,CAACpB,MAAM,CAAC;cACtDtB,OAAO,CAAC0C,UAAU,CAAC;YACrB,CAAC,CAAC,OAAOC,QAAQ,EAAE;cACjBrE,OAAO,CAACe,KAAK,CAAC,WAAW,EAAEsD,QAAQ,CAAC;cACpCjD,MAAM,CAACiD,QAAQ,CAAC;YAClB;UACF;QACF,CAAC,CAAC,OAAOtD,KAAK,EAAE;UACdf,OAAO,CAACe,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;UAC/Bf,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;UACrChB,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACuD,KAAK,CAAC;UACnClD,MAAM,CAACL,KAAK,CAAC;QACf;MACF,CAAC;MAEDqC,GAAG,CAACH,OAAO,GAAIlC,KAAK,IAAK;QACvBf,OAAO,CAACe,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/Bf,OAAO,CAACe,KAAK,CAAC,QAAQ,EAAEwC,mBAAmB,CAAC;QAC5CvD,OAAO,CAACe,KAAK,CAAC,OAAO,EAAE,OAAOA,KAAK,CAAC;QACpCf,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,GAAGA,KAAK,CAACC,OAAO,GAAG,eAAe,CAAC;QAC/DI,MAAM,CAACL,KAAK,CAAC;MACf,CAAC;MAEDf,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEsD,mBAAmB,CAAC;MAC5CH,GAAG,CAACmB,GAAG,GAAGhB,mBAAmB;;MAE7B;MACAiB,UAAU,CAAC,MAAM;QACf,IAAI,CAACpB,GAAG,CAACqB,QAAQ,EAAE;UACjBzE,OAAO,CAACe,KAAK,CAAC,SAAS,EAAEwC,mBAAmB,CAAC;UAC7CnC,MAAM,CAAC,IAAIC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC5C;MACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IACb,CAAC,CAAC;EACN,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMqD,uBAAuB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,KAAK;EACxE7E,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;EACpDD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE0E,IAAI,CAAC3B,MAAM,CAAC;EAEjC,IAAI,CAAC2B,IAAI,IAAIA,IAAI,CAAC3B,MAAM,KAAK,CAAC,EAAE;IAC9BhD,OAAO,CAACe,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAO,KAAK;EACd;EAEA,IAAI;IACFf,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE0E,IAAI,CAAC3B,MAAM,CAAC;IACjChD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEY,IAAI,CAACiE,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC,CAACT,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;;IAE1E;IACAU,QAAQ,GAAGA,QAAQ,CAACG,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;IACjD,MAAMC,SAAS,GAAG,IAAInD,IAAI,CAAC,CAAC,CAACoD,WAAW,CAAC,CAAC,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACb,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IACjF,MAAMgB,YAAY,GAAG,GAAGN,QAAQ,IAAII,SAAS,EAAE;IAC/ChF,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEiF,YAAY,CAAC;;IAEnC;IACA,MAAMC,aAAa,GAAG,EAAE;;IAExB;IACA,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGT,IAAI,CAAC3B,MAAM,EAAEoC,QAAQ,EAAE,EAAE;MACzDpF,OAAO,CAACC,GAAG,CAAC,OAAOmF,QAAQ,GAAG,CAAC,IAAIT,IAAI,CAAC3B,MAAM,SAAS,CAAC;MACxD,MAAMqC,GAAG,GAAGV,IAAI,CAACS,QAAQ,CAAC;MAC1B,MAAME,MAAM,GAAGD,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;MACtCrF,OAAO,CAACC,GAAG,CAAC,SAASqF,MAAM,CAACC,EAAE,IAAI,SAAS,EAAE,CAAC;;MAE9C;MACA,IAAIC,eAAe,GAAG,IAAI;MAC1B,IAAIF,MAAM,CAACG,iBAAiB,EAAE;QAC5BzF,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,WAAW,EAAEE,MAAM,CAACG,iBAAiB,CAAC;QAChE,MAAMC,UAAU,GAAGpF,cAAc,CAACgF,MAAM,CAACG,iBAAiB,CAAC;QAC3DzF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEyF,UAAU,CAAC;QAEpC,IAAIA,UAAU,IAAIA,UAAU,CAAC1C,MAAM,GAAG,CAAC,EAAE;UACvC,MAAM2C,SAAS,GAAGD,UAAU,CAAC,CAAC,CAAC;UAC/B1F,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE0F,SAAS,CAAC;;UAElC;UACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;YACjC;YACA,IAAIC,QAAQ,GAAGD,SAAS;;YAExB;YACA,IAAIA,SAAS,CAACjF,UAAU,CAAC,GAAG,CAAC,EAAE;cAC7BkF,QAAQ,GAAGrE,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAGkE,SAAS;YAC/C;YAEA3F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,cAAc,EAAEQ,QAAQ,CAAC;YAEnD,IAAI;cACF5F,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;cAC3BuF,eAAe,GAAG,MAAMvE,gBAAgB,CAAC2E,QAAQ,CAAC;cAClD5F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,sBAAsB,EAAEI,eAAe,GAAGA,eAAe,CAACxC,MAAM,GAAG,CAAC,CAAC;YACjG,CAAC,CAAC,OAAOjC,KAAK,EAAE;cACdf,OAAO,CAACe,KAAK,CAAC,MAAMqE,QAAQ,aAAa,EAAErE,KAAK,CAAC;cACjDf,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;YACvC;UACF,CAAC,MAAM;YACLhB,OAAO,CAACe,KAAK,CAAC,MAAMqE,QAAQ,eAAe,EAAEO,SAAS,CAAC;UACzD;QACF,CAAC,MAAM;UACL3F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,eAAe,CAAC;QAC5C;MACF,CAAC,MAAM;QACLpF,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,UAAU,CAAC;MACvC;;MAEA;MACA,IAAIS,cAAc,GAAG,IAAI;MACzB,IAAIP,MAAM,CAACQ,gBAAgB,EAAE;QAC3B9F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,WAAW,EAAEE,MAAM,CAACQ,gBAAgB,CAAC;QAC/D,MAAMJ,UAAU,GAAGpF,cAAc,CAACgF,MAAM,CAACQ,gBAAgB,CAAC;QAC1D9F,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEyF,UAAU,CAAC;QAEpC,IAAIA,UAAU,IAAIA,UAAU,CAAC1C,MAAM,GAAG,CAAC,EAAE;UACvC,MAAM2C,SAAS,GAAGD,UAAU,CAAC,CAAC,CAAC;UAC/B1F,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE0F,SAAS,CAAC;;UAElC;UACA,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;YACjC;YACA,IAAIC,QAAQ,GAAGD,SAAS;;YAExB;YACA,IAAIA,SAAS,CAACjF,UAAU,CAAC,GAAG,CAAC,EAAE;cAC7BkF,QAAQ,GAAGrE,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAGkE,SAAS;YAC/C;YAEA3F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,cAAc,EAAEQ,QAAQ,CAAC;YAEnD,IAAI;cACF5F,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;cAC3B4F,cAAc,GAAG,MAAM5E,gBAAgB,CAAC2E,QAAQ,CAAC;cACjD5F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,sBAAsB,EAAES,cAAc,GAAGA,cAAc,CAAC7C,MAAM,GAAG,CAAC,CAAC;YAC/F,CAAC,CAAC,OAAOjC,KAAK,EAAE;cACdf,OAAO,CAACe,KAAK,CAAC,MAAMqE,QAAQ,aAAa,EAAErE,KAAK,CAAC;cACjDf,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;YACvC;UACF,CAAC,MAAM;YACLhB,OAAO,CAACe,KAAK,CAAC,MAAMqE,QAAQ,eAAe,EAAEO,SAAS,CAAC;UACzD;QACF,CAAC,MAAM;UACL3F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,eAAe,CAAC;QAC5C;MACF,CAAC,MAAM;QACLpF,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,UAAU,CAAC;MACvC;;MAEA;MACAD,aAAa,CAACY,IAAI,CAAC;QACjB,GAAGV,GAAG;QACNW,iBAAiB,EAAER,eAAe;QAClCS,gBAAgB,EAAEJ;MACpB,CAAC,CAAC;MACF7F,OAAO,CAACC,GAAG,CAAC,MAAMmF,QAAQ,OAAO,CAAC;IACpC;IAEApF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpCD,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEkF,aAAa,CAACnC,MAAM,CAAC;;IAE9C;IACA,MAAMkD,KAAK,GAAGvC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7CsC,KAAK,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;IAC5BzC,QAAQ,CAAC0C,IAAI,CAACC,WAAW,CAACJ,KAAK,CAAC;IAChClG,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;;IAEvB;IACA,MAAMsG,KAAK,GAAG5C,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IAC7C,MAAM4C,SAAS,GAAG7C,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;IAE9CiB,OAAO,CAAC4B,OAAO,CAACC,MAAM,IAAI;MACxB,MAAMC,EAAE,GAAGhD,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;MACvC+C,EAAE,CAACC,WAAW,GAAGF,MAAM,CAACG,IAAI;MAC5BL,SAAS,CAACF,WAAW,CAACK,EAAE,CAAC;IAC3B,CAAC,CAAC;IAEFJ,KAAK,CAACD,WAAW,CAACE,SAAS,CAAC;IAC5BN,KAAK,CAACI,WAAW,CAACC,KAAK,CAAC;IACxBvG,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;;IAErB;IACA,MAAM6G,KAAK,GAAGnD,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;;IAE7C;IACAuB,aAAa,CAACsB,OAAO,CAAC,CAACpB,GAAG,EAAE0B,KAAK,KAAK;MACpC/G,OAAO,CAACC,GAAG,CAAC,OAAO8G,KAAK,GAAG,CAAC,IAAI5B,aAAa,CAACnC,MAAM,OAAO,CAAC;MAC5D,MAAMgE,EAAE,GAAGrD,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;MAEvCiB,OAAO,CAAC4B,OAAO,CAACC,MAAM,IAAI;QACxB,MAAMO,EAAE,GAAGtD,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;;QAEvC;QACA,IAAI8C,MAAM,CAACQ,KAAK,KAAK,OAAO,EAAE;UAC5B,IAAI7B,GAAG,CAACW,iBAAiB,EAAE;YACzBhG,OAAO,CAACC,GAAG,CAAC,OAAO8G,KAAK,GAAG,CAAC,mBAAmB,EAAE1B,GAAG,CAACW,iBAAiB,CAAChD,MAAM,CAAC;YAC9E;YACA,MAAMI,GAAG,GAAGO,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACzCR,GAAG,CAACmB,GAAG,GAAGc,GAAG,CAACW,iBAAiB;YAC/B5C,GAAG,CAAC+C,KAAK,CAAC3C,KAAK,GAAG,OAAO;YACzBJ,GAAG,CAAC+C,KAAK,CAAC1C,MAAM,GAAG,OAAO;YAC1BwD,EAAE,CAACX,WAAW,CAAClD,GAAG,CAAC;YACnBpD,OAAO,CAACC,GAAG,CAAC,KAAK8G,KAAK,GAAG,CAAC,aAAa,CAAC;UAC1C,CAAC,MAAM;YACLE,EAAE,CAACL,WAAW,GAAG,KAAK;YACtB5G,OAAO,CAACC,GAAG,CAAC,KAAK8G,KAAK,GAAG,CAAC,WAAW,CAAC;UACxC;QACF;QACA;QAAA,KACK,IAAIL,MAAM,CAACQ,KAAK,KAAK,OAAO,EAAE;UACjC,IAAI7B,GAAG,CAACY,gBAAgB,EAAE;YACxBjG,OAAO,CAACC,GAAG,CAAC,OAAO8G,KAAK,GAAG,CAAC,mBAAmB,EAAE1B,GAAG,CAACY,gBAAgB,CAACjD,MAAM,CAAC;YAC7E;YACA,MAAMI,GAAG,GAAGO,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACzCR,GAAG,CAACmB,GAAG,GAAGc,GAAG,CAACY,gBAAgB;YAC9B7C,GAAG,CAAC+C,KAAK,CAAC3C,KAAK,GAAG,OAAO;YACzBJ,GAAG,CAAC+C,KAAK,CAAC1C,MAAM,GAAG,OAAO;YAC1BwD,EAAE,CAACX,WAAW,CAAClD,GAAG,CAAC;YACnBpD,OAAO,CAACC,GAAG,CAAC,KAAK8G,KAAK,GAAG,CAAC,aAAa,CAAC;UAC1C,CAAC,MAAM;YACLE,EAAE,CAACL,WAAW,GAAG,KAAK;YACtB5G,OAAO,CAACC,GAAG,CAAC,KAAK8G,KAAK,GAAG,CAAC,WAAW,CAAC;UACxC;QACF,CAAC,MACI;UACH;UACAE,EAAE,CAACL,WAAW,GAAGvB,GAAG,CAACqB,MAAM,CAACQ,KAAK,CAAC,IAAI,EAAE;QAC1C;QAEAF,EAAE,CAACV,WAAW,CAACW,EAAE,CAAC;MACpB,CAAC,CAAC;MAEFH,KAAK,CAACR,WAAW,CAACU,EAAE,CAAC;MACrBhH,OAAO,CAACC,GAAG,CAAC,KAAK8G,KAAK,GAAG,CAAC,QAAQ,CAAC;IACrC,CAAC,CAAC;IAEFb,KAAK,CAACI,WAAW,CAACQ,KAAK,CAAC;IACxB9G,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;;IAErB;IACAD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEiG,KAAK,CAACiB,IAAI,CAACnE,MAAM,CAAC;IACvChD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEiG,KAAK,CAACiB,IAAI,CAAC,CAAC,CAAC,GAAGjB,KAAK,CAACiB,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,CAACpE,MAAM,GAAG,CAAC,CAAC;;IAEpE;IACAhD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMoH,WAAW,GAAG,IAAItH,WAAW,CAAC,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAEhC,IAAI;MACFD,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5BoH,WAAW,CAACC,MAAM,CAACpB,KAAK,EAAEhB,YAAY,CAAC;MACvClF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B,CAAC,CAAC,OAAOsH,WAAW,EAAE;MACpBvH,OAAO,CAACe,KAAK,CAAC,eAAe,EAAEwG,WAAW,CAAC;MAC3C,MAAMA,WAAW;IACnB;;IAEA;IACA5D,QAAQ,CAAC0C,IAAI,CAACmB,WAAW,CAACtB,KAAK,CAAC;IAChClG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAEtB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDf,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;IACrChB,OAAO,CAACe,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACuD,KAAK,CAAC;;IAEnC;IACA,IAAI;MACFtE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;MAE3B;MACA,IAAIwH,UAAU,GAAG,EAAE;;MAEnB;MACAA,UAAU,IAAI5C,OAAO,CAAC6C,GAAG,CAAChB,MAAM,IAAI,IAAIA,MAAM,CAACG,IAAI,GAAG,CAAC,CAACxG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;;MAExE;MACAsE,IAAI,CAAC8B,OAAO,CAACpB,GAAG,IAAI;QAClB,MAAMsC,OAAO,GAAG9C,OAAO,CAAC6C,GAAG,CAAChB,MAAM,IAAI;UACpC,MAAMkB,KAAK,GAAGvC,GAAG,CAACqB,MAAM,CAACQ,KAAK,CAAC,IAAI,EAAE;UACrC;UACA,IAAIU,KAAK,CAAChG,QAAQ,CAAC,GAAG,CAAC,IAAIgG,KAAK,CAAChG,QAAQ,CAAC,GAAG,CAAC,IAAIgG,KAAK,CAAChG,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtE,OAAO,IAAIgG,KAAK,CAAC7C,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG;UACzC;UACA,OAAO,IAAI6C,KAAK,GAAG;QACrB,CAAC,CAAC;QACFH,UAAU,IAAIE,OAAO,CAACtH,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI;MACxC,CAAC,CAAC;;MAEF;MACA,MAAMkC,IAAI,GAAG,IAAIsF,IAAI,CAAC,CAACJ,UAAU,CAAC,EAAE;QAAEhF,IAAI,EAAE;MAA0B,CAAC,CAAC;;MAExE;MACA,MAAMqF,IAAI,GAAGnE,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxC,MAAM1C,GAAG,GAAG6G,GAAG,CAACC,eAAe,CAACzF,IAAI,CAAC;MACrCuF,IAAI,CAACG,YAAY,CAAC,MAAM,EAAE/G,GAAG,CAAC;MAC9B4G,IAAI,CAACG,YAAY,CAAC,UAAU,EAAE,GAAGrD,QAAQ,IAAI,IAAI/C,IAAI,CAAC,CAAC,CAACoD,WAAW,CAAC,CAAC,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACb,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC;MACnH4D,IAAI,CAAC3B,KAAK,CAAC+B,UAAU,GAAG,QAAQ;MAChCvE,QAAQ,CAAC0C,IAAI,CAACC,WAAW,CAACwB,IAAI,CAAC;;MAE/B;MACAA,IAAI,CAACK,KAAK,CAAC,CAAC;;MAEZ;MACAxE,QAAQ,CAAC0C,IAAI,CAACmB,WAAW,CAACM,IAAI,CAAC;MAC/BC,GAAG,CAACK,eAAe,CAAClH,GAAG,CAAC;MAExB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOmH,QAAQ,EAAE;MACjBrI,OAAO,CAACe,KAAK,CAAC,WAAW,EAAEsH,QAAQ,CAAC;MACpC,OAAO,KAAK;IACd;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAAC3D,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE0D,SAAS,GAAG,IAAI,KAAK;EAC1E,IAAI,CAAC5D,IAAI,IAAIA,IAAI,CAAC3B,MAAM,KAAK,CAAC,EAAE;IAC9BhD,OAAO,CAACe,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAO,KAAK;EACd;;EAEA;EACA6D,QAAQ,GAAGA,QAAQ,CAACG,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;EACjD,MAAMC,SAAS,GAAG,IAAInD,IAAI,CAAC,CAAC,CAACoD,WAAW,CAAC,CAAC,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACb,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjFlE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE0E,IAAI,CAAC3B,MAAM,CAAC;EACzChD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEsI,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;EAC9C,IAAIA,SAAS,EAAE;IACbvI,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,MAAM,CAACC,IAAI,CAACmI,SAAS,CAAC,CAACvF,MAAM,CAAC;EACvD;;EAEA;EACA,IAAI;IACFhD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;IAE3B;IACA,MAAMuI,EAAE,GAAG1I,IAAI,CAAC2I,KAAK,CAACC,QAAQ,CAAC,CAAC;IAChC1I,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;;IAEtB;IACA,IAAI0I,YAAY,GAAG,EAAE;;IAErB;IACA,IAAIJ,SAAS,IAAIpI,MAAM,CAACC,IAAI,CAACmI,SAAS,CAAC,CAACvF,MAAM,GAAG,CAAC,EAAE;MAClD2F,YAAY,GAAGhE,IAAI,CAAC+C,GAAG,CAAC,CAACrC,GAAG,EAAE0B,KAAK,KAAK;QACtC,MAAM6B,MAAM,GAAG;UAAC,GAAGvD;QAAG,CAAC;;QAEvB;QACA,IAAIkD,SAAS,CAACxB,KAAK,CAAC,EAAE;UACpB;UACA,IAAIwB,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAIwB,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC7F,GAAG,EAAE;YAClD0H,MAAM,CAAC,OAAO,CAAC,GAAGL,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC7F,GAAG;UAC3C;UACA,IAAIqH,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,IAAIwB,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC7F,GAAG,EAAE;YAClD0H,MAAM,CAAC,OAAO,CAAC,GAAGL,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC7F,GAAG;UAC3C;QACF;QAEA,OAAO0H,MAAM;MACf,CAAC,CAAC;IACJ,CAAC,MAAM;MACLD,YAAY,GAAGhE,IAAI;IACrB;IAEA3E,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;IAE7B;IACA,MAAM4I,EAAE,GAAG/I,IAAI,CAAC2I,KAAK,CAACK,aAAa,CAACH,YAAY,CAAC;IAEjD3I,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;;IAEtB;IACA,MAAM8I,SAAS,GAAGlE,OAAO,CAAC6C,GAAG,CAAC,OAAO;MAAEsB,GAAG,EAAE;IAAG,CAAC,CAAC,CAAC;IAClDH,EAAE,CAAC,OAAO,CAAC,GAAGE,SAAS;;IAEvB;IACAjJ,IAAI,CAAC2I,KAAK,CAACQ,iBAAiB,CAACT,EAAE,EAAEK,EAAE,EAAE,QAAQ,CAAC;IAC9C7I,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;IAEzB;IACA,MAAMiJ,aAAa,GAAG,GAAGtE,QAAQ,IAAII,SAAS,OAAO;IACrDhF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEiJ,aAAa,CAAC;;IAE1C;IACAlJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMkJ,KAAK,GAAGrJ,IAAI,CAACsJ,KAAK,CAACZ,EAAE,EAAE;MAAEa,QAAQ,EAAE,MAAM;MAAE5G,IAAI,EAAE;IAAQ,CAAC,CAAC;IACjEzC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEkJ,KAAK,CAACnG,MAAM,EAAE,IAAI,CAAC;;IAElD;IACA,MAAMT,IAAI,GAAG,IAAIsF,IAAI,CAAC,CAACsB,KAAK,CAAC,EAAE;MAC7B1G,IAAI,EAAE;IACR,CAAC,CAAC;IACFzC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEsC,IAAI,CAACC,IAAI,EAAE,IAAI,CAAC;;IAE5C;IACA,MAAMtB,GAAG,GAAG6G,GAAG,CAACC,eAAe,CAACzF,IAAI,CAAC;IACrCvC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEiB,GAAG,CAACgD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;IAErD,MAAM4D,IAAI,GAAGnE,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCkE,IAAI,CAACwB,IAAI,GAAGpI,GAAG;IACf4G,IAAI,CAACyB,QAAQ,GAAGL,aAAa;IAC7BlJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;IAE9B;IACA0D,QAAQ,CAAC0C,IAAI,CAACC,WAAW,CAACwB,IAAI,CAAC;IAC/BA,IAAI,CAACK,KAAK,CAAC,CAAC;IACZxE,QAAQ,CAAC0C,IAAI,CAACmB,WAAW,CAACM,IAAI,CAAC;IAC/BC,GAAG,CAACK,eAAe,CAAClH,GAAG,CAAC;IAExBlB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvCf,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB;IACAuJ,WAAW,CAAC7E,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IACpC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2E,WAAW,GAAGA,CAAC7E,IAAI,EAAEC,QAAQ,EAAEC,OAAO,KAAK;EACtD;EACA,MAAMG,SAAS,GAAG,IAAInD,IAAI,CAAC,CAAC,CAACoD,WAAW,CAAC,CAAC,CAACF,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACb,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjF,MAAMuF,WAAW,GAAG,GAAG7E,QAAQ,IAAII,SAAS,MAAM;;EAElD;EACA,IAAIyC,UAAU,GAAG,QAAQ,CAAC,CAAC;;EAE3B;EACA,MAAMjB,SAAS,GAAG3B,OAAO,CAAC6C,GAAG,CAACgC,CAAC,IAAI,IAAIA,CAAC,CAACC,KAAK,GAAG,CAAC,CAACtJ,IAAI,CAAC,GAAG,CAAC;EAC5DoH,UAAU,IAAIjB,SAAS,GAAG,MAAM;;EAEhC;EACA7B,IAAI,CAAC8B,OAAO,CAACmD,IAAI,IAAI;IACnB,MAAMvE,GAAG,GAAGR,OAAO,CAAC6C,GAAG,CAAChB,MAAM,IAAI;MAChC,MAAMkB,KAAK,GAAGgC,IAAI,CAAClD,MAAM,CAACQ,KAAK,CAAC;;MAEhC;MACA,IAAIU,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKiC,SAAS,EAAE;QACzC,OAAO,EAAE;MACX;;MAEA;MACA,IAAInD,MAAM,CAACjE,IAAI,KAAK,QAAQ,IAAI,OAAOmF,KAAK,KAAK,QAAQ,EAAE;QACzD,OAAOA,KAAK;MACd;;MAEA;MACA,IAAIkC,SAAS,GAAGC,MAAM,CAACnC,KAAK,CAAC;MAC7B,IAAIkC,SAAS,CAAClI,QAAQ,CAAC,GAAG,CAAC,IAAIkI,SAAS,CAAClI,QAAQ,CAAC,GAAG,CAAC,IAAIkI,SAAS,CAAClI,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClFkI,SAAS,GAAGA,SAAS,CAAC/E,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3C+E,SAAS,GAAG,IAAIA,SAAS,GAAG,CAAC,CAAC;MAChC;MAEA,OAAOA,SAAS;IAClB,CAAC,CAAC,CAACzJ,IAAI,CAAC,GAAG,CAAC;IAEZoH,UAAU,IAAIpC,GAAG,GAAG,MAAM;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAM9C,IAAI,GAAG,IAAIsF,IAAI,CAAC,CAACJ,UAAU,CAAC,EAAE;IAAEhF,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxE,MAAMvB,GAAG,GAAG6G,GAAG,CAACC,eAAe,CAACzF,IAAI,CAAC;EACrC,MAAMuF,IAAI,GAAGnE,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCkE,IAAI,CAACG,YAAY,CAAC,MAAM,EAAE/G,GAAG,CAAC;EAC9B4G,IAAI,CAACG,YAAY,CAAC,UAAU,EAAEwB,WAAW,CAAC;EAC1C3B,IAAI,CAAC3B,KAAK,CAAC+B,UAAU,GAAG,QAAQ;EAChCvE,QAAQ,CAAC0C,IAAI,CAACC,WAAW,CAACwB,IAAI,CAAC;EAC/BA,IAAI,CAACK,KAAK,CAAC,CAAC;EACZxE,QAAQ,CAAC0C,IAAI,CAACmB,WAAW,CAACM,IAAI,CAAC;EAC/BC,GAAG,CAACK,eAAe,CAAClH,GAAG,CAAC;EAExBlB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM+J,sBAAsB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EAChE,MAAM3B,SAAS,GAAG,CAAC,CAAC;EAEpB,IAAI;IACFvI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEgK,OAAO,CAACjH,MAAM,CAAC;IAC1ChD,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEiK,OAAO,CAAC;;IAE9B;IACAD,OAAO,CAACxD,OAAO,CAAC,CAACnB,MAAM,EAAEyB,KAAK,KAAK;MACjCwB,SAAS,CAACxB,KAAK,CAAC,GAAG;QACjBoD,YAAY,EAAE,EAAE;QAChBC,WAAW,EAAE;MACf,CAAC;;MAED;MACA,IAAI9E,MAAM,CAACG,iBAAiB,EAAE;QAC5BzF,OAAO,CAACC,GAAG,CAAC,MAAM8G,KAAK,WAAW,EAAEzB,MAAM,CAACG,iBAAiB,CAAC;QAE7D,IAAI4E,WAAW,GAAG,EAAE;QACpB,IAAI;UACF;UACA,IAAI,OAAO/E,MAAM,CAACG,iBAAiB,KAAK,QAAQ,IAAIH,MAAM,CAACG,iBAAiB,CAAC/E,UAAU,CAAC,GAAG,CAAC,EAAE;YAC5F2J,WAAW,GAAGxJ,IAAI,CAACC,KAAK,CAACwE,MAAM,CAACG,iBAAiB,CAAC;YAClDzF,OAAO,CAACC,GAAG,CAAC,MAAM8G,KAAK,eAAe,EAAEsD,WAAW,CAAC;UACtD,CAAC,MAAM;YACLA,WAAW,GAAG,CAAC/E,MAAM,CAACG,iBAAiB,CAAC;UAC1C;QACF,CAAC,CAAC,OAAO5C,CAAC,EAAE;UACV7C,OAAO,CAACe,KAAK,CAAC,cAAc,EAAE8B,CAAC,CAAC;UAChCwH,WAAW,GAAG,CAAC/E,MAAM,CAACG,iBAAiB,CAAC;QAC1C;;QAEA;QACA8C,SAAS,CAACxB,KAAK,CAAC,CAACoD,YAAY,GAAGE,WAAW,CAAC3C,GAAG,CAACnH,IAAI,IAAI;UACtD;UACA,MAAM+J,OAAO,GAAGP,MAAM,CAACxJ,IAAI,CAAC;UAC5B;UACA,IAAI+J,OAAO,CAAC5J,UAAU,CAAC,SAAS,CAAC,IAAI4J,OAAO,CAAC5J,UAAU,CAAC,UAAU,CAAC,EAAE;YACnE,OAAO4J,OAAO;UAChB;UACA;UACA,OAAO,GAAGJ,OAAO,GAAGI,OAAO,EAAE;QAC/B,CAAC,CAAC;QAEFtK,OAAO,CAACC,GAAG,CAAC,MAAM8G,KAAK,eAAe,EAAEwB,SAAS,CAACxB,KAAK,CAAC,CAACoD,YAAY,CAAC;MACxE;;MAEA;MACA,IAAI7E,MAAM,CAACQ,gBAAgB,EAAE;QAC3B9F,OAAO,CAACC,GAAG,CAAC,MAAM8G,KAAK,WAAW,EAAEzB,MAAM,CAACQ,gBAAgB,CAAC;QAE5D,IAAIyE,UAAU,GAAG,EAAE;QACnB,IAAI;UACF;UACA,IAAI,OAAOjF,MAAM,CAACQ,gBAAgB,KAAK,QAAQ,IAAIR,MAAM,CAACQ,gBAAgB,CAACpF,UAAU,CAAC,GAAG,CAAC,EAAE;YAC1F6J,UAAU,GAAG1J,IAAI,CAACC,KAAK,CAACwE,MAAM,CAACQ,gBAAgB,CAAC;YAChD9F,OAAO,CAACC,GAAG,CAAC,MAAM8G,KAAK,eAAe,EAAEwD,UAAU,CAAC;UACrD,CAAC,MAAM;YACLA,UAAU,GAAG,CAACjF,MAAM,CAACQ,gBAAgB,CAAC;UACxC;QACF,CAAC,CAAC,OAAOjD,CAAC,EAAE;UACV7C,OAAO,CAACe,KAAK,CAAC,cAAc,EAAE8B,CAAC,CAAC;UAChC0H,UAAU,GAAG,CAACjF,MAAM,CAACQ,gBAAgB,CAAC;QACxC;;QAEA;QACAyC,SAAS,CAACxB,KAAK,CAAC,CAACqD,WAAW,GAAGG,UAAU,CAAC7C,GAAG,CAACnH,IAAI,IAAI;UACpD;UACA,MAAM+J,OAAO,GAAGP,MAAM,CAACxJ,IAAI,CAAC;UAC5B;UACA,IAAI+J,OAAO,CAAC5J,UAAU,CAAC,SAAS,CAAC,IAAI4J,OAAO,CAAC5J,UAAU,CAAC,UAAU,CAAC,EAAE;YACnE,OAAO4J,OAAO;UAChB;UACA;UACA,OAAO,GAAGJ,OAAO,GAAGI,OAAO,EAAE;QAC/B,CAAC,CAAC;QAEFtK,OAAO,CAACC,GAAG,CAAC,MAAM8G,KAAK,eAAe,EAAEwB,SAAS,CAACxB,KAAK,CAAC,CAACqD,WAAW,CAAC;MACvE;IACF,CAAC,CAAC;IAEFpK,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,MAAM,CAACC,IAAI,CAACmI,SAAS,CAAC,CAACvF,MAAM,CAAC;IAC5D,OAAOuF,SAAS;EAClB,CAAC,CAAC,OAAOxH,KAAK,EAAE;IACdf,OAAO,CAACe,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,CAAC,CAAC;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}