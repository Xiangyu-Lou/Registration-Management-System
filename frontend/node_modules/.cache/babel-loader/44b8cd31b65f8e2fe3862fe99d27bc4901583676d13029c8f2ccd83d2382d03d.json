{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n// 解析照片路径\nconst parsePhotoPath = path => {\n  console.log('【调试】开始解析照片路径:', path);\n  console.log('【调试】路径类型:', typeof path);\n  if (!path) {\n    console.log('【调试】照片路径为空');\n    return [];\n  }\n\n  // 如果path已经是数组，直接返回\n  if (Array.isArray(path)) {\n    console.log('【调试】照片路径已经是数组，长度:', path.length);\n    return path;\n  }\n  try {\n    // 尝试解析为JSON\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\n      console.log('【调试】尝试将照片路径解析为JSON');\n      const parsed = JSON.parse(path);\n      console.log('【调试】JSON解析成功，结果:', parsed);\n      return parsed;\n    }\n\n    // 如果不是JSON格式，则将其作为单个路径返回\n    console.log('【调试】照片路径不是JSON格式，作为单个路径返回');\n    return [path];\n  } catch (error) {\n    console.error('【调试】解析照片路径失败:', error);\n    console.error('【调试】错误详情:', error.message);\n    // 如果解析失败，则将原始路径作为单个元素返回\n    return [path];\n  }\n};\n\n// 将图片URL转换为Base64\nconst imageUrlToBase64 = url => {\n  console.log('【调试】开始转换图片URL到Base64:', url);\n  console.log('【调试】URL类型:', typeof url);\n  console.log('【调试】URL长度:', url ? url.length : 0);\n\n  // 检查URL是否有效\n  if (!url || typeof url !== 'string') {\n    console.error('【调试】无效的图片URL:', url);\n    return Promise.reject(new Error('Invalid image URL'));\n  }\n\n  // 检查URL是否为相对路径，如果是，添加origin\n  let fullUrl = url;\n  if (url.startsWith('/')) {\n    fullUrl = window.location.origin + url;\n    console.log('【调试】URL是相对路径，转换为完整URL:', fullUrl);\n    console.log('【调试】window.location.origin:', window.location.origin);\n  } else {\n    console.log('【调试】URL已经是完整路径');\n  }\n\n  // 添加时间戳参数，避免缓存问题\n  const timestamp = new Date().getTime();\n  fullUrl = fullUrl.includes('?') ? `${fullUrl}&_t=${timestamp}` : `${fullUrl}?_t=${timestamp}`;\n  console.log('【调试】添加时间戳后的URL:', fullUrl);\n  return new Promise((resolve, reject) => {\n    // 尝试直接使用fetch API获取图片，可以更好地处理跨域问题\n    console.log('【调试】使用fetch API获取图片:', fullUrl);\n    fetch(fullUrl).then(response => {\n      console.log('【调试】fetch响应状态:', response.status, response.statusText);\n      console.log('【调试】响应头:', JSON.stringify([...response.headers].reduce((obj, [key, val]) => {\n        obj[key] = val;\n        return obj;\n      }, {})));\n      if (!response.ok) {\n        console.error('【调试】fetch响应不成功');\n        throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\n      }\n      return response.blob();\n    }).then(blob => {\n      console.log('【调试】图片获取成功，大小:', blob.size, '字节');\n      console.log('【调试】图片类型:', blob.type);\n      const reader = new FileReader();\n      console.log('【调试】创建FileReader对象');\n      reader.onload = () => {\n        const base64data = reader.result;\n        console.log('【调试】图片转换为Base64成功，长度:', base64data.length);\n        console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\n        resolve(base64data);\n      };\n      reader.onerror = error => {\n        console.error('【调试】图片转换为Base64失败:', error);\n        reject(error);\n      };\n      console.log('【调试】开始读取Blob数据');\n      reader.readAsDataURL(blob);\n    }).catch(error => {\n      console.error('【调试】获取图片失败，尝试使用Image对象:', error);\n      console.error('【调试】错误详情:', error.message);\n      console.error('【调试】错误堆栈:', error.stack);\n\n      // 如果fetch失败，回退到使用Image对象\n      console.log('【调试】创建Image对象');\n      const img = new Image();\n      img.crossOrigin = 'anonymous'; // 尝试解决跨域问题\n      console.log('【调试】设置crossOrigin为anonymous');\n      img.onload = () => {\n        console.log('【调试】图片加载成功');\n        console.log('【调试】图片尺寸:', img.width, 'x', img.height);\n        console.log('【调试】图片naturalSize:', img.naturalWidth, 'x', img.naturalHeight);\n        console.log('【调试】图片complete状态:', img.complete);\n        try {\n          console.log('【调试】创建canvas元素');\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width || img.naturalWidth;\n          canvas.height = img.height || img.naturalHeight;\n          console.log('【调试】canvas尺寸:', canvas.width, 'x', canvas.height);\n          const ctx = canvas.getContext('2d');\n          console.log('【调试】获取canvas 2d上下文');\n          console.log('【调试】开始绘制图片到canvas');\n          ctx.drawImage(img, 0, 0);\n          console.log('【调试】图片绘制完成');\n\n          // 尝试不同的格式\n          let base64data;\n          try {\n            console.log('【调试】尝试转换为JPEG格式');\n            base64data = canvas.toDataURL('image/jpeg', 0.8);\n            console.log('【调试】JPEG格式转换成功，数据长度:', base64data.length);\n            console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\n          } catch (jpegError) {\n            console.error('【调试】JPEG格式转换失败，尝试PNG:', jpegError);\n            console.error('【调试】错误详情:', jpegError.message);\n            try {\n              console.log('【调试】尝试转换为PNG格式');\n              base64data = canvas.toDataURL('image/png');\n              console.log('【调试】PNG格式转换成功，数据长度:', base64data.length);\n              console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\n            } catch (pngError) {\n              console.error('【调试】PNG格式也转换失败:', pngError);\n              console.error('【调试】错误详情:', pngError.message);\n              throw pngError;\n            }\n          }\n          console.log('【调试】图片转换为Base64成功，长度:', base64data.length);\n          resolve(base64data);\n        } catch (canvasError) {\n          console.error('【调试】Canvas处理图片失败:', canvasError);\n          console.error('【调试】错误详情:', canvasError.message);\n          console.error('【调试】错误堆栈:', canvasError.stack);\n          reject(canvasError);\n        }\n      };\n      img.onerror = imgError => {\n        console.error('【调试】图片加载失败:', imgError);\n        console.error('【调试】URL:', fullUrl);\n        console.error('【调试】错误类型:', typeof imgError);\n        console.error('【调试】错误详情:', imgError ? imgError.message : 'Unknown error');\n        reject(new Error(`Failed to load image: ${imgError}`));\n      };\n\n      // 设置超时\n      console.log('【调试】设置图片加载超时(10秒)');\n      const timeout = setTimeout(() => {\n        console.error('【调试】图片加载超时');\n        img.src = ''; // 取消加载\n        reject(new Error('Image loading timeout'));\n      }, 10000); // 10秒超时\n\n      img.onload = () => {\n        console.log('【调试】图片加载成功，清除超时');\n        clearTimeout(timeout);\n        console.log('【调试】图片尺寸:', img.width, 'x', img.height);\n        console.log('【调试】图片naturalSize:', img.naturalWidth, 'x', img.naturalHeight);\n        console.log('【调试】图片complete状态:', img.complete);\n        try {\n          console.log('【调试】创建canvas元素');\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width || img.naturalWidth;\n          canvas.height = img.height || img.naturalHeight;\n          if (canvas.width === 0 || canvas.height === 0) {\n            console.error('【调试】canvas尺寸无效:', canvas.width, 'x', canvas.height);\n            console.log('【调试】尝试使用固定尺寸');\n            canvas.width = 300;\n            canvas.height = 300;\n          }\n          console.log('【调试】canvas尺寸:', canvas.width, 'x', canvas.height);\n          const ctx = canvas.getContext('2d');\n          console.log('【调试】获取canvas 2d上下文');\n          console.log('【调试】开始绘制图片到canvas');\n          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n          console.log('【调试】图片绘制完成');\n\n          // 尝试不同的格式\n          let base64data;\n          try {\n            console.log('【调试】尝试转换为JPEG格式');\n            base64data = canvas.toDataURL('image/jpeg', 0.8);\n            console.log('【调试】JPEG格式转换成功，数据长度:', base64data.length);\n            console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\n          } catch (jpegError) {\n            console.error('【调试】JPEG格式转换失败，尝试PNG:', jpegError);\n            console.error('【调试】错误详情:', jpegError.message);\n            try {\n              console.log('【调试】尝试转换为PNG格式');\n              base64data = canvas.toDataURL('image/png');\n              console.log('【调试】PNG格式转换成功，数据长度:', base64data.length);\n              console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\n            } catch (pngError) {\n              console.error('【调试】PNG格式也转换失败:', pngError);\n              console.error('【调试】错误详情:', pngError.message);\n              throw pngError;\n            }\n          }\n          console.log('【调试】图片转换为Base64成功，长度:', base64data.length);\n          resolve(base64data);\n        } catch (canvasError) {\n          console.error('【调试】Canvas处理图片失败:', canvasError);\n          console.error('【调试】错误详情:', canvasError.message);\n          console.error('【调试】错误堆栈:', canvasError.stack);\n          reject(canvasError);\n        }\n      };\n\n      // 设置图片源\n      console.log('【调试】设置图片src:', fullUrl);\n      img.src = fullUrl;\n    });\n  });\n};\n\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\n  console.log('=== 【调试】exportToExcelWithImages 函数被调用 ===');\n  console.log('【调试】数据条数:', data.length);\n  console.log('【调试】headers:', JSON.stringify(headers));\n  if (!data || data.length === 0) {\n    console.error('【调试】导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('【调试】使用js-table2excel导出Excel，开始处理图片...');\n    console.log('【调试】第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n    console.log('【调试】导出文件名:', fullFileName);\n\n    // 预处理图片，确保所有图片都加载完成\n    const processedData = [];\n\n    // 逐行处理数据\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n      console.log(`【调试】处理第 ${rowIndex + 1}/${data.length} 条记录...`);\n      const row = data[rowIndex];\n      const record = row['__original'] || {};\n      console.log(`【调试】记录ID: ${record.id || 'unknown'}`);\n      console.log(`【调试】记录数据:`, JSON.stringify(record).substring(0, 200) + '...');\n\n      // 处理清理前照片\n      let beforePhotoData = null;\n      if (record.photo_path_before) {\n        console.log(`【调试】记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_before);\n        const photoPaths = parsePhotoPath(record.photo_path_before);\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`【调试】选择第一张照片:`, firstPath);\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\n            }\n            console.log(`【调试】记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\n            try {\n              console.log(`【调试】开始转换清理前照片...`);\n              beforePhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`【调试】记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\n              console.log(`【调试】Base64数据前50个字符:`, beforePhotoData ? beforePhotoData.substring(0, 50) + '...' : 'null');\n            } catch (error) {\n              console.error(`【调试】记录 ${rowIndex} 清理前照片转换失败:`, error);\n              console.error('【调试】错误详情:', error.message);\n              console.error('【调试】错误堆栈:', error.stack);\n            }\n          } else {\n            console.error(`【调试】记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\n          }\n        } else {\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理前照片路径`);\n        }\n      } else {\n        console.log(`【调试】记录 ${rowIndex} 没有清理前照片`);\n      }\n\n      // 处理清理后照片\n      let afterPhotoData = null;\n      if (record.photo_path_after) {\n        console.log(`【调试】记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_after);\n        const photoPaths = parsePhotoPath(record.photo_path_after);\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`【调试】选择第一张照片:`, firstPath);\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\n            }\n            console.log(`【调试】记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\n            try {\n              console.log(`【调试】开始转换清理后照片...`);\n              afterPhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`【调试】记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\n              console.log(`【调试】Base64数据前50个字符:`, afterPhotoData ? afterPhotoData.substring(0, 50) + '...' : 'null');\n            } catch (error) {\n              console.error(`【调试】记录 ${rowIndex} 清理后照片转换失败:`, error);\n              console.error('【调试】错误详情:', error.message);\n              console.error('【调试】错误堆栈:', error.stack);\n            }\n          } else {\n            console.error(`【调试】记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\n          }\n        } else {\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理后照片路径`);\n        }\n      } else {\n        console.log(`【调试】记录 ${rowIndex} 没有清理后照片`);\n      }\n\n      // 保存处理后的数据\n      processedData.push({\n        ...row,\n        __beforePhotoData: beforePhotoData,\n        __afterPhotoData: afterPhotoData\n      });\n      console.log(`【调试】记录 ${rowIndex} 处理完成，是否有照片数据:`, {\n        beforePhoto: !!beforePhotoData,\n        afterPhoto: !!afterPhotoData\n      });\n    }\n    console.log('【调试】所有图片处理完成，开始创建Excel...');\n    console.log('【调试】处理后的数据条数:', processedData.length);\n\n    // 检查是否有任何图片数据\n    let hasImageData = false;\n    for (const row of processedData) {\n      if (row.__beforePhotoData || row.__afterPhotoData) {\n        hasImageData = true;\n        console.log('【调试】找到图片数据，将使用图片导出模式');\n        break;\n      }\n    }\n    if (!hasImageData) {\n      console.warn('【调试】没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\n    }\n\n    // 创建一个临时表格元素\n    const table = document.createElement('table');\n    table.style.display = 'none';\n    document.body.appendChild(table);\n    console.log('【调试】创建临时表格元素');\n\n    // 创建表头\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header => {\n      const th = document.createElement('th');\n      th.textContent = header.text;\n      headerRow.appendChild(th);\n      console.log(`【调试】添加表头: ${header.text}`);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n    console.log('【调试】表头创建完成');\n\n    // 创建表体\n    const tbody = document.createElement('tbody');\n\n    // 添加数据行\n    processedData.forEach((row, index) => {\n      console.log(`【调试】创建第 ${index + 1}/${processedData.length} 行...`);\n      const tr = document.createElement('tr');\n      headers.forEach(header => {\n        const td = document.createElement('td');\n\n        // 处理清理前照片列\n        if (header.field === '清理前照片') {\n          if (row.__beforePhotoData) {\n            console.log(`【调试】添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__beforePhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            img.alt = '清理前照片';\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__beforePhotoData.length);\n\n            // 确保图片已加载\n            if (!img.complete) {\n              console.log('【调试】图片尚未加载完成，添加onload事件');\n              img.onload = () => {\n                console.log(`【调试】第 ${index + 1} 行清理前照片加载完成`);\n              };\n              img.onerror = error => {\n                console.error(`【调试】第 ${index + 1} 行清理前照片加载失败:`, error);\n                td.textContent = '图片加载失败';\n              };\n            } else {\n              console.log(`【调试】第 ${index + 1} 行清理前照片已加载完成`);\n            }\n            td.appendChild(img);\n            console.log(`【调试】第 ${index + 1} 行清理前照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`【调试】第 ${index + 1} 行没有清理前照片`);\n          }\n        }\n        // 处理清理后照片列 \n        else if (header.field === '清理后照片') {\n          if (row.__afterPhotoData) {\n            console.log(`【调试】添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__afterPhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            img.alt = '清理后照片';\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__afterPhotoData.length);\n\n            // 确保图片已加载\n            if (!img.complete) {\n              console.log('【调试】图片尚未加载完成，添加onload事件');\n              img.onload = () => {\n                console.log(`【调试】第 ${index + 1} 行清理后照片加载完成`);\n              };\n              img.onerror = error => {\n                console.error(`【调试】第 ${index + 1} 行清理后照片加载失败:`, error);\n                td.textContent = '图片加载失败';\n              };\n            } else {\n              console.log(`【调试】第 ${index + 1} 行清理后照片已加载完成`);\n            }\n            td.appendChild(img);\n            console.log(`【调试】第 ${index + 1} 行清理后照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`【调试】第 ${index + 1} 行没有清理后照片`);\n          }\n        } else {\n          // 普通文本列\n          td.textContent = row[header.field] || '';\n          console.log(`【调试】添加第 ${index + 1} 行 ${header.field} 列: ${row[header.field] || '(空)'}`);\n        }\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n      console.log(`【调试】第 ${index + 1} 行创建完成`);\n    });\n    table.appendChild(tbody);\n    console.log('【调试】表格创建完成');\n\n    // 检查表格内容\n    console.log('【调试】表格行数:', table.rows.length);\n    console.log('【调试】表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\n\n    // 使用js-table2excel导出\n    console.log('【调试】开始使用js-table2excel导出...');\n    const table2excel = new Table2Excel();\n    console.log('【调试】Table2Excel实例创建成功');\n\n    // 确保所有图片都已加载完成\n    console.log('【调试】检查表格中的图片...');\n    const imgElements = table.querySelectorAll('img');\n    console.log(`【调试】表格中共有 ${imgElements.length} 张图片`);\n\n    // 检查每个图片的状态\n    Array.from(imgElements).forEach((img, idx) => {\n      console.log(`【调试】图片 ${idx + 1} 状态:`, {\n        complete: img.complete,\n        naturalWidth: img.naturalWidth,\n        naturalHeight: img.naturalHeight,\n        src长度: img.src.length\n      });\n    });\n\n    // 如果没有图片，直接导出\n    if (imgElements.length === 0) {\n      console.log('【调试】表格中没有图片，直接导出');\n      try {\n        console.log('【调试】调用export方法...');\n        table2excel.export(table, fullFileName);\n        console.log('【调试】export方法调用成功');\n\n        // 导出完成后移除临时表格\n        document.body.removeChild(table);\n        console.log('【调试】临时表格已移除');\n        return true;\n      } catch (exportError) {\n        console.error('【调试】export方法调用失败:', exportError);\n        console.error('【调试】错误详情:', exportError.message);\n        console.error('【调试】错误堆栈:', exportError.stack);\n\n        // 导出完成后移除临时表格\n        document.body.removeChild(table);\n        console.log('【调试】临时表格已移除');\n        throw exportError;\n      }\n    } else {\n      // 等待所有图片加载完成\n      console.log('【调试】等待所有图片加载完成后再导出');\n\n      // 创建一个Promise数组，每个Promise对应一个图片的加载\n      const imgPromises = Array.from(imgElements).map((img, imgIndex) => {\n        return new Promise(resolve => {\n          if (img.complete) {\n            console.log(`【调试】图片 ${imgIndex + 1} 已加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\n            resolve();\n          } else {\n            console.log(`【调试】等待图片 ${imgIndex + 1} 加载...`);\n            img.onload = () => {\n              console.log(`【调试】图片 ${imgIndex + 1} 加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\n              resolve();\n            };\n            img.onerror = error => {\n              console.error(`【调试】图片 ${imgIndex + 1} 加载失败:`, error);\n              console.error('【调试】错误详情:', error ? error.message : 'Unknown error');\n              resolve(); // 即使失败也继续导出\n            };\n\n            // 添加超时处理\n            setTimeout(() => {\n              if (!img.complete) {\n                console.error(`【调试】图片 ${imgIndex + 1} 加载超时`);\n                resolve(); // 超时也继续导出\n              }\n            }, 5000); // 5秒超时\n          }\n        });\n      });\n\n      // 等待所有图片加载完成或超时\n      try {\n        await Promise.all(imgPromises);\n        console.log('【调试】所有图片加载完成或超时，开始导出');\n\n        // 再次检查图片状态\n        console.log('【调试】导出前最终检查图片状态:');\n        Array.from(imgElements).forEach((img, idx) => {\n          console.log(`【调试】图片 ${idx + 1} 最终状态:`, {\n            complete: img.complete,\n            naturalWidth: img.naturalWidth,\n            naturalHeight: img.naturalHeight,\n            src长度: img.src.length\n          });\n        });\n        try {\n          console.log('【调试】调用export方法...');\n          table2excel.export(table, fullFileName);\n          console.log('【调试】export方法调用成功');\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          return true;\n        } catch (exportError) {\n          console.error('【调试】export方法调用失败:', exportError);\n          console.error('【调试】错误详情:', exportError.message);\n          console.error('【调试】错误堆栈:', exportError.stack);\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          throw exportError;\n        }\n      } catch (imgLoadError) {\n        console.error('【调试】等待图片加载过程中发生错误:', imgLoadError);\n        console.error('【调试】错误详情:', imgLoadError.message);\n        console.error('【调试】错误堆栈:', imgLoadError.stack);\n        try {\n          console.log('【调试】尝试强制导出...');\n          table2excel.export(table, fullFileName);\n          console.log('【调试】强制导出成功');\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          return true;\n        } catch (forceExportError) {\n          console.error('【调试】强制导出失败:', forceExportError);\n          console.error('【调试】错误详情:', forceExportError.message);\n          console.error('【调试】错误堆栈:', forceExportError.stack);\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          throw forceExportError;\n        }\n      }\n    }\n  } catch (error) {\n    console.error('使用js-table2excel导出Excel失败:', error);\n    console.error('错误详情:', error.message);\n    console.error('错误堆栈:', error.stack);\n\n    // 尝试使用XLSX导出（不包含图片）\n    console.log('尝试使用XLSX导出（不包含图片）...');\n    try {\n      // 不要调用exportToExcel，直接在这里实现导出逻辑\n      console.log('创建工作簿...');\n      const wb = XLSX.utils.book_new();\n\n      // 准备数据\n      const exportRows = data.map(row => {\n        const exportRow = {};\n        headers.forEach(header => {\n          exportRow[header.text] = row[header.field] || '';\n        });\n        return exportRow;\n      });\n      console.log('创建工作表...');\n      const ws = XLSX.utils.json_to_sheet(exportRows);\n\n      // 添加工作表到工作簿\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n      // 处理文件名\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n      const fullFileName = `${fileName}_${timestamp}`;\n\n      // 导出\n      console.log('导出Excel文件...');\n      const excelData = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n\n      // 创建Blob\n      const blob = new Blob([excelData], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n\n      // 创建下载链接\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${fullFileName}.xlsx`;\n\n      // 触发下载\n      document.body.appendChild(a);\n      a.click();\n\n      // 清理\n      setTimeout(() => {\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }, 0);\n      console.log('XLSX导出成功（不包含图片）');\n      return true;\n    } catch (xlsxError) {\n      console.error('XLSX导出失败:', xlsxError);\n\n      // 最后尝试CSV导出\n      console.log('尝试CSV导出...');\n      return exportToCSV(data, fileName, headers);\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片链接\n    if (imageData && Object.keys(imageData).length > 0) {\n      enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n    } else {\n      enhancedData = data;\n    }\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\n      }\n    });\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","Table2Excel","console","log","version","Object","keys","join","parsePhotoPath","path","Array","isArray","length","startsWith","endsWith","parsed","JSON","parse","error","message","imageUrlToBase64","url","Promise","reject","Error","fullUrl","window","location","origin","timestamp","Date","getTime","includes","resolve","fetch","then","response","status","statusText","stringify","headers","reduce","obj","key","val","ok","blob","size","type","reader","FileReader","onload","base64data","result","substring","onerror","readAsDataURL","catch","stack","img","Image","crossOrigin","width","height","naturalWidth","naturalHeight","complete","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","jpegError","pngError","canvasError","imgError","timeout","setTimeout","src","clearTimeout","exportToExcelWithImages","data","fileName","replace","toISOString","fullFileName","processedData","rowIndex","row","record","id","beforePhotoData","photo_path_before","photoPaths","firstPath","imageUrl","afterPhotoData","photo_path_after","push","__beforePhotoData","__afterPhotoData","beforePhoto","afterPhoto","hasImageData","warn","table","style","display","body","appendChild","thead","headerRow","forEach","header","th","textContent","text","tbody","index","tr","td","field","alt","rows","cells","table2excel","imgElements","querySelectorAll","from","idx","src长度","export","removeChild","exportError","imgPromises","map","imgIndex","all","imgLoadError","forceExportError","wb","utils","book_new","exportRows","exportRow","ws","json_to_sheet","book_append_sheet","excelData","write","bookType","Blob","URL","createObjectURL","a","href","download","click","revokeObjectURL","xlsxError","exportToCSV","exportToExcel","imageData","enhancedData","newRow","colWidths","wch","excelFileName","wbout","link","csvFileName","csvContent","h","title","item","value","undefined","cellValue","String","setAttribute","visibility","prepareImageExportData","records","baseUrl","beforeImages","afterImages","beforePaths","e","pathStr","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n// 解析照片路径\r\nconst parsePhotoPath = (path) => {\r\n  console.log('【调试】开始解析照片路径:', path);\r\n  console.log('【调试】路径类型:', typeof path);\r\n  \r\n  if (!path) {\r\n    console.log('【调试】照片路径为空');\r\n    return [];\r\n  }\r\n  \r\n  // 如果path已经是数组，直接返回\r\n  if (Array.isArray(path)) {\r\n    console.log('【调试】照片路径已经是数组，长度:', path.length);\r\n    return path;\r\n  }\r\n  \r\n  try {\r\n    // 尝试解析为JSON\r\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\r\n      console.log('【调试】尝试将照片路径解析为JSON');\r\n      const parsed = JSON.parse(path);\r\n      console.log('【调试】JSON解析成功，结果:', parsed);\r\n      return parsed;\r\n    }\r\n    \r\n    // 如果不是JSON格式，则将其作为单个路径返回\r\n    console.log('【调试】照片路径不是JSON格式，作为单个路径返回');\r\n    return [path];\r\n  } catch (error) {\r\n    console.error('【调试】解析照片路径失败:', error);\r\n    console.error('【调试】错误详情:', error.message);\r\n    // 如果解析失败，则将原始路径作为单个元素返回\r\n    return [path];\r\n  }\r\n};\r\n\r\n// 将图片URL转换为Base64\r\nconst imageUrlToBase64 = (url) => {\r\n  console.log('【调试】开始转换图片URL到Base64:', url);\r\n  console.log('【调试】URL类型:', typeof url);\r\n  console.log('【调试】URL长度:', url ? url.length : 0);\r\n  \r\n  // 检查URL是否有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('【调试】无效的图片URL:', url);\r\n    return Promise.reject(new Error('Invalid image URL'));\r\n  }\r\n  \r\n  // 检查URL是否为相对路径，如果是，添加origin\r\n  let fullUrl = url;\r\n  if (url.startsWith('/')) {\r\n    fullUrl = window.location.origin + url;\r\n    console.log('【调试】URL是相对路径，转换为完整URL:', fullUrl);\r\n    console.log('【调试】window.location.origin:', window.location.origin);\r\n  } else {\r\n    console.log('【调试】URL已经是完整路径');\r\n  }\r\n  \r\n  // 添加时间戳参数，避免缓存问题\r\n  const timestamp = new Date().getTime();\r\n  fullUrl = fullUrl.includes('?') \r\n    ? `${fullUrl}&_t=${timestamp}` \r\n    : `${fullUrl}?_t=${timestamp}`;\r\n  console.log('【调试】添加时间戳后的URL:', fullUrl);\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    // 尝试直接使用fetch API获取图片，可以更好地处理跨域问题\r\n    console.log('【调试】使用fetch API获取图片:', fullUrl);\r\n    \r\n    fetch(fullUrl)\r\n      .then(response => {\r\n        console.log('【调试】fetch响应状态:', response.status, response.statusText);\r\n        console.log('【调试】响应头:', JSON.stringify([...response.headers].reduce((obj, [key, val]) => {\r\n          obj[key] = val;\r\n          return obj;\r\n        }, {})));\r\n        \r\n        if (!response.ok) {\r\n          console.error('【调试】fetch响应不成功');\r\n          throw new Error(`Failed to fetch image: ${response.status} ${response.statusText}`);\r\n        }\r\n        return response.blob();\r\n      })\r\n      .then(blob => {\r\n        console.log('【调试】图片获取成功，大小:', blob.size, '字节');\r\n        console.log('【调试】图片类型:', blob.type);\r\n        \r\n        const reader = new FileReader();\r\n        console.log('【调试】创建FileReader对象');\r\n        \r\n        reader.onload = () => {\r\n          const base64data = reader.result;\r\n          console.log('【调试】图片转换为Base64成功，长度:', base64data.length);\r\n          console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\r\n          resolve(base64data);\r\n        };\r\n        \r\n        reader.onerror = (error) => {\r\n          console.error('【调试】图片转换为Base64失败:', error);\r\n          reject(error);\r\n        };\r\n        \r\n        console.log('【调试】开始读取Blob数据');\r\n        reader.readAsDataURL(blob);\r\n      })\r\n      .catch(error => {\r\n        console.error('【调试】获取图片失败，尝试使用Image对象:', error);\r\n        console.error('【调试】错误详情:', error.message);\r\n        console.error('【调试】错误堆栈:', error.stack);\r\n        \r\n        // 如果fetch失败，回退到使用Image对象\r\n        console.log('【调试】创建Image对象');\r\n        const img = new Image();\r\n        img.crossOrigin = 'anonymous'; // 尝试解决跨域问题\r\n        console.log('【调试】设置crossOrigin为anonymous');\r\n        \r\n        img.onload = () => {\r\n          console.log('【调试】图片加载成功');\r\n          console.log('【调试】图片尺寸:', img.width, 'x', img.height);\r\n          console.log('【调试】图片naturalSize:', img.naturalWidth, 'x', img.naturalHeight);\r\n          console.log('【调试】图片complete状态:', img.complete);\r\n          \r\n          try {\r\n            console.log('【调试】创建canvas元素');\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width || img.naturalWidth;\r\n            canvas.height = img.height || img.naturalHeight;\r\n            \r\n            console.log('【调试】canvas尺寸:', canvas.width, 'x', canvas.height);\r\n            \r\n            const ctx = canvas.getContext('2d');\r\n            console.log('【调试】获取canvas 2d上下文');\r\n            \r\n            console.log('【调试】开始绘制图片到canvas');\r\n            ctx.drawImage(img, 0, 0);\r\n            console.log('【调试】图片绘制完成');\r\n            \r\n            // 尝试不同的格式\r\n            let base64data;\r\n            try {\r\n              console.log('【调试】尝试转换为JPEG格式');\r\n              base64data = canvas.toDataURL('image/jpeg', 0.8);\r\n              console.log('【调试】JPEG格式转换成功，数据长度:', base64data.length);\r\n              console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\r\n            } catch (jpegError) {\r\n              console.error('【调试】JPEG格式转换失败，尝试PNG:', jpegError);\r\n              console.error('【调试】错误详情:', jpegError.message);\r\n              \r\n              try {\r\n                console.log('【调试】尝试转换为PNG格式');\r\n                base64data = canvas.toDataURL('image/png');\r\n                console.log('【调试】PNG格式转换成功，数据长度:', base64data.length);\r\n                console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\r\n              } catch (pngError) {\r\n                console.error('【调试】PNG格式也转换失败:', pngError);\r\n                console.error('【调试】错误详情:', pngError.message);\r\n                throw pngError;\r\n              }\r\n            }\r\n            \r\n            console.log('【调试】图片转换为Base64成功，长度:', base64data.length);\r\n            resolve(base64data);\r\n          } catch (canvasError) {\r\n            console.error('【调试】Canvas处理图片失败:', canvasError);\r\n            console.error('【调试】错误详情:', canvasError.message);\r\n            console.error('【调试】错误堆栈:', canvasError.stack);\r\n            reject(canvasError);\r\n          }\r\n        };\r\n        \r\n        img.onerror = (imgError) => {\r\n          console.error('【调试】图片加载失败:', imgError);\r\n          console.error('【调试】URL:', fullUrl);\r\n          console.error('【调试】错误类型:', typeof imgError);\r\n          console.error('【调试】错误详情:', imgError ? imgError.message : 'Unknown error');\r\n          reject(new Error(`Failed to load image: ${imgError}`));\r\n        };\r\n        \r\n        // 设置超时\r\n        console.log('【调试】设置图片加载超时(10秒)');\r\n        const timeout = setTimeout(() => {\r\n          console.error('【调试】图片加载超时');\r\n          img.src = ''; // 取消加载\r\n          reject(new Error('Image loading timeout'));\r\n        }, 10000); // 10秒超时\r\n        \r\n        img.onload = () => {\r\n          console.log('【调试】图片加载成功，清除超时');\r\n          clearTimeout(timeout);\r\n          \r\n          console.log('【调试】图片尺寸:', img.width, 'x', img.height);\r\n          console.log('【调试】图片naturalSize:', img.naturalWidth, 'x', img.naturalHeight);\r\n          console.log('【调试】图片complete状态:', img.complete);\r\n          \r\n          try {\r\n            console.log('【调试】创建canvas元素');\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width || img.naturalWidth;\r\n            canvas.height = img.height || img.naturalHeight;\r\n            \r\n            if (canvas.width === 0 || canvas.height === 0) {\r\n              console.error('【调试】canvas尺寸无效:', canvas.width, 'x', canvas.height);\r\n              console.log('【调试】尝试使用固定尺寸');\r\n              canvas.width = 300;\r\n              canvas.height = 300;\r\n            }\r\n            \r\n            console.log('【调试】canvas尺寸:', canvas.width, 'x', canvas.height);\r\n            \r\n            const ctx = canvas.getContext('2d');\r\n            console.log('【调试】获取canvas 2d上下文');\r\n            \r\n            console.log('【调试】开始绘制图片到canvas');\r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            console.log('【调试】图片绘制完成');\r\n            \r\n            // 尝试不同的格式\r\n            let base64data;\r\n            try {\r\n              console.log('【调试】尝试转换为JPEG格式');\r\n              base64data = canvas.toDataURL('image/jpeg', 0.8);\r\n              console.log('【调试】JPEG格式转换成功，数据长度:', base64data.length);\r\n              console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\r\n            } catch (jpegError) {\r\n              console.error('【调试】JPEG格式转换失败，尝试PNG:', jpegError);\r\n              console.error('【调试】错误详情:', jpegError.message);\r\n              \r\n              try {\r\n                console.log('【调试】尝试转换为PNG格式');\r\n                base64data = canvas.toDataURL('image/png');\r\n                console.log('【调试】PNG格式转换成功，数据长度:', base64data.length);\r\n                console.log('【调试】Base64数据前50个字符:', base64data.substring(0, 50) + '...');\r\n              } catch (pngError) {\r\n                console.error('【调试】PNG格式也转换失败:', pngError);\r\n                console.error('【调试】错误详情:', pngError.message);\r\n                throw pngError;\r\n              }\r\n            }\r\n            \r\n            console.log('【调试】图片转换为Base64成功，长度:', base64data.length);\r\n            resolve(base64data);\r\n          } catch (canvasError) {\r\n            console.error('【调试】Canvas处理图片失败:', canvasError);\r\n            console.error('【调试】错误详情:', canvasError.message);\r\n            console.error('【调试】错误堆栈:', canvasError.stack);\r\n            reject(canvasError);\r\n          }\r\n        };\r\n        \r\n        // 设置图片源\r\n        console.log('【调试】设置图片src:', fullUrl);\r\n        img.src = fullUrl;\r\n      });\r\n  });\r\n};\r\n\r\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\r\n  console.log('=== 【调试】exportToExcelWithImages 函数被调用 ===');\r\n  console.log('【调试】数据条数:', data.length);\r\n  console.log('【调试】headers:', JSON.stringify(headers));\r\n  \r\n  if (!data || data.length === 0) {\r\n    console.error('【调试】导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('【调试】使用js-table2excel导出Excel，开始处理图片...');\r\n    console.log('【调试】第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    console.log('【调试】导出文件名:', fullFileName);\r\n    \r\n    // 预处理图片，确保所有图片都加载完成\r\n    const processedData = [];\r\n    \r\n    // 逐行处理数据\r\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n      console.log(`【调试】处理第 ${rowIndex + 1}/${data.length} 条记录...`);\r\n      const row = data[rowIndex];\r\n      const record = row['__original'] || {};\r\n      console.log(`【调试】记录ID: ${record.id || 'unknown'}`);\r\n      console.log(`【调试】记录数据:`, JSON.stringify(record).substring(0, 200) + '...');\r\n      \r\n      // 处理清理前照片\r\n      let beforePhotoData = null;\r\n      if (record.photo_path_before) {\r\n        console.log(`【调试】记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\r\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_before);\r\n        \r\n        const photoPaths = parsePhotoPath(record.photo_path_before);\r\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\r\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`【调试】选择第一张照片:`, firstPath);\r\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\r\n            }\r\n            \r\n            console.log(`【调试】记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`【调试】开始转换清理前照片...`);\r\n              beforePhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`【调试】记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\r\n              console.log(`【调试】Base64数据前50个字符:`, beforePhotoData ? beforePhotoData.substring(0, 50) + '...' : 'null');\r\n            } catch (error) {\r\n              console.error(`【调试】记录 ${rowIndex} 清理前照片转换失败:`, error);\r\n              console.error('【调试】错误详情:', error.message);\r\n              console.error('【调试】错误堆栈:', error.stack);\r\n            }\r\n          } else {\r\n            console.error(`【调试】记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理前照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`【调试】记录 ${rowIndex} 没有清理前照片`);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      let afterPhotoData = null;\r\n      if (record.photo_path_after) {\r\n        console.log(`【调试】记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\r\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_after);\r\n        \r\n        const photoPaths = parsePhotoPath(record.photo_path_after);\r\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\r\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`【调试】选择第一张照片:`, firstPath);\r\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\r\n            }\r\n            \r\n            console.log(`【调试】记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`【调试】开始转换清理后照片...`);\r\n              afterPhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`【调试】记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\r\n              console.log(`【调试】Base64数据前50个字符:`, afterPhotoData ? afterPhotoData.substring(0, 50) + '...' : 'null');\r\n            } catch (error) {\r\n              console.error(`【调试】记录 ${rowIndex} 清理后照片转换失败:`, error);\r\n              console.error('【调试】错误详情:', error.message);\r\n              console.error('【调试】错误堆栈:', error.stack);\r\n            }\r\n          } else {\r\n            console.error(`【调试】记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理后照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`【调试】记录 ${rowIndex} 没有清理后照片`);\r\n      }\r\n      \r\n      // 保存处理后的数据\r\n      processedData.push({\r\n        ...row,\r\n        __beforePhotoData: beforePhotoData,\r\n        __afterPhotoData: afterPhotoData\r\n      });\r\n      console.log(`【调试】记录 ${rowIndex} 处理完成，是否有照片数据:`, {\r\n        beforePhoto: !!beforePhotoData,\r\n        afterPhoto: !!afterPhotoData\r\n      });\r\n    }\r\n    \r\n    console.log('【调试】所有图片处理完成，开始创建Excel...');\r\n    console.log('【调试】处理后的数据条数:', processedData.length);\r\n    \r\n    // 检查是否有任何图片数据\r\n    let hasImageData = false;\r\n    for (const row of processedData) {\r\n      if (row.__beforePhotoData || row.__afterPhotoData) {\r\n        hasImageData = true;\r\n        console.log('【调试】找到图片数据，将使用图片导出模式');\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!hasImageData) {\r\n      console.warn('【调试】没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\r\n    }\r\n    \r\n    // 创建一个临时表格元素\r\n    const table = document.createElement('table');\r\n    table.style.display = 'none';\r\n    document.body.appendChild(table);\r\n    console.log('【调试】创建临时表格元素');\r\n    \r\n    // 创建表头\r\n    const thead = document.createElement('thead');\r\n    const headerRow = document.createElement('tr');\r\n    \r\n    headers.forEach(header => {\r\n      const th = document.createElement('th');\r\n      th.textContent = header.text;\r\n      headerRow.appendChild(th);\r\n      console.log(`【调试】添加表头: ${header.text}`);\r\n    });\r\n    \r\n    thead.appendChild(headerRow);\r\n    table.appendChild(thead);\r\n    console.log('【调试】表头创建完成');\r\n    \r\n    // 创建表体\r\n    const tbody = document.createElement('tbody');\r\n    \r\n    // 添加数据行\r\n    processedData.forEach((row, index) => {\r\n      console.log(`【调试】创建第 ${index + 1}/${processedData.length} 行...`);\r\n      const tr = document.createElement('tr');\r\n      \r\n      headers.forEach(header => {\r\n        const td = document.createElement('td');\r\n        \r\n        // 处理清理前照片列\r\n        if (header.field === '清理前照片') {\r\n          if (row.__beforePhotoData) {\r\n            console.log(`【调试】添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__beforePhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            img.alt = '清理前照片';\r\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__beforePhotoData.length);\r\n            \r\n            // 确保图片已加载\r\n            if (!img.complete) {\r\n              console.log('【调试】图片尚未加载完成，添加onload事件');\r\n              img.onload = () => {\r\n                console.log(`【调试】第 ${index + 1} 行清理前照片加载完成`);\r\n              };\r\n              img.onerror = (error) => {\r\n                console.error(`【调试】第 ${index + 1} 行清理前照片加载失败:`, error);\r\n                td.textContent = '图片加载失败';\r\n              };\r\n            } else {\r\n              console.log(`【调试】第 ${index + 1} 行清理前照片已加载完成`);\r\n            }\r\n            \r\n            td.appendChild(img);\r\n            console.log(`【调试】第 ${index + 1} 行清理前照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`【调试】第 ${index + 1} 行没有清理前照片`);\r\n          }\r\n        }\r\n        // 处理清理后照片列 \r\n        else if (header.field === '清理后照片') {\r\n          if (row.__afterPhotoData) {\r\n            console.log(`【调试】添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__afterPhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            img.alt = '清理后照片';\r\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__afterPhotoData.length);\r\n            \r\n            // 确保图片已加载\r\n            if (!img.complete) {\r\n              console.log('【调试】图片尚未加载完成，添加onload事件');\r\n              img.onload = () => {\r\n                console.log(`【调试】第 ${index + 1} 行清理后照片加载完成`);\r\n              };\r\n              img.onerror = (error) => {\r\n                console.error(`【调试】第 ${index + 1} 行清理后照片加载失败:`, error);\r\n                td.textContent = '图片加载失败';\r\n              };\r\n            } else {\r\n              console.log(`【调试】第 ${index + 1} 行清理后照片已加载完成`);\r\n            }\r\n            \r\n            td.appendChild(img);\r\n            console.log(`【调试】第 ${index + 1} 行清理后照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`【调试】第 ${index + 1} 行没有清理后照片`);\r\n          }\r\n        }\r\n        else {\r\n          // 普通文本列\r\n          td.textContent = row[header.field] || '';\r\n          console.log(`【调试】添加第 ${index + 1} 行 ${header.field} 列: ${row[header.field] || '(空)'}`);\r\n        }\r\n        \r\n        tr.appendChild(td);\r\n      });\r\n      \r\n      tbody.appendChild(tr);\r\n      console.log(`【调试】第 ${index + 1} 行创建完成`);\r\n    });\r\n    \r\n    table.appendChild(tbody);\r\n    console.log('【调试】表格创建完成');\r\n    \r\n    // 检查表格内容\r\n    console.log('【调试】表格行数:', table.rows.length);\r\n    console.log('【调试】表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\r\n    \r\n    // 使用js-table2excel导出\r\n    console.log('【调试】开始使用js-table2excel导出...');\r\n    const table2excel = new Table2Excel();\r\n    console.log('【调试】Table2Excel实例创建成功');\r\n\r\n    // 确保所有图片都已加载完成\r\n    console.log('【调试】检查表格中的图片...');\r\n    const imgElements = table.querySelectorAll('img');\r\n    console.log(`【调试】表格中共有 ${imgElements.length} 张图片`);\r\n    \r\n    // 检查每个图片的状态\r\n    Array.from(imgElements).forEach((img, idx) => {\r\n      console.log(`【调试】图片 ${idx + 1} 状态:`, {\r\n        complete: img.complete,\r\n        naturalWidth: img.naturalWidth,\r\n        naturalHeight: img.naturalHeight,\r\n        src长度: img.src.length\r\n      });\r\n    });\r\n\r\n    // 如果没有图片，直接导出\r\n    if (imgElements.length === 0) {\r\n      console.log('【调试】表格中没有图片，直接导出');\r\n      try {\r\n        console.log('【调试】调用export方法...');\r\n        table2excel.export(table, fullFileName);\r\n        console.log('【调试】export方法调用成功');\r\n        \r\n        // 导出完成后移除临时表格\r\n        document.body.removeChild(table);\r\n        console.log('【调试】临时表格已移除');\r\n        \r\n        return true;\r\n      } catch (exportError) {\r\n        console.error('【调试】export方法调用失败:', exportError);\r\n        console.error('【调试】错误详情:', exportError.message);\r\n        console.error('【调试】错误堆栈:', exportError.stack);\r\n        \r\n        // 导出完成后移除临时表格\r\n        document.body.removeChild(table);\r\n        console.log('【调试】临时表格已移除');\r\n        \r\n        throw exportError;\r\n      }\r\n    } else {\r\n      // 等待所有图片加载完成\r\n      console.log('【调试】等待所有图片加载完成后再导出');\r\n      \r\n      // 创建一个Promise数组，每个Promise对应一个图片的加载\r\n      const imgPromises = Array.from(imgElements).map((img, imgIndex) => {\r\n        return new Promise((resolve) => {\r\n          if (img.complete) {\r\n            console.log(`【调试】图片 ${imgIndex + 1} 已加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\r\n            resolve();\r\n          } else {\r\n            console.log(`【调试】等待图片 ${imgIndex + 1} 加载...`);\r\n            img.onload = () => {\r\n              console.log(`【调试】图片 ${imgIndex + 1} 加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\r\n              resolve();\r\n            };\r\n            img.onerror = (error) => {\r\n              console.error(`【调试】图片 ${imgIndex + 1} 加载失败:`, error);\r\n              console.error('【调试】错误详情:', error ? error.message : 'Unknown error');\r\n              resolve(); // 即使失败也继续导出\r\n            };\r\n            \r\n            // 添加超时处理\r\n            setTimeout(() => {\r\n              if (!img.complete) {\r\n                console.error(`【调试】图片 ${imgIndex + 1} 加载超时`);\r\n                resolve(); // 超时也继续导出\r\n              }\r\n            }, 5000); // 5秒超时\r\n          }\r\n        });\r\n      });\r\n      \r\n      // 等待所有图片加载完成或超时\r\n      try {\r\n        await Promise.all(imgPromises);\r\n        console.log('【调试】所有图片加载完成或超时，开始导出');\r\n        \r\n        // 再次检查图片状态\r\n        console.log('【调试】导出前最终检查图片状态:');\r\n        Array.from(imgElements).forEach((img, idx) => {\r\n          console.log(`【调试】图片 ${idx + 1} 最终状态:`, {\r\n            complete: img.complete,\r\n            naturalWidth: img.naturalWidth,\r\n            naturalHeight: img.naturalHeight,\r\n            src长度: img.src.length\r\n          });\r\n        });\r\n        \r\n        try {\r\n          console.log('【调试】调用export方法...');\r\n          table2excel.export(table, fullFileName);\r\n          console.log('【调试】export方法调用成功');\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          return true;\r\n        } catch (exportError) {\r\n          console.error('【调试】export方法调用失败:', exportError);\r\n          console.error('【调试】错误详情:', exportError.message);\r\n          console.error('【调试】错误堆栈:', exportError.stack);\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          throw exportError;\r\n        }\r\n      } catch (imgLoadError) {\r\n        console.error('【调试】等待图片加载过程中发生错误:', imgLoadError);\r\n        console.error('【调试】错误详情:', imgLoadError.message);\r\n        console.error('【调试】错误堆栈:', imgLoadError.stack);\r\n        \r\n        try {\r\n          console.log('【调试】尝试强制导出...');\r\n          table2excel.export(table, fullFileName);\r\n          console.log('【调试】强制导出成功');\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          return true;\r\n        } catch (forceExportError) {\r\n          console.error('【调试】强制导出失败:', forceExportError);\r\n          console.error('【调试】错误详情:', forceExportError.message);\r\n          console.error('【调试】错误堆栈:', forceExportError.stack);\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          throw forceExportError;\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('使用js-table2excel导出Excel失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    console.error('错误堆栈:', error.stack);\r\n    \r\n    // 尝试使用XLSX导出（不包含图片）\r\n    console.log('尝试使用XLSX导出（不包含图片）...');\r\n    try {\r\n      // 不要调用exportToExcel，直接在这里实现导出逻辑\r\n      console.log('创建工作簿...');\r\n      const wb = XLSX.utils.book_new();\r\n      \r\n      // 准备数据\r\n      const exportRows = data.map(row => {\r\n        const exportRow = {};\r\n        headers.forEach(header => {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        });\r\n        return exportRow;\r\n      });\r\n      \r\n      console.log('创建工作表...');\r\n      const ws = XLSX.utils.json_to_sheet(exportRows);\r\n      \r\n      // 添加工作表到工作簿\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n      \r\n      // 处理文件名\r\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n      const fullFileName = `${fileName}_${timestamp}`;\r\n      \r\n      // 导出\r\n      console.log('导出Excel文件...');\r\n      const excelData = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n      \r\n      // 创建Blob\r\n      const blob = new Blob([excelData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      \r\n      // 创建下载链接\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${fullFileName}.xlsx`;\r\n      \r\n      // 触发下载\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // 清理\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n      }, 0);\r\n      \r\n      console.log('XLSX导出成功（不包含图片）');\r\n      return true;\r\n    } catch (xlsxError) {\r\n      console.error('XLSX导出失败:', xlsxError);\r\n      \r\n      // 最后尝试CSV导出\r\n      console.log('尝试CSV导出...');\r\n      return exportToCSV(data, fileName, headers);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片链接\r\n    if (imageData && Object.keys(imageData).length > 0) {\r\n      enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n    } else {\r\n      enhancedData = data;\r\n    }\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\r\n        \r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\r\n        \r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\r\n      }\r\n    });\r\n    \r\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}