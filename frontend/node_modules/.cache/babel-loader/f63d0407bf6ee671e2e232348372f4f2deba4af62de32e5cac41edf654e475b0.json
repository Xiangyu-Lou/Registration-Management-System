{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport ExcelJS from 'exceljs';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\r\n * 从服务器获取图片并作为ArrayBuffer返回\r\n * @param {String} imageUrl - 图片的URL地址\r\n * @param {String} baseUrl - 基础URL，默认为当前域名\r\n * @returns {Promise<ArrayBuffer>} 图片的ArrayBuffer数据\r\n */\nconst fetchImageAsBuffer = async (imageUrl, baseUrl = window.location.origin) => {\n  console.log('获取图片:', imageUrl);\n  if (!imageUrl) {\n    console.error('图片URL为空');\n    return null;\n  }\n\n  // 如果是相对路径，添加baseUrl\n  const fullUrl = imageUrl.startsWith('/') ? `${baseUrl}${imageUrl}` : imageUrl;\n  try {\n    console.log('获取图片:', fullUrl);\n    const response = await fetch(fullUrl, {\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`获取图片失败: ${response.status} ${response.statusText}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    console.log('图片获取成功，大小:', arrayBuffer.byteLength, '字节');\n    return arrayBuffer;\n  } catch (error) {\n    console.error('获取图片失败:', error);\n    return null;\n  }\n};\n\n/**\r\n * 解析照片路径，支持JSON字符串和数组\r\n * @param {String|Array} path - 照片路径字符串或数组\r\n * @returns {Array} 解析后的照片路径数组\r\n */\nconst parsePhotoPath = path => {\n  if (!path) {\n    return [];\n  }\n\n  // 如果已经是数组，直接返回\n  if (Array.isArray(path)) {\n    return path;\n  }\n  try {\n    // 尝试解析JSON字符串\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\n      const parsed = JSON.parse(path);\n      return Array.isArray(parsed) ? parsed : [path];\n    }\n\n    // 非JSON格式，作为单个路径返回\n    return [path];\n  } catch (error) {\n    console.error('解析照片路径失败:', error);\n    return [path];\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {String} baseUrl - 基础URL，用于构建完整的图片路径\r\n */\nexport const exportToExcelWithImages = async (data, fileName, headers, baseUrl = window.location.origin) => {\n  console.log('=== exportToExcelWithImages 函数被调用 ===');\n  console.log('数据条数:', data.length);\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n  try {\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}.xlsx`;\n\n    // 创建新工作簿\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = '危险废物管理系统';\n    workbook.lastModifiedBy = '危险废物管理系统';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n\n    // 添加工作表\n    const worksheet = workbook.addWorksheet('危险废物记录');\n\n    // 设置列\n    const columns = headers.map(header => ({\n      header: header.text,\n      key: header.field,\n      width: header.isImage ? 20 : 15\n    }));\n    worksheet.columns = columns;\n\n    // 设置表头样式\n    worksheet.getRow(1).font = {\n      bold: true\n    };\n    worksheet.getRow(1).alignment = {\n      vertical: 'middle',\n      horizontal: 'center'\n    };\n\n    // 添加数据行并处理图片\n    console.log('开始处理数据行...');\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n      const row = data[rowIndex];\n      console.log(`处理第 ${rowIndex + 1}/${data.length} 条记录...`);\n\n      // 首先添加行基本数据\n      const rowData = {};\n      headers.forEach(header => {\n        if (!header.isImage) {\n          rowData[header.field] = row[header.field] || '';\n        }\n      });\n\n      // 添加行数据\n      const excelRow = worksheet.addRow(rowData);\n\n      // 设置行高\n      excelRow.height = 80; // 设置足够的高度显示图片\n\n      // 处理图片字段\n      for (const header of headers) {\n        if (header.isImage) {\n          const fieldName = header.field;\n          const imagePath = row[fieldName]; // 直接从导出数据中获取图片路径\n\n          if (imagePath) {\n            console.log(`记录 ${rowIndex + 1} 的 ${fieldName} 字段有图片路径: ${imagePath}`);\n\n            // 获取图片\n            try {\n              const imageBuffer = await fetchImageAsBuffer(imagePath, baseUrl);\n              if (imageBuffer) {\n                // 找到这个字段在列中的位置\n                const colIndex = headers.findIndex(h => h.field === fieldName) + 1;\n\n                // 获取单元格位置\n                const cellRef = worksheet.getCell(rowIndex + 2, colIndex).address;\n\n                // 添加图片到工作表\n                const imageId = workbook.addImage({\n                  buffer: imageBuffer,\n                  extension: imagePath.split('.').pop().toLowerCase()\n                });\n\n                // 将图片添加到单元格\n                worksheet.addImage(imageId, {\n                  tl: {\n                    col: colIndex - 1,\n                    row: rowIndex + 1\n                  },\n                  br: {\n                    col: colIndex,\n                    row: rowIndex + 2\n                  },\n                  editAs: 'oneCell'\n                });\n                console.log(`已添加图片到单元格 ${cellRef}`);\n              } else {\n                console.error(`获取图片失败: ${imagePath}`);\n              }\n            } catch (imageError) {\n              console.error(`处理图片时出错:`, imageError);\n            }\n          } else {\n            console.log(`记录 ${rowIndex + 1} 的 ${fieldName} 没有照片路径`);\n          }\n        }\n      }\n    }\n\n    // 导出工作簿\n    console.log('生成Excel数据...');\n    const buffer = await workbook.xlsx.writeBuffer();\n\n    // 创建Blob对象并下载\n    const blob = new Blob([buffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = fullFileName;\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败:', error);\n    console.error('错误详情:', error.message);\n    console.error('错误堆栈:', error.stack);\n\n    // 尝试使用普通的Excel导出（不包含图片）\n    console.log('尝试使用普通Excel导出（不包含图片）...');\n    try {\n      return exportToExcel(data, fileName, headers);\n    } catch (fallbackError) {\n      console.error('普通Excel导出也失败:', fallbackError);\n      return false;\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件(不包含图片)\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcel = async (data, fileName, headers) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const fullFileName = `${fileName}_${timestamp}.xlsx`;\n  console.log('导出函数被调用，数据条数:', data.length);\n  try {\n    console.log('使用ExcelJS导出Excel...');\n\n    // 创建工作簿\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = '危险废物管理系统';\n    workbook.lastModifiedBy = '危险废物管理系统';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n\n    // 添加工作表\n    const worksheet = workbook.addWorksheet('危险废物记录');\n\n    // 设置列\n    const columns = headers.map(header => ({\n      header: header.text,\n      key: header.field,\n      width: 15\n    }));\n    worksheet.columns = columns;\n\n    // 设置表头样式\n    worksheet.getRow(1).font = {\n      bold: true\n    };\n    worksheet.getRow(1).alignment = {\n      vertical: 'middle',\n      horizontal: 'center'\n    };\n\n    // 添加数据行\n    data.forEach(row => {\n      const rowData = {};\n      headers.forEach(header => {\n        rowData[header.field] = row[header.field] || '';\n      });\n      worksheet.addRow(rowData);\n    });\n\n    // 导出工作簿\n    console.log('生成Excel数据...');\n    const buffer = await workbook.xlsx.writeBuffer();\n\n    // 创建Blob对象并下载\n    const blob = new Blob([buffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fullFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 准备图片导出数据，为每个记录获取图片\r\n * @param {Array} records - 记录数组\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 包含图片arrayBuffer的对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl = window.location.origin) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    for (let index = 0; index < records.length; index++) {\n      const record = records[index];\n      imageData[index] = {\n        beforeImage: null,\n        afterImage: null\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        const photoPaths = parsePhotoPath(record.photo_path_before);\n        if (photoPaths.length > 0) {\n          const firstPhotoPath = photoPaths[0];\n          try {\n            const imageBuffer = await fetchImageAsBuffer(firstPhotoPath, baseUrl);\n            if (imageBuffer) {\n              imageData[index].beforeImage = {\n                buffer: imageBuffer,\n                extension: firstPhotoPath.split('.').pop().toLowerCase(),\n                path: firstPhotoPath\n              };\n              console.log(`记录 ${index} 清理前照片获取成功`);\n            }\n          } catch (error) {\n            console.error(`获取清理前照片失败:`, error);\n          }\n        }\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        const photoPaths = parsePhotoPath(record.photo_path_after);\n        if (photoPaths.length > 0) {\n          const firstPhotoPath = photoPaths[0];\n          try {\n            const imageBuffer = await fetchImageAsBuffer(firstPhotoPath, baseUrl);\n            if (imageBuffer) {\n              imageData[index].afterImage = {\n                buffer: imageBuffer,\n                extension: firstPhotoPath.split('.').pop().toLowerCase(),\n                path: firstPhotoPath\n              };\n              console.log(`记录 ${index} 清理后照片获取成功`);\n            }\n          } catch (error) {\n            console.error(`获取清理后照片失败:`, error);\n          }\n        }\n      }\n      console.log(`已处理 ${index + 1}/${records.length} 条记录`);\n    }\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据时出错:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","ExcelJS","console","log","version","Object","keys","join","fetchImageAsBuffer","imageUrl","baseUrl","window","location","origin","error","fullUrl","startsWith","response","fetch","headers","ok","Error","status","statusText","arrayBuffer","byteLength","parsePhotoPath","path","Array","isArray","endsWith","parsed","JSON","parse","exportToExcelWithImages","data","fileName","length","replace","timestamp","Date","toISOString","substring","fullFileName","workbook","Workbook","creator","lastModifiedBy","created","modified","worksheet","addWorksheet","columns","map","header","text","key","field","width","isImage","getRow","font","bold","alignment","vertical","horizontal","rowIndex","row","rowData","forEach","excelRow","addRow","height","fieldName","imagePath","imageBuffer","colIndex","findIndex","h","cellRef","getCell","address","imageId","addImage","buffer","extension","split","pop","toLowerCase","tl","col","br","editAs","imageError","xlsx","writeBuffer","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","message","stack","exportToExcel","fallbackError","a","exportToCSV","csvFileName","csvContent","headerRow","title","item","value","undefined","cellValue","String","includes","setAttribute","style","visibility","prepareImageExportData","records","imageData","index","record","beforeImage","afterImage","photo_path_before","photoPaths","firstPhotoPath","photo_path_after"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport ExcelJS from 'exceljs';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n/**\r\n * 从服务器获取图片并作为ArrayBuffer返回\r\n * @param {String} imageUrl - 图片的URL地址\r\n * @param {String} baseUrl - 基础URL，默认为当前域名\r\n * @returns {Promise<ArrayBuffer>} 图片的ArrayBuffer数据\r\n */\r\nconst fetchImageAsBuffer = async (imageUrl, baseUrl = window.location.origin) => {\r\n  console.log('获取图片:', imageUrl);\r\n  \r\n  if (!imageUrl) {\r\n    console.error('图片URL为空');\r\n    return null;\r\n  }\r\n  \r\n  // 如果是相对路径，添加baseUrl\r\n  const fullUrl = imageUrl.startsWith('/') \r\n    ? `${baseUrl}${imageUrl}` \r\n    : imageUrl;\r\n  \r\n  try {\r\n    console.log('获取图片:', fullUrl);\r\n    const response = await fetch(fullUrl, {\r\n      headers: {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`获取图片失败: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const arrayBuffer = await response.arrayBuffer();\r\n    console.log('图片获取成功，大小:', arrayBuffer.byteLength, '字节');\r\n    return arrayBuffer;\r\n  } catch (error) {\r\n    console.error('获取图片失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 解析照片路径，支持JSON字符串和数组\r\n * @param {String|Array} path - 照片路径字符串或数组\r\n * @returns {Array} 解析后的照片路径数组\r\n */\r\nconst parsePhotoPath = (path) => {\r\n  if (!path) {\r\n    return [];\r\n  }\r\n  \r\n  // 如果已经是数组，直接返回\r\n  if (Array.isArray(path)) {\r\n    return path;\r\n  }\r\n  \r\n  try {\r\n    // 尝试解析JSON字符串\r\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\r\n      const parsed = JSON.parse(path);\r\n      return Array.isArray(parsed) ? parsed : [path];\r\n    }\r\n    \r\n    // 非JSON格式，作为单个路径返回\r\n    return [path];\r\n  } catch (error) {\r\n    console.error('解析照片路径失败:', error);\r\n    return [path];\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {String} baseUrl - 基础URL，用于构建完整的图片路径\r\n */\r\nexport const exportToExcelWithImages = async (data, fileName, headers, baseUrl = window.location.origin) => {\r\n  console.log('=== exportToExcelWithImages 函数被调用 ===');\r\n  console.log('数据条数:', data.length);\r\n  \r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}.xlsx`;\r\n    \r\n    // 创建新工作簿\r\n    const workbook = new ExcelJS.Workbook();\r\n    workbook.creator = '危险废物管理系统';\r\n    workbook.lastModifiedBy = '危险废物管理系统';\r\n    workbook.created = new Date();\r\n    workbook.modified = new Date();\r\n    \r\n    // 添加工作表\r\n    const worksheet = workbook.addWorksheet('危险废物记录');\r\n    \r\n    // 设置列\r\n    const columns = headers.map(header => ({\r\n      header: header.text,\r\n      key: header.field,\r\n      width: header.isImage ? 20 : 15\r\n    }));\r\n    worksheet.columns = columns;\r\n    \r\n    // 设置表头样式\r\n    worksheet.getRow(1).font = { bold: true };\r\n    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };\r\n    \r\n    // 添加数据行并处理图片\r\n    console.log('开始处理数据行...');\r\n    \r\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n      const row = data[rowIndex];\r\n      \r\n      console.log(`处理第 ${rowIndex + 1}/${data.length} 条记录...`);\r\n      \r\n      // 首先添加行基本数据\r\n      const rowData = {};\r\n      headers.forEach(header => {\r\n        if (!header.isImage) {\r\n          rowData[header.field] = row[header.field] || '';\r\n        }\r\n      });\r\n      \r\n      // 添加行数据\r\n      const excelRow = worksheet.addRow(rowData);\r\n      \r\n      // 设置行高\r\n      excelRow.height = 80; // 设置足够的高度显示图片\r\n      \r\n      // 处理图片字段\r\n      for (const header of headers) {\r\n        if (header.isImage) {\r\n          const fieldName = header.field;\r\n          const imagePath = row[fieldName]; // 直接从导出数据中获取图片路径\r\n          \r\n          if (imagePath) {\r\n            console.log(`记录 ${rowIndex + 1} 的 ${fieldName} 字段有图片路径: ${imagePath}`);\r\n            \r\n            // 获取图片\r\n            try {\r\n              const imageBuffer = await fetchImageAsBuffer(imagePath, baseUrl);\r\n              \r\n              if (imageBuffer) {\r\n                // 找到这个字段在列中的位置\r\n                const colIndex = headers.findIndex(h => h.field === fieldName) + 1;\r\n                \r\n                // 获取单元格位置\r\n                const cellRef = worksheet.getCell(rowIndex + 2, colIndex).address;\r\n                \r\n                // 添加图片到工作表\r\n                const imageId = workbook.addImage({\r\n                  buffer: imageBuffer,\r\n                  extension: imagePath.split('.').pop().toLowerCase()\r\n                });\r\n                \r\n                // 将图片添加到单元格\r\n                worksheet.addImage(imageId, {\r\n                  tl: { col: colIndex - 1, row: rowIndex + 1 },\r\n                  br: { col: colIndex, row: rowIndex + 2 },\r\n                  editAs: 'oneCell'\r\n                });\r\n                \r\n                console.log(`已添加图片到单元格 ${cellRef}`);\r\n              } else {\r\n                console.error(`获取图片失败: ${imagePath}`);\r\n              }\r\n            } catch (imageError) {\r\n              console.error(`处理图片时出错:`, imageError);\r\n            }\r\n          } else {\r\n            console.log(`记录 ${rowIndex + 1} 的 ${fieldName} 没有照片路径`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 导出工作簿\r\n    console.log('生成Excel数据...');\r\n    const buffer = await workbook.xlsx.writeBuffer();\r\n    \r\n    // 创建Blob对象并下载\r\n    const blob = new Blob([buffer], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = fullFileName;\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    console.error('错误堆栈:', error.stack);\r\n    \r\n    // 尝试使用普通的Excel导出（不包含图片）\r\n    console.log('尝试使用普通Excel导出（不包含图片）...');\r\n    try {\r\n      return exportToExcel(data, fileName, headers);\r\n    } catch (fallbackError) {\r\n      console.error('普通Excel导出也失败:', fallbackError);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件(不包含图片)\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcel = async (data, fileName, headers) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const fullFileName = `${fileName}_${timestamp}.xlsx`;\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  \r\n  try {\r\n    console.log('使用ExcelJS导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const workbook = new ExcelJS.Workbook();\r\n    workbook.creator = '危险废物管理系统';\r\n    workbook.lastModifiedBy = '危险废物管理系统';\r\n    workbook.created = new Date();\r\n    workbook.modified = new Date();\r\n    \r\n    // 添加工作表\r\n    const worksheet = workbook.addWorksheet('危险废物记录');\r\n    \r\n    // 设置列\r\n    const columns = headers.map(header => ({\r\n      header: header.text,\r\n      key: header.field,\r\n      width: 15\r\n    }));\r\n    worksheet.columns = columns;\r\n    \r\n    // 设置表头样式\r\n    worksheet.getRow(1).font = { bold: true };\r\n    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };\r\n    \r\n    // 添加数据行\r\n    data.forEach(row => {\r\n      const rowData = {};\r\n      headers.forEach(header => {\r\n        rowData[header.field] = row[header.field] || '';\r\n      });\r\n      worksheet.addRow(rowData);\r\n    });\r\n    \r\n    // 导出工作簿\r\n    console.log('生成Excel数据...');\r\n    const buffer = await workbook.xlsx.writeBuffer();\r\n    \r\n    // 创建Blob对象并下载\r\n    const blob = new Blob([buffer], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = fullFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 准备图片导出数据，为每个记录获取图片\r\n * @param {Array} records - 记录数组\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 包含图片arrayBuffer的对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl = window.location.origin) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    for (let index = 0; index < records.length; index++) {\r\n      const record = records[index];\r\n      imageData[index] = {\r\n        beforeImage: null,\r\n        afterImage: null\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        const photoPaths = parsePhotoPath(record.photo_path_before);\r\n        if (photoPaths.length > 0) {\r\n          const firstPhotoPath = photoPaths[0];\r\n          try {\r\n            const imageBuffer = await fetchImageAsBuffer(firstPhotoPath, baseUrl);\r\n            if (imageBuffer) {\r\n              imageData[index].beforeImage = {\r\n                buffer: imageBuffer,\r\n                extension: firstPhotoPath.split('.').pop().toLowerCase(),\r\n                path: firstPhotoPath\r\n              };\r\n              console.log(`记录 ${index} 清理前照片获取成功`);\r\n            }\r\n          } catch (error) {\r\n            console.error(`获取清理前照片失败:`, error);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        const photoPaths = parsePhotoPath(record.photo_path_after);\r\n        if (photoPaths.length > 0) {\r\n          const firstPhotoPath = photoPaths[0];\r\n          try {\r\n            const imageBuffer = await fetchImageAsBuffer(firstPhotoPath, baseUrl);\r\n            if (imageBuffer) {\r\n              imageData[index].afterImage = {\r\n                buffer: imageBuffer,\r\n                extension: firstPhotoPath.split('.').pop().toLowerCase(),\r\n                path: firstPhotoPath\r\n              };\r\n              console.log(`记录 ${index} 清理后照片获取成功`);\r\n            }\r\n          } catch (error) {\r\n            console.error(`获取清理后照片失败:`, error);\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log(`已处理 ${index + 1}/${records.length} 条记录`);\r\n    }\r\n    \r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据时出错:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}