{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片链接\n    if (imageData && Object.keys(imageData).length > 0) {\n      enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n    } else {\n      enhancedData = data;\n    }\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\nexport const imageUrlToBase64 = async url => {\n  console.log('开始转换图片到Base64:', url);\n\n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n\n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, {\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = e => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n\n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n\n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = e => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n\n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  console.log('准备图片导出数据，记录数:', records.length);\n  console.log('使用的基础URL:', baseUrl);\n  const imageData = {};\n  let processedCount = 0;\n  let successCount = 0;\n\n  // 解析照片路径的函数\n  const parsePhotoPath = path => {\n    if (!path) return [];\n    try {\n      // 尝试解析为JSON\n      if (path.startsWith('[') && path.endsWith(']')) {\n        return JSON.parse(path);\n      }\n      // 如果不是JSON格式，则将其作为单个路径返回\n      return [path];\n    } catch (error) {\n      console.error('解析照片路径失败:', error);\n      // 如果解析失败，将其作为单个路径返回\n      return [path];\n    }\n  };\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n    console.log(`处理记录 ${i + 1}/${records.length}, ID: ${record.id}`);\n\n    // 初始化该记录的图片数据\n    imageData[i] = {};\n\n    // 处理清理前照片\n    if (record.photo_path_before) {\n      const beforePhotoPaths = parsePhotoPath(record.photo_path_before);\n      console.log(`记录 ${i + 1} 清理前照片路径:`, beforePhotoPaths);\n      if (beforePhotoPaths.length > 0) {\n        const beforePhotoUrl = `${baseUrl}${beforePhotoPaths[0]}`;\n        console.log(`记录 ${i + 1} 清理前照片URL:`, beforePhotoUrl);\n        try {\n          const beforePhotoBase64 = await imageUrlToBase64(beforePhotoUrl);\n          if (beforePhotoBase64) {\n            imageData[i][7] = {\n              url: beforePhotoUrl,\n              base64: beforePhotoBase64\n            };\n            console.log(`记录 ${i + 1} 清理前照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i + 1} 清理前照片转换失败`);\n            // 仍然保留URL\n            imageData[i][7] = {\n              url: beforePhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i + 1} 清理前照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][7] = {\n            url: beforePhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i + 1} 没有清理前照片`);\n    }\n\n    // 处理清理后照片\n    if (record.photo_path_after) {\n      const afterPhotoPaths = parsePhotoPath(record.photo_path_after);\n      console.log(`记录 ${i + 1} 清理后照片路径:`, afterPhotoPaths);\n      if (afterPhotoPaths.length > 0) {\n        const afterPhotoUrl = `${baseUrl}${afterPhotoPaths[0]}`;\n        console.log(`记录 ${i + 1} 清理后照片URL:`, afterPhotoUrl);\n        try {\n          const afterPhotoBase64 = await imageUrlToBase64(afterPhotoUrl);\n          if (afterPhotoBase64) {\n            imageData[i][8] = {\n              url: afterPhotoUrl,\n              base64: afterPhotoBase64\n            };\n            console.log(`记录 ${i + 1} 清理后照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i + 1} 清理后照片转换失败`);\n            // 仍然保留URL\n            imageData[i][8] = {\n              url: afterPhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i + 1} 清理后照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][8] = {\n            url: afterPhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i + 1} 没有清理后照片`);\n    }\n\n    // 添加单位名称\n    if (record.unit_name) {\n      imageData[i].unit_name = record.unit_name;\n    }\n    processedCount++;\n  }\n  console.log(`图片数据准备完成，处理记录: ${processedCount}/${records.length}, 成功转换图片: ${successCount}`);\n  return imageData;\n};","map":{"version":3,"names":["XLSX","console","log","version","Object","keys","join","exportToExcel","data","fileName","headers","imageData","length","error","replace","timestamp","Date","toISOString","substring","wb","utils","book_new","enhancedData","map","row","index","newRow","url","ws","json_to_sheet","colWidths","wch","book_append_sheet","excelFileName","wbout","write","bookType","type","blob","Blob","size","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportToCSV","csvFileName","csvContent","headerRow","h","title","forEach","item","header","value","field","undefined","cellValue","String","includes","setAttribute","style","visibility","imageUrlToBase64","response","fetch","mode","cache","ok","Error","status","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","e","readAsDataURL","warn","img","Image","crossOrigin","onload","src","width","height","canvas","ctx","getContext","drawImage","base64","toDataURL","error2","prepareImageExportData","records","baseUrl","processedCount","successCount","parsePhotoPath","path","startsWith","endsWith","JSON","parse","i","record","id","photo_path_before","beforePhotoPaths","beforePhotoUrl","beforePhotoBase64","photo_path_after","afterPhotoPaths","afterPhotoUrl","afterPhotoBase64","unit_name"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片链接\r\n    if (imageData && Object.keys(imageData).length > 0) {\r\n      enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n    } else {\r\n      enhancedData = data;\r\n    }\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\r\nexport const imageUrlToBase64 = async (url) => {\r\n  console.log('开始转换图片到Base64:', url);\r\n  \r\n  // 确保URL有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('无效的图片URL:', url);\r\n    return null;\r\n  }\r\n  \r\n  // 尝试方法1：使用fetch API\r\n  try {\r\n    console.log('尝试使用fetch API获取图片...');\r\n    const response = await fetch(url, { \r\n      mode: 'cors',\r\n      cache: 'no-cache'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP错误: ${response.status}`);\r\n    }\r\n    \r\n    const blob = await response.blob();\r\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = (e) => {\r\n        console.error('FileReader错误:', e);\r\n        reject(e);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  } catch (error) {\r\n    console.warn('使用fetch API获取图片失败:', error);\r\n    \r\n    // 尝试方法2：使用Image对象\r\n    try {\r\n      console.log('尝试使用Image对象获取图片...');\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous'; // 允许跨域\r\n      \r\n      // 等待图片加载\r\n      await new Promise((resolve, reject) => {\r\n        img.onload = resolve;\r\n        img.onerror = (e) => {\r\n          console.error('图片加载错误:', e);\r\n          reject(e);\r\n        };\r\n        img.src = url;\r\n      });\r\n      \r\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\r\n      \r\n      // 创建canvas并绘制图片\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n      \r\n      // 转换为base64\r\n      const base64 = canvas.toDataURL('image/jpeg');\r\n      console.log('图片转换为Base64成功，长度:', base64.length);\r\n      return base64;\r\n    } catch (error2) {\r\n      console.error('使用Image对象获取图片也失败:', error2);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  console.log('准备图片导出数据，记录数:', records.length);\r\n  console.log('使用的基础URL:', baseUrl);\r\n  \r\n  const imageData = {};\r\n  let processedCount = 0;\r\n  let successCount = 0;\r\n  \r\n  // 解析照片路径的函数\r\n  const parsePhotoPath = (path) => {\r\n    if (!path) return [];\r\n    \r\n    try {\r\n      // 尝试解析为JSON\r\n      if (path.startsWith('[') && path.endsWith(']')) {\r\n        return JSON.parse(path);\r\n      }\r\n      // 如果不是JSON格式，则将其作为单个路径返回\r\n      return [path];\r\n    } catch (error) {\r\n      console.error('解析照片路径失败:', error);\r\n      // 如果解析失败，将其作为单个路径返回\r\n      return [path];\r\n    }\r\n  };\r\n  \r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    console.log(`处理记录 ${i+1}/${records.length}, ID: ${record.id}`);\r\n    \r\n    // 初始化该记录的图片数据\r\n    imageData[i] = {};\r\n    \r\n    // 处理清理前照片\r\n    if (record.photo_path_before) {\r\n      const beforePhotoPaths = parsePhotoPath(record.photo_path_before);\r\n      console.log(`记录 ${i+1} 清理前照片路径:`, beforePhotoPaths);\r\n      \r\n      if (beforePhotoPaths.length > 0) {\r\n        const beforePhotoUrl = `${baseUrl}${beforePhotoPaths[0]}`;\r\n        console.log(`记录 ${i+1} 清理前照片URL:`, beforePhotoUrl);\r\n        \r\n        try {\r\n          const beforePhotoBase64 = await imageUrlToBase64(beforePhotoUrl);\r\n          if (beforePhotoBase64) {\r\n            imageData[i][7] = {\r\n              url: beforePhotoUrl,\r\n              base64: beforePhotoBase64\r\n            };\r\n            console.log(`记录 ${i+1} 清理前照片转换成功`);\r\n            successCount++;\r\n          } else {\r\n            console.warn(`记录 ${i+1} 清理前照片转换失败`);\r\n            // 仍然保留URL\r\n            imageData[i][7] = {\r\n              url: beforePhotoUrl\r\n            };\r\n          }\r\n        } catch (error) {\r\n          console.error(`记录 ${i+1} 清理前照片处理错误:`, error);\r\n          // 仍然保留URL\r\n          imageData[i][7] = {\r\n            url: beforePhotoUrl\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`记录 ${i+1} 没有清理前照片`);\r\n    }\r\n    \r\n    // 处理清理后照片\r\n    if (record.photo_path_after) {\r\n      const afterPhotoPaths = parsePhotoPath(record.photo_path_after);\r\n      console.log(`记录 ${i+1} 清理后照片路径:`, afterPhotoPaths);\r\n      \r\n      if (afterPhotoPaths.length > 0) {\r\n        const afterPhotoUrl = `${baseUrl}${afterPhotoPaths[0]}`;\r\n        console.log(`记录 ${i+1} 清理后照片URL:`, afterPhotoUrl);\r\n        \r\n        try {\r\n          const afterPhotoBase64 = await imageUrlToBase64(afterPhotoUrl);\r\n          if (afterPhotoBase64) {\r\n            imageData[i][8] = {\r\n              url: afterPhotoUrl,\r\n              base64: afterPhotoBase64\r\n            };\r\n            console.log(`记录 ${i+1} 清理后照片转换成功`);\r\n            successCount++;\r\n          } else {\r\n            console.warn(`记录 ${i+1} 清理后照片转换失败`);\r\n            // 仍然保留URL\r\n            imageData[i][8] = {\r\n              url: afterPhotoUrl\r\n            };\r\n          }\r\n        } catch (error) {\r\n          console.error(`记录 ${i+1} 清理后照片处理错误:`, error);\r\n          // 仍然保留URL\r\n          imageData[i][8] = {\r\n            url: afterPhotoUrl\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`记录 ${i+1} 没有清理后照片`);\r\n    }\r\n    \r\n    // 添加单位名称\r\n    if (record.unit_name) {\r\n      imageData[i].unit_name = record.unit_name;\r\n    }\r\n    \r\n    processedCount++;\r\n  }\r\n  \r\n  console.log(`图片数据准备完成，处理记录: ${processedCount}/${records.length}, 成功转换图片: ${successCount}`);\r\n  return imageData;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B;;AAEA;AACAC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,IAAI,CAACG,OAAO,CAAC;AACrCF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEE,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,GAAG,IAAI,KAAK;EAC1E,IAAI,CAACH,IAAI,IAAIA,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;IAC9BX,OAAO,CAACY,KAAK,CAAC,WAAW,CAAC;IAC1B,OAAO,KAAK;EACd;;EAEA;EACAJ,QAAQ,GAAGA,QAAQ,CAACK,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;EACjD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACH,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjFjB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,IAAI,CAACI,MAAM,CAAC;EACzCX,OAAO,CAACC,GAAG,CAAC,UAAU,EAAES,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;EAC9C,IAAIA,SAAS,EAAE;IACbV,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEE,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACC,MAAM,CAAC;EACvD;;EAEA;EACA,IAAI;IACFX,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;IAE3B;IACA,MAAMiB,EAAE,GAAGnB,IAAI,CAACoB,KAAK,CAACC,QAAQ,CAAC,CAAC;IAChCpB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;;IAEtB;IACA,IAAIoB,YAAY,GAAG,EAAE;;IAErB;IACA,IAAIX,SAAS,IAAIP,MAAM,CAACC,IAAI,CAACM,SAAS,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MAClDU,YAAY,GAAGd,IAAI,CAACe,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;QACtC,MAAMC,MAAM,GAAG;UAAC,GAAGF;QAAG,CAAC;;QAEvB;QACA,IAAIb,SAAS,CAACc,KAAK,CAAC,EAAE;UACpB;UACA,IAAId,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,IAAId,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,CAACE,GAAG,EAAE;YAClDD,MAAM,CAAC,OAAO,CAAC,GAAGf,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,CAACE,GAAG;UAC3C;UACA,IAAIhB,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,IAAId,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,CAACE,GAAG,EAAE;YAClDD,MAAM,CAAC,OAAO,CAAC,GAAGf,SAAS,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,CAACE,GAAG;UAC3C;QACF;QAEA,OAAOD,MAAM;MACf,CAAC,CAAC;IACJ,CAAC,MAAM;MACLJ,YAAY,GAAGd,IAAI;IACrB;IAEAP,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;IAE7B;IACA,MAAM0B,EAAE,GAAG5B,IAAI,CAACoB,KAAK,CAACS,aAAa,CAACP,YAAY,CAAC;IAEjDrB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;;IAEtB;IACA,MAAM4B,SAAS,GAAGpB,OAAO,CAACa,GAAG,CAAC,OAAO;MAAEQ,GAAG,EAAE;IAAG,CAAC,CAAC,CAAC;IAClDH,EAAE,CAAC,OAAO,CAAC,GAAGE,SAAS;;IAEvB;IACA9B,IAAI,CAACoB,KAAK,CAACY,iBAAiB,CAACb,EAAE,EAAES,EAAE,EAAE,QAAQ,CAAC;IAC9C3B,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;IAEzB;IACA,MAAM+B,aAAa,GAAG,GAAGxB,QAAQ,IAAIM,SAAS,OAAO;IACrDd,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE+B,aAAa,CAAC;;IAE1C;IACAhC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMgC,KAAK,GAAGlC,IAAI,CAACmC,KAAK,CAAChB,EAAE,EAAE;MAAEiB,QAAQ,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAQ,CAAC,CAAC;IACjEpC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEgC,KAAK,CAACtB,MAAM,EAAE,IAAI,CAAC;;IAElD;IACA,MAAM0B,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,KAAK,CAAC,EAAE;MAC7BG,IAAI,EAAE;IACR,CAAC,CAAC;IACFpC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEoC,IAAI,CAACE,IAAI,EAAE,IAAI,CAAC;;IAE5C;IACA,MAAMb,GAAG,GAAGc,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;IACrCrC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEyB,GAAG,CAACT,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;IAErD,MAAMyB,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGnB,GAAG;IACfgB,IAAI,CAACI,QAAQ,GAAGd,aAAa;IAC7BhC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;IAE9B;IACA0C,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;IAC/BF,GAAG,CAACW,eAAe,CAACzB,GAAG,CAAC;IAExB1B,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxB,OAAO,IAAI;EACb,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvCZ,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB;IACAmD,WAAW,CAAC7C,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IACpC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2C,WAAW,GAAGA,CAAC7C,IAAI,EAAEC,QAAQ,EAAEC,OAAO,KAAK;EACtD;EACA,MAAMK,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACH,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACjF,MAAMoC,WAAW,GAAG,GAAG7C,QAAQ,IAAIM,SAAS,MAAM;;EAElD;EACA,IAAIwC,UAAU,GAAG,QAAQ,CAAC,CAAC;;EAE3B;EACA,MAAMC,SAAS,GAAG9C,OAAO,CAACa,GAAG,CAACkC,CAAC,IAAI,IAAIA,CAAC,CAACC,KAAK,GAAG,CAAC,CAACpD,IAAI,CAAC,GAAG,CAAC;EAC5DiD,UAAU,IAAIC,SAAS,GAAG,MAAM;;EAEhC;EACAhD,IAAI,CAACmD,OAAO,CAACC,IAAI,IAAI;IACnB,MAAMpC,GAAG,GAAGd,OAAO,CAACa,GAAG,CAACsC,MAAM,IAAI;MAChC,MAAMC,KAAK,GAAGF,IAAI,CAACC,MAAM,CAACE,KAAK,CAAC;;MAEhC;MACA,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKE,SAAS,EAAE;QACzC,OAAO,EAAE;MACX;;MAEA;MACA,IAAIH,MAAM,CAACxB,IAAI,KAAK,QAAQ,IAAI,OAAOyB,KAAK,KAAK,QAAQ,EAAE;QACzD,OAAOA,KAAK;MACd;;MAEA;MACA,IAAIG,SAAS,GAAGC,MAAM,CAACJ,KAAK,CAAC;MAC7B,IAAIG,SAAS,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,GAAG,CAAC,IAAIF,SAAS,CAACE,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClFF,SAAS,GAAGA,SAAS,CAACnD,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC3CmD,SAAS,GAAG,IAAIA,SAAS,GAAG,CAAC,CAAC;MAChC;MAEA,OAAOA,SAAS;IAClB,CAAC,CAAC,CAAC3D,IAAI,CAAC,GAAG,CAAC;IAEZiD,UAAU,IAAI/B,GAAG,GAAG,MAAM;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAMc,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACgB,UAAU,CAAC,EAAE;IAAElB,IAAI,EAAE;EAA0B,CAAC,CAAC;EACxE,MAAMV,GAAG,GAAGc,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;EACrC,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACyB,YAAY,CAAC,MAAM,EAAEzC,GAAG,CAAC;EAC9BgB,IAAI,CAACyB,YAAY,CAAC,UAAU,EAAEd,WAAW,CAAC;EAC1CX,IAAI,CAAC0B,KAAK,CAACC,UAAU,GAAG,QAAQ;EAChC1B,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;EAC/BF,GAAG,CAACW,eAAe,CAACzB,GAAG,CAAC;EAExB1B,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMqE,gBAAgB,GAAG,MAAO5C,GAAG,IAAK;EAC7C1B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEyB,GAAG,CAAC;;EAElC;EACA,IAAI,CAACA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnC1B,OAAO,CAACY,KAAK,CAAC,WAAW,EAAEc,GAAG,CAAC;IAC/B,OAAO,IAAI;EACb;;EAEA;EACA,IAAI;IACF1B,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMsE,QAAQ,GAAG,MAAMC,KAAK,CAAC9C,GAAG,EAAE;MAChC+C,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,WAAWL,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC/C;IAEA,MAAMxC,IAAI,GAAG,MAAMkC,QAAQ,CAAClC,IAAI,CAAC,CAAC;IAClCrC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEoC,IAAI,CAACE,IAAI,EAAE,SAAS,EAAEF,IAAI,CAACD,IAAI,CAAC;IAE1D,OAAO,IAAI0C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACvBnF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEgF,MAAM,CAACG,MAAM,CAACzE,MAAM,CAAC;QACtDoE,OAAO,CAACE,MAAM,CAACG,MAAM,CAAC;MACxB,CAAC;MACDH,MAAM,CAACI,OAAO,GAAIC,CAAC,IAAK;QACtBtF,OAAO,CAACY,KAAK,CAAC,eAAe,EAAE0E,CAAC,CAAC;QACjCN,MAAM,CAACM,CAAC,CAAC;MACX,CAAC;MACDL,MAAM,CAACM,aAAa,CAAClD,IAAI,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOzB,KAAK,EAAE;IACdZ,OAAO,CAACwF,IAAI,CAAC,oBAAoB,EAAE5E,KAAK,CAAC;;IAEzC;IACA,IAAI;MACFZ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,MAAMwF,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,WAAW,GAAG,WAAW,CAAC,CAAC;;MAE/B;MACA,MAAM,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACrCS,GAAG,CAACG,MAAM,GAAGb,OAAO;QACpBU,GAAG,CAACJ,OAAO,GAAIC,CAAC,IAAK;UACnBtF,OAAO,CAACY,KAAK,CAAC,SAAS,EAAE0E,CAAC,CAAC;UAC3BN,MAAM,CAACM,CAAC,CAAC;QACX,CAAC;QACDG,GAAG,CAACI,GAAG,GAAGnE,GAAG;MACf,CAAC,CAAC;MAEF1B,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEwF,GAAG,CAACK,KAAK,EAAE,GAAG,EAAEL,GAAG,CAACM,MAAM,CAAC;;MAErD;MACA,MAAMC,MAAM,GAAGrD,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CoD,MAAM,CAACF,KAAK,GAAGL,GAAG,CAACK,KAAK;MACxBE,MAAM,CAACD,MAAM,GAAGN,GAAG,CAACM,MAAM;MAC1B,MAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAACE,SAAS,CAACV,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;;MAExB;MACA,MAAMW,MAAM,GAAGJ,MAAM,CAACK,SAAS,CAAC,YAAY,CAAC;MAC7CrG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEmG,MAAM,CAACzF,MAAM,CAAC;MAC/C,OAAOyF,MAAM;IACf,CAAC,CAAC,OAAOE,MAAM,EAAE;MACftG,OAAO,CAACY,KAAK,CAAC,mBAAmB,EAAE0F,MAAM,CAAC;MAC1C,OAAO,IAAI;IACb;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;EAChEzG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEuG,OAAO,CAAC7F,MAAM,CAAC;EAC5CX,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEwG,OAAO,CAAC;EAEjC,MAAM/F,SAAS,GAAG,CAAC,CAAC;EACpB,IAAIgG,cAAc,GAAG,CAAC;EACtB,IAAIC,YAAY,GAAG,CAAC;;EAEpB;EACA,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IAEpB,IAAI;MACF;MACA,IAAIA,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC9C,OAAOC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;MACzB;MACA;MACA,OAAO,CAACA,IAAI,CAAC;IACf,CAAC,CAAC,OAAOjG,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC;MACA,OAAO,CAACiG,IAAI,CAAC;IACf;EACF,CAAC;EAED,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,OAAO,CAAC7F,MAAM,EAAEuG,CAAC,EAAE,EAAE;IACvC,MAAMC,MAAM,GAAGX,OAAO,CAACU,CAAC,CAAC;IACzBlH,OAAO,CAACC,GAAG,CAAC,QAAQiH,CAAC,GAAC,CAAC,IAAIV,OAAO,CAAC7F,MAAM,SAASwG,MAAM,CAACC,EAAE,EAAE,CAAC;;IAE9D;IACA1G,SAAS,CAACwG,CAAC,CAAC,GAAG,CAAC,CAAC;;IAEjB;IACA,IAAIC,MAAM,CAACE,iBAAiB,EAAE;MAC5B,MAAMC,gBAAgB,GAAGV,cAAc,CAACO,MAAM,CAACE,iBAAiB,CAAC;MACjErH,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,WAAW,EAAEI,gBAAgB,CAAC;MAEnD,IAAIA,gBAAgB,CAAC3G,MAAM,GAAG,CAAC,EAAE;QAC/B,MAAM4G,cAAc,GAAG,GAAGd,OAAO,GAAGa,gBAAgB,CAAC,CAAC,CAAC,EAAE;QACzDtH,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,YAAY,EAAEK,cAAc,CAAC;QAElD,IAAI;UACF,MAAMC,iBAAiB,GAAG,MAAMlD,gBAAgB,CAACiD,cAAc,CAAC;UAChE,IAAIC,iBAAiB,EAAE;YACrB9G,SAAS,CAACwG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBxF,GAAG,EAAE6F,cAAc;cACnBnB,MAAM,EAAEoB;YACV,CAAC;YACDxH,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,YAAY,CAAC;YAClCP,YAAY,EAAE;UAChB,CAAC,MAAM;YACL3G,OAAO,CAACwF,IAAI,CAAC,MAAM0B,CAAC,GAAC,CAAC,YAAY,CAAC;YACnC;YACAxG,SAAS,CAACwG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBxF,GAAG,EAAE6F;YACP,CAAC;UACH;QACF,CAAC,CAAC,OAAO3G,KAAK,EAAE;UACdZ,OAAO,CAACY,KAAK,CAAC,MAAMsG,CAAC,GAAC,CAAC,aAAa,EAAEtG,KAAK,CAAC;UAC5C;UACAF,SAAS,CAACwG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;YAChBxF,GAAG,EAAE6F;UACP,CAAC;QACH;MACF;IACF,CAAC,MAAM;MACLvH,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,UAAU,CAAC;IAClC;;IAEA;IACA,IAAIC,MAAM,CAACM,gBAAgB,EAAE;MAC3B,MAAMC,eAAe,GAAGd,cAAc,CAACO,MAAM,CAACM,gBAAgB,CAAC;MAC/DzH,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,WAAW,EAAEQ,eAAe,CAAC;MAElD,IAAIA,eAAe,CAAC/G,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAMgH,aAAa,GAAG,GAAGlB,OAAO,GAAGiB,eAAe,CAAC,CAAC,CAAC,EAAE;QACvD1H,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,YAAY,EAAES,aAAa,CAAC;QAEjD,IAAI;UACF,MAAMC,gBAAgB,GAAG,MAAMtD,gBAAgB,CAACqD,aAAa,CAAC;UAC9D,IAAIC,gBAAgB,EAAE;YACpBlH,SAAS,CAACwG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBxF,GAAG,EAAEiG,aAAa;cAClBvB,MAAM,EAAEwB;YACV,CAAC;YACD5H,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,YAAY,CAAC;YAClCP,YAAY,EAAE;UAChB,CAAC,MAAM;YACL3G,OAAO,CAACwF,IAAI,CAAC,MAAM0B,CAAC,GAAC,CAAC,YAAY,CAAC;YACnC;YACAxG,SAAS,CAACwG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;cAChBxF,GAAG,EAAEiG;YACP,CAAC;UACH;QACF,CAAC,CAAC,OAAO/G,KAAK,EAAE;UACdZ,OAAO,CAACY,KAAK,CAAC,MAAMsG,CAAC,GAAC,CAAC,aAAa,EAAEtG,KAAK,CAAC;UAC5C;UACAF,SAAS,CAACwG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;YAChBxF,GAAG,EAAEiG;UACP,CAAC;QACH;MACF;IACF,CAAC,MAAM;MACL3H,OAAO,CAACC,GAAG,CAAC,MAAMiH,CAAC,GAAC,CAAC,UAAU,CAAC;IAClC;;IAEA;IACA,IAAIC,MAAM,CAACU,SAAS,EAAE;MACpBnH,SAAS,CAACwG,CAAC,CAAC,CAACW,SAAS,GAAGV,MAAM,CAACU,SAAS;IAC3C;IAEAnB,cAAc,EAAE;EAClB;EAEA1G,OAAO,CAACC,GAAG,CAAC,kBAAkByG,cAAc,IAAIF,OAAO,CAAC7F,MAAM,aAAagG,YAAY,EAAE,CAAC;EAC1F,OAAOjG,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}