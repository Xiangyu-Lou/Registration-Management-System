{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter, useRoute } from 'vue-router';\nimport { ElMessage, ElImageViewer } from 'element-plus';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\nimport { ArrowLeft, Plus, Clock } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\nexport default {\n  name: 'EditRecordView',\n  components: {\n    ArrowLeft,\n    Plus,\n    Clock,\n    ElImageViewer\n  },\n  setup() {\n    const router = useRouter();\n    const route = useRoute();\n    const recordForm = ref(null);\n    const loading = ref(false);\n    const submitting = ref(false);\n    const unitName = ref('');\n    const wasteTypes = ref([]);\n    const units = ref([]);\n    const fileListBefore = ref([]);\n    const fileListAfter = ref([]);\n    const previewImages = ref([]);\n    const showViewer = ref(false);\n    const previewIndex = ref(0);\n    const createdAt = ref('');\n    const showUploadProgress = ref(false);\n    const uploadPercentage = ref(0);\n    const uploadStatus = ref('准备上传...');\n    const showLargeFileWarning = ref(false);\n\n    // 添加解析照片路径的函数\n    const parsePhotoPath = path => {\n      if (!path) return [];\n      console.log('解析照片路径，原始值:', path, '类型:', typeof path);\n      try {\n        // 如果已经是数组，直接返回\n        if (Array.isArray(path)) {\n          console.log('照片路径已经是数组:', path);\n          return path;\n        }\n\n        // 尝试解析为JSON\n        if (typeof path === 'string') {\n          // 检查是否是JSON数组格式\n          if (path.startsWith('[') && path.endsWith(']')) {\n            const parsed = JSON.parse(path);\n            console.log('照片路径解析为JSON数组:', parsed);\n            return parsed;\n          }\n\n          // 检查是否是逗号分隔的字符串\n          if (path.includes(',')) {\n            const paths = path.split(',').map(p => p.trim()).filter(p => p);\n            console.log('照片路径解析为逗号分隔字符串:', paths);\n            return paths;\n          }\n\n          // 单个路径\n          console.log('照片路径解析为单个字符串:', [path]);\n          return [path];\n        }\n\n        // 其他情况，尝试转换为字符串后处理\n        console.log('照片路径类型未知，尝试转换为字符串:', String(path));\n        return [String(path)];\n      } catch (error) {\n        console.error('解析照片路径失败:', error);\n        // 如果解析失败，将其作为单个路径返回\n        return typeof path === 'string' ? [path] : [];\n      }\n    };\n\n    // 是否为新增记录\n    const isNew = computed(() => {\n      return !route.params.id || route.params.id === 'new';\n    });\n\n    // 是否为超级管理员\n    const isSuperAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n\n    // 表单数据\n    const form = reactive({\n      unitId: '',\n      wasteTypeId: '',\n      location: '',\n      collectionDate: '',\n      collectionTime: '',\n      quantity: 0,\n      recordId: null,\n      creatorId: auth.state.user?.id || null,\n      photo_path_before: '',\n      photo_path_after: '',\n      remarks: ''\n    });\n    const rules = {\n      unitId: [{\n        required: true,\n        message: '请选择单位',\n        trigger: 'change'\n      }],\n      wasteTypeId: [{\n        required: true,\n        message: '请选择废物类型',\n        trigger: 'change'\n      }],\n      location: [{\n        required: true,\n        message: '请输入废物产生地点',\n        trigger: 'blur'\n      }],\n      collectionDate: [{\n        required: false\n      }],\n      collectionTime: [{\n        required: false\n      }],\n      quantity: [{\n        required: true,\n        message: '请输入收集数量',\n        trigger: 'change'\n      }]\n    };\n    onMounted(async () => {\n      loading.value = true;\n      try {\n        // 获取废物类型\n        await fetchWasteTypes();\n\n        // 如果是超级管理员，获取所有单位\n        if (isSuperAdmin.value) {\n          await fetchUnits();\n        }\n\n        // 如果是新增记录\n        if (isNew.value) {\n          // 新增记录默认使用当前用户的单位（非超级管理员）\n          if (!isSuperAdmin.value && auth.state.user) {\n            form.unitId = auth.state.user.unit_id;\n            await fetchUnitName(form.unitId);\n          }\n        } else {\n          // 只有在编辑现有记录时才获取记录详情\n          await fetchRecordDetails();\n        }\n      } catch (error) {\n        console.error('初始化数据失败:', error);\n        ElMessage.error('加载数据失败，请刷新重试');\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    // 获取单位列表\n    const fetchUnits = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        units.value = response.data;\n      } catch (error) {\n        console.error('获取单位列表失败:', error);\n        ElMessage.error('获取单位列表失败');\n      }\n    };\n\n    // 获取单位名称\n    const fetchUnitName = async unitId => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        const unit = response.data.find(u => u.id === parseInt(unitId));\n        if (unit) {\n          unitName.value = unit.name;\n        }\n      } catch (error) {\n        console.error('获取单位信息失败:', error);\n      }\n    };\n\n    // 获取废物类型\n    const fetchWasteTypes = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\n        wasteTypes.value = response.data;\n      } catch (error) {\n        console.error('获取废物类型失败:', error);\n        ElMessage.error('获取废物类型失败');\n      }\n    };\n\n    // 获取记录详情\n    const fetchRecordDetails = async () => {\n      try {\n        loading.value = true;\n        const response = await httpService.get(`${apiConfig.endpoints.wasteRecords}/detail/${route.params.id}`);\n        const record = response.data;\n        console.log('获取到的记录详情:', record);\n        form.unitId = record.unit_id;\n        form.wasteTypeId = record.waste_type_id;\n        form.location = record.location;\n        form.recordId = record.id;\n\n        // 处理收集时间\n        if (record.collection_start_time) {\n          const dateTime = new Date(record.collection_start_time);\n          form.collectionDate = dateTime.toISOString().slice(0, 10);\n          form.collectionTime = dateTime.toTimeString().slice(0, 5);\n        }\n        form.quantity = record.quantity;\n\n        // 处理照片\n        if (record.photo_path_before) {\n          console.log('收集前照片路径:', record.photo_path_before);\n          const photoPaths = parsePhotoPath(record.photo_path_before);\n          console.log('解析后的收集前照片路径:', photoPaths);\n          fileListBefore.value = photoPaths.map(path => {\n            // 构建完整URL\n            let fullUrl = path;\n            if (!path.startsWith('http')) {\n              // 移除开头的斜杠（如果有）\n              const cleanPath = path.startsWith('/') ? path.substring(1) : path;\n              fullUrl = `${window.location.origin}/${cleanPath}`;\n            }\n            console.log('收集前照片完整URL:', fullUrl);\n            return {\n              name: path.split('/').pop(),\n              url: fullUrl\n            };\n          });\n        }\n        if (record.photo_path_after) {\n          console.log('收集后照片路径:', record.photo_path_after);\n          const photoPaths = parsePhotoPath(record.photo_path_after);\n          console.log('解析后的收集后照片路径:', photoPaths);\n          fileListAfter.value = photoPaths.map(path => {\n            // 构建完整URL\n            let fullUrl = path;\n            if (!path.startsWith('http')) {\n              // 移除开头的斜杠（如果有）\n              const cleanPath = path.startsWith('/') ? path.substring(1) : path;\n              fullUrl = `${window.location.origin}/${cleanPath}`;\n            }\n            console.log('收集后照片完整URL:', fullUrl);\n            return {\n              name: path.split('/').pop(),\n              url: fullUrl\n            };\n          });\n        }\n\n        // 获取单位名称\n        unitName.value = record.unit_name;\n\n        // 设置创建时间\n        createdAt.value = record.created_at;\n\n        // 初始化预览图片列表\n        updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\n      } catch (error) {\n        console.error('获取记录详情失败:', error);\n        ElMessage.error('获取记录详情失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 处理上传前的文件处理\n    const handleBeforeUpload = async file => {\n      // 检查文件类型是否为图片\n      const acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\n      const isImage = acceptedTypes.includes(file.type);\n      if (!isImage) {\n        ElMessage.error('只能上传图片文件!');\n        return false;\n      }\n\n      // 检查文件大小（50MB = 50 * 1024 * 1024 bytes）\n      const maxSize = 50 * 1024 * 1024;\n      if (file.size > maxSize) {\n        ElMessage.error('图片大小不能超过50MB!');\n        return false;\n      }\n\n      // 使用compressToJpg函数处理图片\n      try {\n        // 显示处理进度提示\n        showUploadProgress.value = true;\n        uploadStatus.value = '正在处理图片...';\n        uploadPercentage.value = 0;\n\n        // 导入图片处理函数\n        const {\n          compressToJpg\n        } = await import('../utils/imageUtils');\n\n        // 处理图片，转换为JPG并压缩\n        const processedFile = await compressToJpg(file, progress => {\n          uploadPercentage.value = progress;\n        });\n\n        // 处理完成\n        uploadStatus.value = '图片处理完成';\n        uploadPercentage.value = 100;\n\n        // 延迟关闭进度条\n        setTimeout(() => {\n          showUploadProgress.value = false;\n        }, 500);\n        return processedFile;\n      } catch (error) {\n        console.error('图片处理失败:', error);\n        ElMessage.warning('图片处理失败，将使用原始图片');\n        showUploadProgress.value = false;\n        return file;\n      }\n    };\n\n    // 处理收集前的照片变更\n    const handlePhotoBeforeChange = (file, fileList) => {\n      console.log('收集前照片变更:', file);\n\n      // 检查是否有大文件\n      checkForLargeFiles(fileList);\n\n      // 确保文件有raw属性\n      if (file.raw === undefined && file.status === 'ready') {\n        file.raw = file.originFileObj || file;\n        console.log('为收集前照片添加raw属性:', file.raw);\n      }\n\n      // 更新文件列表\n      fileListBefore.value = fileList;\n\n      // 更新预览图片\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\n      return false; // 阻止自动上传\n    };\n\n    // 处理收集前的照片移除\n    const handlePhotoBeforeRemove = (file, fileList) => {\n      console.log('收集前照片移除:', file);\n\n      // 更新fileListBefore\n      fileListBefore.value = fileList;\n\n      // 如果没有大文件了，隐藏警告\n      if (!checkForLargeFiles([...fileListBefore.value, ...fileListAfter.value])) {\n        showLargeFileWarning.value = false;\n      }\n\n      // 更新预览图片\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\n    };\n\n    // 处理收集后的照片变更\n    const handlePhotoAfterChange = (file, fileList) => {\n      console.log('收集后照片变更:', file);\n\n      // 检查是否有大文件\n      checkForLargeFiles(fileList);\n\n      // 确保文件有raw属性\n      if (file.raw === undefined && file.status === 'ready') {\n        file.raw = file.originFileObj || file;\n        console.log('为收集后照片添加raw属性:', file.raw);\n      }\n\n      // 更新文件列表\n      fileListAfter.value = fileList;\n\n      // 更新预览图片\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\n      return false; // 阻止自动上传\n    };\n\n    // 处理收集后的照片移除\n    const handlePhotoAfterRemove = (file, fileList) => {\n      console.log('收集后照片移除:', file);\n\n      // 更新fileListAfter\n      fileListAfter.value = fileList;\n\n      // 如果没有大文件了，隐藏警告\n      if (!checkForLargeFiles([...fileListBefore.value, ...fileListAfter.value])) {\n        showLargeFileWarning.value = false;\n      }\n\n      // 更新预览图片\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\n    };\n\n    // 更新预览图片\n    const updatePreviewImages = fileList => {\n      previewImages.value = fileList.map(file => {\n        if (file.url) {\n          console.log('预览图片URL:', file.url);\n          return file.url;\n        } else if (file.raw) {\n          // 检查是否已经创建了Blob URL\n          if (!file._blobUrl) {\n            file._blobUrl = URL.createObjectURL(file.raw);\n          }\n          console.log('预览图片从raw创建:', file._blobUrl);\n          return file._blobUrl;\n        } else if (file instanceof File) {\n          // 检查是否已经创建了Blob URL\n          if (!file._blobUrl) {\n            file._blobUrl = URL.createObjectURL(file);\n          }\n          console.log('预览图片从File创建:', file._blobUrl);\n          return file._blobUrl;\n        }\n        return '';\n      }).filter(url => url);\n      console.log('预览图片列表:', previewImages.value);\n    };\n\n    // 处理图片预览\n    const handlePictureCardPreview = file => {\n      console.log('预览图片:', file);\n\n      // 更新预览图片列表\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\n\n      // 找到当前图片在预览列表中的索引\n      const index = previewImages.value.findIndex(url => {\n        if (file.url) {\n          return url === file.url;\n        } else if (file.raw) {\n          // 对于新上传的文件，需要比较Blob URL\n          const blobUrl = URL.createObjectURL(file.raw);\n          const result = url === blobUrl;\n          // 释放Blob URL\n          URL.revokeObjectURL(blobUrl);\n          return result;\n        }\n        return false;\n      });\n      if (index !== -1) {\n        previewIndex.value = index;\n      } else {\n        previewIndex.value = 0;\n      }\n\n      // 显示图片预览器\n      showViewer.value = true;\n    };\n\n    // 关闭图片预览\n    const closeViewer = () => {\n      showViewer.value = false;\n    };\n\n    // 检查是否有大文件\n    const checkForLargeFiles = files => {\n      const largeFileThreshold = 2 * 1024 * 1024; // 2MB\n      return files.some(file => file.size > largeFileThreshold);\n    };\n\n    // 处理上传进度\n    const handleUploadProgress = progressEvent => {\n      if (progressEvent.total) {\n        const percentage = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        uploadPercentage.value = percentage;\n        if (percentage < 33) {\n          uploadStatus.value = '正在上传文件...';\n        } else if (percentage < 66) {\n          uploadStatus.value = '正在处理文件...';\n        } else if (percentage < 100) {\n          uploadStatus.value = '即将完成...';\n        } else {\n          uploadStatus.value = '上传完成，正在保存...';\n        }\n      }\n    };\n\n    // 格式化百分比显示\n    const percentageFormat = percentage => {\n      return percentage === 100 ? '完成' : `${percentage}%`;\n    };\n\n    // 提交表单\n    const submitForm = async () => {\n      if (!recordForm.value) return;\n      await recordForm.value.validate(async valid => {\n        if (valid) {\n          // 显示上传进度对话框\n          uploadPercentage.value = 0;\n          uploadStatus.value = '正在上传文件...';\n          showUploadProgress.value = true;\n          try {\n            const formData = new FormData();\n            formData.append('unitId', form.unitId);\n            formData.append('wasteTypeId', form.wasteTypeId);\n            formData.append('location', form.location);\n            formData.append('collectionDate', form.collectionDate);\n            formData.append('collectionTime', form.collectionTime);\n            formData.append('quantity', form.quantity);\n            formData.append('remarks', form.remarks || '');\n\n            // 处理照片 - 根据后端逻辑，如果有新上传的照片，后端会删除所有旧照片\n            // 因此，我们需要合并现有照片和新上传的照片\n\n            // 处理收集前照片\n            if (fileListBefore.value.length > 0) {\n              const newFiles = fileListBefore.value.filter(file => file.raw);\n              const existingFiles = fileListBefore.value.filter(file => !file.raw);\n\n              // 如果有新上传的照片，我们需要将现有照片的URL转换为File对象\n              if (newFiles.length > 0) {\n                console.log('有新上传的收集前照片，需要合并现有照片');\n\n                // 将新照片添加到formData\n                newFiles.forEach(file => {\n                  if (file.raw) {\n                    console.log('添加新的收集前照片:', file.raw.name);\n                    formData.append('photo_before', file.raw);\n                  }\n                });\n\n                // 如果有现有照片，我们需要将它们的路径保存到photo_path_before字段\n                if (existingFiles.length > 0) {\n                  const existingPaths = existingFiles.map(file => {\n                    // 确保URL是相对路径\n                    let path = file.url;\n                    const origin = window.location.origin;\n                    if (path.startsWith(origin)) {\n                      path = path.substring(origin.length);\n                      // 确保路径以/开头\n                      if (!path.startsWith('/')) {\n                        path = '/' + path;\n                      }\n                    }\n                    return path;\n                  });\n                  console.log('保存现有收集前照片路径:', existingPaths);\n                  formData.append('photo_path_before', JSON.stringify(existingPaths));\n                }\n              } else if (existingFiles.length > 0) {\n                // 如果没有新上传的照片，只有现有照片，我们需要将它们的路径保存到photo_path_before字段\n                const existingPaths = existingFiles.map(file => {\n                  // 确保URL是相对路径\n                  let path = file.url;\n                  const origin = window.location.origin;\n                  if (path.startsWith(origin)) {\n                    path = path.substring(origin.length);\n                    // 确保路径以/开头\n                    if (!path.startsWith('/')) {\n                      path = '/' + path;\n                    }\n                  }\n                  return path;\n                });\n                console.log('保存现有收集前照片路径(无新照片):', existingPaths);\n                formData.append('photo_path_before', JSON.stringify(existingPaths));\n              }\n            } else {\n              // 如果没有照片，设置为空数组\n              formData.append('photo_path_before', JSON.stringify([]));\n            }\n\n            // 处理收集后照片\n            if (fileListAfter.value.length > 0) {\n              const newFiles = fileListAfter.value.filter(file => file.raw);\n              const existingFiles = fileListAfter.value.filter(file => !file.raw);\n\n              // 如果有新上传的照片，我们需要将现有照片的URL转换为File对象\n              if (newFiles.length > 0) {\n                console.log('有新上传的收集后照片，需要合并现有照片');\n\n                // 将新照片添加到formData\n                newFiles.forEach(file => {\n                  if (file.raw) {\n                    console.log('添加新的收集后照片:', file.raw.name);\n                    formData.append('photo_after', file.raw);\n                  }\n                });\n\n                // 如果有现有照片，我们需要将它们的路径保存到photo_path_after字段\n                if (existingFiles.length > 0) {\n                  const existingPaths = existingFiles.map(file => {\n                    // 确保URL是相对路径\n                    let path = file.url;\n                    const origin = window.location.origin;\n                    if (path.startsWith(origin)) {\n                      path = path.substring(origin.length);\n                      // 确保路径以/开头\n                      if (!path.startsWith('/')) {\n                        path = '/' + path;\n                      }\n                    }\n                    return path;\n                  });\n                  console.log('保存现有收集后照片路径:', existingPaths);\n                  formData.append('photo_path_after', JSON.stringify(existingPaths));\n                }\n              } else if (existingFiles.length > 0) {\n                // 如果没有新上传的照片，只有现有照片，我们需要将它们的路径保存到photo_path_after字段\n                const existingPaths = existingFiles.map(file => {\n                  // 确保URL是相对路径\n                  let path = file.url;\n                  const origin = window.location.origin;\n                  if (path.startsWith(origin)) {\n                    path = path.substring(origin.length);\n                    // 确保路径以/开头\n                    if (!path.startsWith('/')) {\n                      path = '/' + path;\n                    }\n                  }\n                  return path;\n                });\n                console.log('保存现有收集后照片路径(无新照片):', existingPaths);\n                formData.append('photo_path_after', JSON.stringify(existingPaths));\n              }\n            } else {\n              // 如果没有照片，设置为空数组\n              formData.append('photo_path_after', JSON.stringify([]));\n            }\n\n            // 打印FormData内容，用于调试\n            console.log('FormData内容:');\n            for (let [key, value] of formData.entries()) {\n              if (value instanceof File) {\n                console.log(`${key}: File - ${value.name} (${value.type}, ${value.size} bytes)`);\n              } else {\n                console.log(`${key}: ${value}`);\n              }\n            }\n\n            // 根据是新增还是编辑选择不同的API\n            if (form.recordId) {\n              await httpService.putForm(`${apiConfig.endpoints.wasteRecords}/${form.recordId}`, formData, handleUploadProgress);\n              ElMessage.success('废物记录更新成功');\n            } else {\n              await httpService.postForm(apiConfig.endpoints.wasteRecords, formData, handleUploadProgress);\n              ElMessage.success('废物记录添加成功');\n            }\n\n            // 关闭上传进度对话框\n            showUploadProgress.value = false;\n\n            // 返回列表页\n            goBack();\n          } catch (error) {\n            console.error('提交表单失败:', error);\n            if (error.response && error.response.data) {\n              console.error('服务器返回错误:', error.response.data);\n              ElMessage.error(`提交表单失败: ${error.response.data.error || '未知错误'}`);\n            } else {\n              ElMessage.error('提交表单失败，请检查网络连接');\n            }\n            showUploadProgress.value = false;\n          }\n        } else {\n          console.log('表单验证失败');\n          ElMessage.error('请填写所有必填字段');\n          return false;\n        }\n      });\n    };\n\n    // 返回上一页\n    const goBack = () => {\n      if (isSuperAdmin.value) {\n        router.push('/admin-records');\n      } else {\n        router.push({\n          name: 'RecordsList',\n          params: {\n            unitId: auth.state.user.unit_id\n          }\n        });\n      }\n    };\n    return {\n      form,\n      rules,\n      recordForm,\n      loading,\n      submitting,\n      unitName,\n      wasteTypes,\n      units,\n      fileListBefore,\n      fileListAfter,\n      previewImages,\n      showViewer,\n      previewIndex,\n      isNew,\n      isSuperAdmin,\n      parsePhotoPath,\n      handlePhotoBeforeChange,\n      handlePhotoBeforeRemove,\n      handlePhotoAfterChange,\n      handlePhotoAfterRemove,\n      handlePictureCardPreview,\n      handleBeforeUpload,\n      closeViewer,\n      submitForm,\n      goBack,\n      showUploadProgress,\n      uploadPercentage,\n      uploadStatus,\n      percentageFormat,\n      showLargeFileWarning\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useRouter","useRoute","ElMessage","ElImageViewer","httpService","apiConfig","ArrowLeft","Plus","Clock","auth","name","components","setup","router","route","recordForm","loading","submitting","unitName","wasteTypes","units","fileListBefore","fileListAfter","previewImages","showViewer","previewIndex","createdAt","showUploadProgress","uploadPercentage","uploadStatus","showLargeFileWarning","parsePhotoPath","path","console","log","Array","isArray","startsWith","endsWith","parsed","JSON","parse","includes","paths","split","map","p","trim","filter","String","error","isNew","params","id","isSuperAdmin","state","isLoggedIn","user","role_id","form","unitId","wasteTypeId","location","collectionDate","collectionTime","quantity","recordId","creatorId","photo_path_before","photo_path_after","remarks","rules","required","message","trigger","value","fetchWasteTypes","fetchUnits","unit_id","fetchUnitName","fetchRecordDetails","response","get","endpoints","data","unit","find","u","parseInt","wasteRecords","record","waste_type_id","collection_start_time","dateTime","Date","toISOString","slice","toTimeString","photoPaths","fullUrl","cleanPath","substring","window","origin","pop","url","unit_name","created_at","updatePreviewImages","handleBeforeUpload","file","acceptedTypes","isImage","type","maxSize","size","compressToJpg","processedFile","progress","setTimeout","warning","handlePhotoBeforeChange","fileList","checkForLargeFiles","raw","undefined","status","originFileObj","handlePhotoBeforeRemove","handlePhotoAfterChange","handlePhotoAfterRemove","_blobUrl","URL","createObjectURL","File","handlePictureCardPreview","index","findIndex","blobUrl","result","revokeObjectURL","closeViewer","files","largeFileThreshold","some","handleUploadProgress","progressEvent","total","percentage","Math","round","loaded","percentageFormat","submitForm","validate","valid","formData","FormData","append","length","newFiles","existingFiles","forEach","existingPaths","stringify","key","entries","putForm","success","postForm","goBack","push"],"sources":["F:\\Project\\Hazardous-waste-management-system\\frontend\\src\\views\\EditRecord.vue"],"sourcesContent":["<template>\r\n  <div class=\"edit-record-container\">\r\n    <div class=\"header\">\r\n      <div class=\"back-button\" @click=\"goBack\">\r\n        <el-icon><arrow-left /></el-icon> 返回\r\n      </div>\r\n      <h1>{{ isNew ? '新增废物记录' : '编辑废物记录' }}</h1>\r\n      <div></div>\r\n    </div>\r\n\r\n    <div class=\"content\">\r\n      <div class=\"form-header\">\r\n        <h2>{{ unitName }}</h2>\r\n      </div>\r\n\r\n      <el-form \r\n        ref=\"recordForm\" \r\n        :model=\"form\" \r\n        :rules=\"rules\" \r\n        label-width=\"120px\"\r\n        class=\"record-form\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <!-- 如果是超级管理员且是新增记录，显示单位选择 -->\r\n        <el-form-item label=\"单位\" prop=\"unitId\" v-if=\"isSuperAdmin && isNew\">\r\n          <el-select v-model=\"form.unitId\" placeholder=\"请选择单位\" style=\"width: 100%\">\r\n            <el-option \r\n              v-for=\"unit in units\" \r\n              :key=\"unit.id\" \r\n              :label=\"unit.name\" \r\n              :value=\"unit.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"废物类型\" prop=\"wasteTypeId\">\r\n          <el-select v-model=\"form.wasteTypeId\" placeholder=\"请选择废物类型\" style=\"width: 100%\">\r\n            <el-option \r\n              v-for=\"type in wasteTypes\" \r\n              :key=\"type.id\" \r\n              :label=\"type.name\" \r\n              :value=\"type.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"产生地点\" prop=\"location\">\r\n          <el-input v-model=\"form.location\" placeholder=\"请输入废物产生地点\" />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"收集日期\">\r\n          <el-date-picker\r\n            v-model=\"form.collectionDate\"\r\n            type=\"date\"\r\n            placeholder=\"选择日期\"\r\n            format=\"YYYY-MM-DD\"\r\n            value-format=\"YYYY-MM-DD\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"收集时间\">\r\n          <el-time-picker\r\n            v-model=\"form.collectionTime\"\r\n            format=\"HH:mm\"\r\n            placeholder=\"选择时间\"\r\n            value-format=\"HH:mm\"\r\n            style=\"width: 100%\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><clock /></el-icon>\r\n            </template>\r\n          </el-time-picker>\r\n          <!-- <div class=\"time-tip\">只需选择小时和分钟</div> -->\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"收集数量(吨)\" prop=\"quantity\">\r\n          <el-input-number \r\n            v-model=\"form.quantity\" \r\n            :min=\"0\" \r\n            :precision=\"3\" \r\n            :step=\"0.001\" \r\n            style=\"width: 100%\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"现场照片（收集前）\" prop=\"photo_path_before\">\r\n          <div class=\"photo-tip\">请上传废物收集前的现场照片（最多5张）</div>\r\n          <div class=\"upload-warning\" v-if=\"showLargeFileWarning\">\r\n            <el-alert\r\n              title=\"上传大文件可能会导致处理时间较长，请耐心等待\"\r\n              type=\"warning\"\r\n              :closable=\"false\"\r\n              show-icon\r\n            />\r\n          </div>\r\n          <el-upload\r\n            class=\"waste-photo-uploader\"\r\n            action=\"#\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handlePhotoBeforeChange\"\r\n            :on-remove=\"handlePhotoBeforeRemove\"\r\n            :file-list=\"fileListBefore\"\r\n            :limit=\"5\"\r\n            multiple\r\n            list-type=\"picture-card\"\r\n            :on-preview=\"handlePictureCardPreview\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            accept=\"image/jpeg,image/jpg,image/png,image/gif,image/bmp,image/webp,.jpeg,.jpg,.png,.gif,.bmp,.webp\"\r\n          >\r\n            <el-icon><plus /></el-icon>\r\n          </el-upload>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"现场照片（收集后）\" prop=\"photo_path_after\">\r\n          <div class=\"photo-tip\">请上传废物收集后的现场照片（最多5张）</div>\r\n          <el-upload\r\n            class=\"waste-photo-uploader\"\r\n            action=\"#\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handlePhotoAfterChange\"\r\n            :on-remove=\"handlePhotoAfterRemove\"\r\n            :file-list=\"fileListAfter\"\r\n            :limit=\"5\"\r\n            multiple\r\n            list-type=\"picture-card\"\r\n            :on-preview=\"handlePictureCardPreview\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            accept=\"image/jpeg,image/jpg,image/png,image/gif,image/bmp,image/webp,.jpeg,.jpg,.png,.gif,.bmp,.webp\"\r\n          >\r\n            <el-icon><plus /></el-icon>\r\n          </el-upload>\r\n          \r\n          <!-- 添加独立的图片预览组件 -->\r\n          <el-image-viewer\r\n            v-if=\"showViewer\"\r\n            :url-list=\"previewImages\"\r\n            :initial-index=\"previewIndex\"\r\n            @close=\"closeViewer\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"loading\">保存</el-button>\r\n          <el-button @click=\"goBack\">取消</el-button>\r\n        </el-form-item>\r\n        \r\n        <!-- 调试信息 -->\r\n        <el-collapse v-if=\"!isNew\">\r\n          <el-collapse-item title=\"调试信息\">\r\n            <div>\r\n              <h4>收集前照片路径:</h4>\r\n              <div v-for=\"(file, index) in fileListBefore\" :key=\"'before-'+index\">\r\n                <div>名称: {{ file.name }}</div>\r\n                <div>URL: {{ file.url }}</div>\r\n                <div>\r\n                  <img :src=\"file.url\" style=\"max-width: 200px; max-height: 200px;\" />\r\n                </div>\r\n                <hr />\r\n              </div>\r\n              \r\n              <h4>收集后照片路径:</h4>\r\n              <div v-for=\"(file, index) in fileListAfter\" :key=\"'after-'+index\">\r\n                <div>名称: {{ file.name }}</div>\r\n                <div>URL: {{ file.url }}</div>\r\n                <div>\r\n                  <img :src=\"file.url\" style=\"max-width: 200px; max-height: 200px;\" />\r\n                </div>\r\n                <hr />\r\n              </div>\r\n            </div>\r\n          </el-collapse-item>\r\n        </el-collapse>\r\n      </el-form>\r\n    </div>\r\n\r\n    <!-- 上传进度条对话框 -->\r\n    <el-dialog\r\n      v-model=\"showUploadProgress\"\r\n      title=\"正在上传文件\"\r\n      width=\"30%\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n    >\r\n      <div class=\"upload-progress\">\r\n        <p>正在上传文件，请勿关闭页面...</p>\r\n        <el-progress \r\n          :percentage=\"uploadPercentage\" \r\n          :format=\"percentageFormat\"\r\n          :status=\"uploadPercentage === 100 ? 'success' : ''\"\r\n        ></el-progress>\r\n        <p class=\"upload-status\">{{ uploadStatus }}</p>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <div class=\"footer\">\r\n      <p>&copy; 2025 危险废物管理系统</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, computed } from 'vue';\r\nimport { useRouter, useRoute } from 'vue-router';\r\nimport { ElMessage, ElImageViewer } from 'element-plus';\r\nimport httpService from '../config/httpService';\r\nimport apiConfig from '../config/api';\r\nimport { ArrowLeft, Plus, Clock } from '@element-plus/icons-vue';\r\nimport auth from '../store/auth';\r\n\r\nexport default {\r\n  name: 'EditRecordView',\r\n  components: {\r\n    ArrowLeft,\r\n    Plus,\r\n    Clock,\r\n    ElImageViewer\r\n  },\r\n  setup() {\r\n    const router = useRouter();\r\n    const route = useRoute();\r\n    const recordForm = ref(null);\r\n    const loading = ref(false);\r\n    const submitting = ref(false);\r\n    const unitName = ref('');\r\n    const wasteTypes = ref([]);\r\n    const units = ref([]);\r\n    const fileListBefore = ref([]);\r\n    const fileListAfter = ref([]);\r\n    const previewImages = ref([]);\r\n    const showViewer = ref(false);\r\n    const previewIndex = ref(0);\r\n    const createdAt = ref('');\r\n    const showUploadProgress = ref(false);\r\n    const uploadPercentage = ref(0);\r\n    const uploadStatus = ref('准备上传...');\r\n    const showLargeFileWarning = ref(false);\r\n    \r\n    // 添加解析照片路径的函数\r\n    const parsePhotoPath = (path) => {\r\n      if (!path) return [];\r\n      \r\n      console.log('解析照片路径，原始值:', path, '类型:', typeof path);\r\n      \r\n      try {\r\n        // 如果已经是数组，直接返回\r\n        if (Array.isArray(path)) {\r\n          console.log('照片路径已经是数组:', path);\r\n          return path;\r\n        }\r\n        \r\n        // 尝试解析为JSON\r\n        if (typeof path === 'string') {\r\n          // 检查是否是JSON数组格式\r\n          if (path.startsWith('[') && path.endsWith(']')) {\r\n            const parsed = JSON.parse(path);\r\n            console.log('照片路径解析为JSON数组:', parsed);\r\n            return parsed;\r\n          }\r\n          \r\n          // 检查是否是逗号分隔的字符串\r\n          if (path.includes(',')) {\r\n            const paths = path.split(',').map(p => p.trim()).filter(p => p);\r\n            console.log('照片路径解析为逗号分隔字符串:', paths);\r\n            return paths;\r\n          }\r\n          \r\n          // 单个路径\r\n          console.log('照片路径解析为单个字符串:', [path]);\r\n          return [path];\r\n        }\r\n        \r\n        // 其他情况，尝试转换为字符串后处理\r\n        console.log('照片路径类型未知，尝试转换为字符串:', String(path));\r\n        return [String(path)];\r\n      } catch (error) {\r\n        console.error('解析照片路径失败:', error);\r\n        // 如果解析失败，将其作为单个路径返回\r\n        return typeof path === 'string' ? [path] : [];\r\n      }\r\n    };\r\n    \r\n    // 是否为新增记录\r\n    const isNew = computed(() => {\r\n      return !route.params.id || route.params.id === 'new';\r\n    });\r\n    \r\n    // 是否为超级管理员\r\n    const isSuperAdmin = computed(() => {\r\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\r\n    });\r\n    \r\n    // 表单数据\r\n    const form = reactive({\r\n      unitId: '',\r\n      wasteTypeId: '',\r\n      location: '',\r\n      collectionDate: '',\r\n      collectionTime: '',\r\n      quantity: 0,\r\n      recordId: null,\r\n      creatorId: auth.state.user?.id || null,\r\n      photo_path_before: '',\r\n      photo_path_after: '',\r\n      remarks: ''\r\n    });\r\n\r\n    const rules = {\r\n      unitId: [\r\n        { required: true, message: '请选择单位', trigger: 'change' }\r\n      ],\r\n      wasteTypeId: [\r\n        { required: true, message: '请选择废物类型', trigger: 'change' }\r\n      ],\r\n      location: [\r\n        { required: true, message: '请输入废物产生地点', trigger: 'blur' }\r\n      ],\r\n      collectionDate: [\r\n        { required: false }\r\n      ],\r\n      collectionTime: [\r\n        { required: false }\r\n      ],\r\n      quantity: [\r\n        { required: true, message: '请输入收集数量', trigger: 'change' }\r\n      ]\r\n    };\r\n\r\n    onMounted(async () => {\r\n      loading.value = true;\r\n      \r\n      try {\r\n        // 获取废物类型\r\n        await fetchWasteTypes();\r\n        \r\n        // 如果是超级管理员，获取所有单位\r\n        if (isSuperAdmin.value) {\r\n          await fetchUnits();\r\n        }\r\n        \r\n        // 如果是新增记录\r\n        if (isNew.value) {\r\n          // 新增记录默认使用当前用户的单位（非超级管理员）\r\n          if (!isSuperAdmin.value && auth.state.user) {\r\n            form.unitId = auth.state.user.unit_id;\r\n            await fetchUnitName(form.unitId);\r\n          }\r\n        } else {\r\n          // 只有在编辑现有记录时才获取记录详情\r\n          await fetchRecordDetails();\r\n        }\r\n      } catch (error) {\r\n        console.error('初始化数据失败:', error);\r\n        ElMessage.error('加载数据失败，请刷新重试');\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    });\r\n\r\n    // 获取单位列表\r\n    const fetchUnits = async () => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.units);\r\n        units.value = response.data;\r\n      } catch (error) {\r\n        console.error('获取单位列表失败:', error);\r\n        ElMessage.error('获取单位列表失败');\r\n      }\r\n    };\r\n\r\n    // 获取单位名称\r\n    const fetchUnitName = async (unitId) => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.units);\r\n        const unit = response.data.find(u => u.id === parseInt(unitId));\r\n        if (unit) {\r\n          unitName.value = unit.name;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取单位信息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取废物类型\r\n    const fetchWasteTypes = async () => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\r\n        wasteTypes.value = response.data;\r\n      } catch (error) {\r\n        console.error('获取废物类型失败:', error);\r\n        ElMessage.error('获取废物类型失败');\r\n      }\r\n    };\r\n\r\n    // 获取记录详情\r\n    const fetchRecordDetails = async () => {\r\n      try {\r\n        loading.value = true;\r\n        const response = await httpService.get(`${apiConfig.endpoints.wasteRecords}/detail/${route.params.id}`);\r\n        \r\n        const record = response.data;\r\n        console.log('获取到的记录详情:', record);\r\n        \r\n        form.unitId = record.unit_id;\r\n        form.wasteTypeId = record.waste_type_id;\r\n        form.location = record.location;\r\n        form.recordId = record.id;\r\n        \r\n        // 处理收集时间\r\n        if (record.collection_start_time) {\r\n          const dateTime = new Date(record.collection_start_time);\r\n          form.collectionDate = dateTime.toISOString().slice(0, 10);\r\n          form.collectionTime = dateTime.toTimeString().slice(0, 5);\r\n        }\r\n        \r\n        form.quantity = record.quantity;\r\n        \r\n        // 处理照片\r\n        if (record.photo_path_before) {\r\n          console.log('收集前照片路径:', record.photo_path_before);\r\n          const photoPaths = parsePhotoPath(record.photo_path_before);\r\n          console.log('解析后的收集前照片路径:', photoPaths);\r\n          \r\n          fileListBefore.value = photoPaths.map(path => {\r\n            // 构建完整URL\r\n            let fullUrl = path;\r\n            if (!path.startsWith('http')) {\r\n              // 移除开头的斜杠（如果有）\r\n              const cleanPath = path.startsWith('/') ? path.substring(1) : path;\r\n              fullUrl = `${window.location.origin}/${cleanPath}`;\r\n            }\r\n            \r\n            console.log('收集前照片完整URL:', fullUrl);\r\n            \r\n            return {\r\n              name: path.split('/').pop(),\r\n              url: fullUrl\r\n            };\r\n          });\r\n        }\r\n        \r\n        if (record.photo_path_after) {\r\n          console.log('收集后照片路径:', record.photo_path_after);\r\n          const photoPaths = parsePhotoPath(record.photo_path_after);\r\n          console.log('解析后的收集后照片路径:', photoPaths);\r\n          \r\n          fileListAfter.value = photoPaths.map(path => {\r\n            // 构建完整URL\r\n            let fullUrl = path;\r\n            if (!path.startsWith('http')) {\r\n              // 移除开头的斜杠（如果有）\r\n              const cleanPath = path.startsWith('/') ? path.substring(1) : path;\r\n              fullUrl = `${window.location.origin}/${cleanPath}`;\r\n            }\r\n            \r\n            console.log('收集后照片完整URL:', fullUrl);\r\n            \r\n            return {\r\n              name: path.split('/').pop(),\r\n              url: fullUrl\r\n            };\r\n          });\r\n        }\r\n        \r\n        // 获取单位名称\r\n        unitName.value = record.unit_name;\r\n        \r\n        // 设置创建时间\r\n        createdAt.value = record.created_at;\r\n        \r\n        // 初始化预览图片列表\r\n        updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\r\n        \r\n      } catch (error) {\r\n        console.error('获取记录详情失败:', error);\r\n        ElMessage.error('获取记录详情失败');\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // 处理上传前的文件处理\r\n    const handleBeforeUpload = async (file) => {\r\n      // 检查文件类型是否为图片\r\n      const acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\r\n      const isImage = acceptedTypes.includes(file.type);\r\n      \r\n      if (!isImage) {\r\n        ElMessage.error('只能上传图片文件!');\r\n        return false;\r\n      }\r\n\r\n      // 检查文件大小（50MB = 50 * 1024 * 1024 bytes）\r\n      const maxSize = 50 * 1024 * 1024;\r\n      if (file.size > maxSize) {\r\n        ElMessage.error('图片大小不能超过50MB!');\r\n        return false;\r\n      }\r\n      \r\n      // 使用compressToJpg函数处理图片\r\n      try {\r\n        // 显示处理进度提示\r\n        showUploadProgress.value = true;\r\n        uploadStatus.value = '正在处理图片...';\r\n        uploadPercentage.value = 0;\r\n        \r\n        // 导入图片处理函数\r\n        const { compressToJpg } = await import('../utils/imageUtils');\r\n        \r\n        // 处理图片，转换为JPG并压缩\r\n        const processedFile = await compressToJpg(file, (progress) => {\r\n          uploadPercentage.value = progress;\r\n        });\r\n        \r\n        // 处理完成\r\n        uploadStatus.value = '图片处理完成';\r\n        uploadPercentage.value = 100;\r\n        \r\n        // 延迟关闭进度条\r\n        setTimeout(() => {\r\n          showUploadProgress.value = false;\r\n        }, 500);\r\n        \r\n        return processedFile;\r\n      } catch (error) {\r\n        console.error('图片处理失败:', error);\r\n        ElMessage.warning('图片处理失败，将使用原始图片');\r\n        showUploadProgress.value = false;\r\n        return file;\r\n      }\r\n    };\r\n\r\n    // 处理收集前的照片变更\r\n    const handlePhotoBeforeChange = (file, fileList) => {\r\n      console.log('收集前照片变更:', file);\r\n      \r\n      // 检查是否有大文件\r\n      checkForLargeFiles(fileList);\r\n      \r\n      // 确保文件有raw属性\r\n      if (file.raw === undefined && file.status === 'ready') {\r\n        file.raw = file.originFileObj || file;\r\n        console.log('为收集前照片添加raw属性:', file.raw);\r\n      }\r\n      \r\n      // 更新文件列表\r\n      fileListBefore.value = fileList;\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\r\n      \r\n      return false; // 阻止自动上传\r\n    };\r\n\r\n    // 处理收集前的照片移除\r\n    const handlePhotoBeforeRemove = (file, fileList) => {\r\n      console.log('收集前照片移除:', file);\r\n      \r\n      // 更新fileListBefore\r\n      fileListBefore.value = fileList;\r\n      \r\n      // 如果没有大文件了，隐藏警告\r\n      if (!checkForLargeFiles([...fileListBefore.value, ...fileListAfter.value])) {\r\n        showLargeFileWarning.value = false;\r\n      }\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\r\n    };\r\n\r\n    // 处理收集后的照片变更\r\n    const handlePhotoAfterChange = (file, fileList) => {\r\n      console.log('收集后照片变更:', file);\r\n      \r\n      // 检查是否有大文件\r\n      checkForLargeFiles(fileList);\r\n      \r\n      // 确保文件有raw属性\r\n      if (file.raw === undefined && file.status === 'ready') {\r\n        file.raw = file.originFileObj || file;\r\n        console.log('为收集后照片添加raw属性:', file.raw);\r\n      }\r\n      \r\n      // 更新文件列表\r\n      fileListAfter.value = fileList;\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\r\n      \r\n      return false; // 阻止自动上传\r\n    };\r\n\r\n    // 处理收集后的照片移除\r\n    const handlePhotoAfterRemove = (file, fileList) => {\r\n      console.log('收集后照片移除:', file);\r\n      \r\n      // 更新fileListAfter\r\n      fileListAfter.value = fileList;\r\n      \r\n      // 如果没有大文件了，隐藏警告\r\n      if (!checkForLargeFiles([...fileListBefore.value, ...fileListAfter.value])) {\r\n        showLargeFileWarning.value = false;\r\n      }\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\r\n    };\r\n\r\n    // 更新预览图片\r\n    const updatePreviewImages = (fileList) => {\r\n      previewImages.value = fileList.map(file => {\r\n        if (file.url) {\r\n          console.log('预览图片URL:', file.url);\r\n          return file.url;\r\n        } else if (file.raw) {\r\n          // 检查是否已经创建了Blob URL\r\n          if (!file._blobUrl) {\r\n            file._blobUrl = URL.createObjectURL(file.raw);\r\n          }\r\n          console.log('预览图片从raw创建:', file._blobUrl);\r\n          return file._blobUrl;\r\n        } else if (file instanceof File) {\r\n          // 检查是否已经创建了Blob URL\r\n          if (!file._blobUrl) {\r\n            file._blobUrl = URL.createObjectURL(file);\r\n          }\r\n          console.log('预览图片从File创建:', file._blobUrl);\r\n          return file._blobUrl;\r\n        }\r\n        return '';\r\n      }).filter(url => url);\r\n      \r\n      console.log('预览图片列表:', previewImages.value);\r\n    };\r\n\r\n    // 处理图片预览\r\n    const handlePictureCardPreview = (file) => {\r\n      console.log('预览图片:', file);\r\n      \r\n      // 更新预览图片列表\r\n      updatePreviewImages([...fileListBefore.value, ...fileListAfter.value]);\r\n      \r\n      // 找到当前图片在预览列表中的索引\r\n      const index = previewImages.value.findIndex(url => {\r\n        if (file.url) {\r\n          return url === file.url;\r\n        } else if (file.raw) {\r\n          // 对于新上传的文件，需要比较Blob URL\r\n          const blobUrl = URL.createObjectURL(file.raw);\r\n          const result = url === blobUrl;\r\n          // 释放Blob URL\r\n          URL.revokeObjectURL(blobUrl);\r\n          return result;\r\n        }\r\n        return false;\r\n      });\r\n      \r\n      if (index !== -1) {\r\n        previewIndex.value = index;\r\n      } else {\r\n        previewIndex.value = 0;\r\n      }\r\n      \r\n      // 显示图片预览器\r\n      showViewer.value = true;\r\n    };\r\n    \r\n    // 关闭图片预览\r\n    const closeViewer = () => {\r\n      showViewer.value = false;\r\n    };\r\n\r\n    // 检查是否有大文件\r\n    const checkForLargeFiles = (files) => {\r\n      const largeFileThreshold = 2 * 1024 * 1024; // 2MB\r\n      return files.some(file => file.size > largeFileThreshold);\r\n    };\r\n\r\n    // 处理上传进度\r\n    const handleUploadProgress = (progressEvent) => {\r\n      if (progressEvent.total) {\r\n        const percentage = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n        uploadPercentage.value = percentage;\r\n        \r\n        if (percentage < 33) {\r\n          uploadStatus.value = '正在上传文件...';\r\n        } else if (percentage < 66) {\r\n          uploadStatus.value = '正在处理文件...';\r\n        } else if (percentage < 100) {\r\n          uploadStatus.value = '即将完成...';\r\n        } else {\r\n          uploadStatus.value = '上传完成，正在保存...';\r\n        }\r\n      }\r\n    };\r\n\r\n    // 格式化百分比显示\r\n    const percentageFormat = (percentage) => {\r\n      return percentage === 100 ? '完成' : `${percentage}%`;\r\n    };\r\n\r\n    // 提交表单\r\n    const submitForm = async () => {\r\n      if (!recordForm.value) return;\r\n      \r\n      await recordForm.value.validate(async (valid) => {\r\n        if (valid) {\r\n          // 显示上传进度对话框\r\n          uploadPercentage.value = 0;\r\n          uploadStatus.value = '正在上传文件...';\r\n          showUploadProgress.value = true;\r\n          \r\n          try {\r\n            const formData = new FormData();\r\n            formData.append('unitId', form.unitId);\r\n            formData.append('wasteTypeId', form.wasteTypeId);\r\n            formData.append('location', form.location);\r\n            formData.append('collectionDate', form.collectionDate);\r\n            formData.append('collectionTime', form.collectionTime);\r\n            formData.append('quantity', form.quantity);\r\n            formData.append('remarks', form.remarks || '');\r\n            \r\n            // 处理照片 - 根据后端逻辑，如果有新上传的照片，后端会删除所有旧照片\r\n            // 因此，我们需要合并现有照片和新上传的照片\r\n            \r\n            // 处理收集前照片\r\n            if (fileListBefore.value.length > 0) {\r\n              const newFiles = fileListBefore.value.filter(file => file.raw);\r\n              const existingFiles = fileListBefore.value.filter(file => !file.raw);\r\n              \r\n              // 如果有新上传的照片，我们需要将现有照片的URL转换为File对象\r\n              if (newFiles.length > 0) {\r\n                console.log('有新上传的收集前照片，需要合并现有照片');\r\n                \r\n                // 将新照片添加到formData\r\n                newFiles.forEach(file => {\r\n                  if (file.raw) {\r\n                    console.log('添加新的收集前照片:', file.raw.name);\r\n                    formData.append('photo_before', file.raw);\r\n                  }\r\n                });\r\n                \r\n                // 如果有现有照片，我们需要将它们的路径保存到photo_path_before字段\r\n                if (existingFiles.length > 0) {\r\n                  const existingPaths = existingFiles.map(file => {\r\n                    // 确保URL是相对路径\r\n                    let path = file.url;\r\n                    const origin = window.location.origin;\r\n                    if (path.startsWith(origin)) {\r\n                      path = path.substring(origin.length);\r\n                      // 确保路径以/开头\r\n                      if (!path.startsWith('/')) {\r\n                        path = '/' + path;\r\n                      }\r\n                    }\r\n                    return path;\r\n                  });\r\n                  \r\n                  console.log('保存现有收集前照片路径:', existingPaths);\r\n                  formData.append('photo_path_before', JSON.stringify(existingPaths));\r\n                }\r\n              } else if (existingFiles.length > 0) {\r\n                // 如果没有新上传的照片，只有现有照片，我们需要将它们的路径保存到photo_path_before字段\r\n                const existingPaths = existingFiles.map(file => {\r\n                  // 确保URL是相对路径\r\n                  let path = file.url;\r\n                  const origin = window.location.origin;\r\n                  if (path.startsWith(origin)) {\r\n                    path = path.substring(origin.length);\r\n                    // 确保路径以/开头\r\n                    if (!path.startsWith('/')) {\r\n                      path = '/' + path;\r\n                    }\r\n                  }\r\n                  return path;\r\n                });\r\n                \r\n                console.log('保存现有收集前照片路径(无新照片):', existingPaths);\r\n                formData.append('photo_path_before', JSON.stringify(existingPaths));\r\n              }\r\n            } else {\r\n              // 如果没有照片，设置为空数组\r\n              formData.append('photo_path_before', JSON.stringify([]));\r\n            }\r\n            \r\n            // 处理收集后照片\r\n            if (fileListAfter.value.length > 0) {\r\n              const newFiles = fileListAfter.value.filter(file => file.raw);\r\n              const existingFiles = fileListAfter.value.filter(file => !file.raw);\r\n              \r\n              // 如果有新上传的照片，我们需要将现有照片的URL转换为File对象\r\n              if (newFiles.length > 0) {\r\n                console.log('有新上传的收集后照片，需要合并现有照片');\r\n                \r\n                // 将新照片添加到formData\r\n                newFiles.forEach(file => {\r\n                  if (file.raw) {\r\n                    console.log('添加新的收集后照片:', file.raw.name);\r\n                    formData.append('photo_after', file.raw);\r\n                  }\r\n                });\r\n                \r\n                // 如果有现有照片，我们需要将它们的路径保存到photo_path_after字段\r\n                if (existingFiles.length > 0) {\r\n                  const existingPaths = existingFiles.map(file => {\r\n                    // 确保URL是相对路径\r\n                    let path = file.url;\r\n                    const origin = window.location.origin;\r\n                    if (path.startsWith(origin)) {\r\n                      path = path.substring(origin.length);\r\n                      // 确保路径以/开头\r\n                      if (!path.startsWith('/')) {\r\n                        path = '/' + path;\r\n                      }\r\n                    }\r\n                    return path;\r\n                  });\r\n                  \r\n                  console.log('保存现有收集后照片路径:', existingPaths);\r\n                  formData.append('photo_path_after', JSON.stringify(existingPaths));\r\n                }\r\n              } else if (existingFiles.length > 0) {\r\n                // 如果没有新上传的照片，只有现有照片，我们需要将它们的路径保存到photo_path_after字段\r\n                const existingPaths = existingFiles.map(file => {\r\n                  // 确保URL是相对路径\r\n                  let path = file.url;\r\n                  const origin = window.location.origin;\r\n                  if (path.startsWith(origin)) {\r\n                    path = path.substring(origin.length);\r\n                    // 确保路径以/开头\r\n                    if (!path.startsWith('/')) {\r\n                      path = '/' + path;\r\n                    }\r\n                  }\r\n                  return path;\r\n                });\r\n                \r\n                console.log('保存现有收集后照片路径(无新照片):', existingPaths);\r\n                formData.append('photo_path_after', JSON.stringify(existingPaths));\r\n              }\r\n            } else {\r\n              // 如果没有照片，设置为空数组\r\n              formData.append('photo_path_after', JSON.stringify([]));\r\n            }\r\n            \r\n            // 打印FormData内容，用于调试\r\n            console.log('FormData内容:');\r\n            for (let [key, value] of formData.entries()) {\r\n              if (value instanceof File) {\r\n                console.log(`${key}: File - ${value.name} (${value.type}, ${value.size} bytes)`);\r\n              } else {\r\n                console.log(`${key}: ${value}`);\r\n              }\r\n            }\r\n            \r\n            // 根据是新增还是编辑选择不同的API\r\n            if (form.recordId) {\r\n              await httpService.putForm(\r\n                `${apiConfig.endpoints.wasteRecords}/${form.recordId}`, \r\n                formData,\r\n                handleUploadProgress\r\n              );\r\n              ElMessage.success('废物记录更新成功');\r\n            } else {\r\n              await httpService.postForm(\r\n                apiConfig.endpoints.wasteRecords, \r\n                formData,\r\n                handleUploadProgress\r\n              );\r\n              ElMessage.success('废物记录添加成功');\r\n            }\r\n            \r\n            // 关闭上传进度对话框\r\n            showUploadProgress.value = false;\r\n            \r\n            // 返回列表页\r\n            goBack();\r\n          } catch (error) {\r\n            console.error('提交表单失败:', error);\r\n            if (error.response && error.response.data) {\r\n              console.error('服务器返回错误:', error.response.data);\r\n              ElMessage.error(`提交表单失败: ${error.response.data.error || '未知错误'}`);\r\n            } else {\r\n              ElMessage.error('提交表单失败，请检查网络连接');\r\n            }\r\n            showUploadProgress.value = false;\r\n          }\r\n        } else {\r\n          console.log('表单验证失败');\r\n          ElMessage.error('请填写所有必填字段');\r\n          return false;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 返回上一页\r\n    const goBack = () => {\r\n      if (isSuperAdmin.value) {\r\n        router.push('/admin-records');\r\n      } else {\r\n        router.push({ \r\n          name: 'RecordsList', \r\n          params: { unitId: auth.state.user.unit_id } \r\n        });\r\n      }\r\n    };\r\n\r\n    return {\r\n      form,\r\n      rules,\r\n      recordForm,\r\n      loading,\r\n      submitting,\r\n      unitName,\r\n      wasteTypes,\r\n      units,\r\n      fileListBefore,\r\n      fileListAfter,\r\n      previewImages,\r\n      showViewer,\r\n      previewIndex,\r\n      isNew,\r\n      isSuperAdmin,\r\n      parsePhotoPath,\r\n      handlePhotoBeforeChange,\r\n      handlePhotoBeforeRemove,\r\n      handlePhotoAfterChange,\r\n      handlePhotoAfterRemove,\r\n      handlePictureCardPreview,\r\n      handleBeforeUpload,\r\n      closeViewer,\r\n      submitForm,\r\n      goBack,\r\n      showUploadProgress,\r\n      uploadPercentage,\r\n      uploadStatus,\r\n      percentageFormat,\r\n      showLargeFileWarning\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.edit-record-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n}\r\n\r\n.header {\r\n  background-color: #409EFF;\r\n  color: white;\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.back-button {\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\n.content {\r\n  flex: 1;\r\n  padding: 30px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.form-header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-header h2 {\r\n  color: #333;\r\n  border-bottom: 2px solid #409EFF;\r\n  display: inline-block;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.record-form {\r\n  background-color: #f9f9f9;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.waste-photo-uploader {\r\n  width: 100%;\r\n}\r\n\r\n.photo-tip, .time-tip {\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-top: 5px;\r\n}\r\n\r\n.footer {\r\n  background-color: #f5f5f5;\r\n  padding: 15px;\r\n  text-align: center;\r\n  color: #666;\r\n}\r\n\r\n.upload-warning {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.upload-progress {\r\n  text-align: center;\r\n  padding: 10px;\r\n}\r\n\r\n.upload-status {\r\n  margin-top: 10px;\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n\r\n<style>\r\n/* 修复Element Plus图片预览组件的z-index问题 */\r\n.el-image-viewer__wrapper {\r\n  z-index: 2147483647 !important; /* 使用最大可能的z-index值 */\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的遮罩层也在最上层 */\r\n.el-image-viewer__mask {\r\n  z-index: 2147483646 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的操作按钮在最上层 */\r\n.el-image-viewer__btn {\r\n  z-index: 2147483647 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的关闭按钮在最上层 */\r\n.el-image-viewer__close {\r\n  z-index: 2147483647 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的图片在最上层 */\r\n.el-image-viewer__img {\r\n  z-index: 2147483646 !important;\r\n  position: relative !important;\r\n}\r\n\r\n/* 确保图片预览的操作栏在最上层 */\r\n.el-image-viewer__actions {\r\n  z-index: 2147483647 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的缩放按钮在最上层 */\r\n.el-image-viewer__actions__inner {\r\n  z-index: 2147483647 !important;\r\n  position: relative !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}