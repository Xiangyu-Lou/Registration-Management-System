{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 如果有图片数据，使用XLSX导出\n  if (imageData && Object.keys(imageData).length > 0) {\n    try {\n      console.log('尝试导出带图片的Excel...');\n\n      // 创建工作簿\n      const wb = XLSX.utils.book_new();\n      console.log('工作簿创建成功');\n\n      // 准备数据（添加图片链接列）\n      const enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n      console.log('数据准备完成，开始创建工作表');\n\n      // 创建工作表\n      const ws = XLSX.utils.json_to_sheet(enhancedData, {\n        header: headers.map(h => h.field)\n      });\n      console.log('工作表创建成功');\n\n      // 设置列宽\n      const colWidths = headers.map(() => ({\n        wch: 20\n      }));\n      ws['!cols'] = colWidths;\n\n      // 添加工作表到工作簿\n      XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n      console.log('工作表已添加到工作簿');\n\n      // 导出Excel文件\n      const excelFileName = `${fileName}_${timestamp}.xlsx`;\n      console.log('准备导出Excel文件:', excelFileName);\n\n      // 使用writeFile导出（仅在浏览器环境中有效）\n      try {\n        console.log('尝试使用XLSX.writeFile方法导出...');\n        XLSX.writeFile(wb, excelFileName);\n        console.log('Excel导出成功 (使用writeFile方法)');\n        return true;\n      } catch (e) {\n        console.warn('使用writeFile导出失败，错误:', e);\n        console.log('尝试使用替代方法导出...');\n\n        // 替代方法：手动创建下载链接\n        const wbout = XLSX.write(wb, {\n          bookType: 'xlsx',\n          type: 'array'\n        });\n        console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n        const blob = new Blob([wbout], {\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        console.log('Blob创建成功，大小:', blob.size, '字节');\n        const url = URL.createObjectURL(blob);\n        console.log('URL创建成功:', url.substring(0, 30) + '...');\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = excelFileName;\n        console.log('下载链接创建成功，准备触发点击');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n        console.log('Excel导出成功（使用替代方法）');\n        return true;\n      }\n    } catch (error) {\n      console.error('导出带图片的Excel失败，错误详情:', error);\n      console.log('回退到CSV导出');\n      // 如果带图片导出失败，回退到CSV导出\n      exportToCSV(data, fileName, headers);\n      return false;\n    }\n  } else {\n    console.log('没有图片数据或图片数据为空，使用CSV导出');\n    // 使用CSV导出\n    exportToCSV(data, fileName, headers);\n    return true;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nconst exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\nconst imageUrlToBase64 = async url => {\n  console.log('开始转换图片到Base64:', url);\n\n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n\n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, {\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = e => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n\n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n\n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = e => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n\n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @param {Function} parsePhotoPath 解析照片路径的函数\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\n  console.log('准备导出数据，记录数量:', records.length);\n  console.log('基础URL:', baseUrl);\n\n  // 准备导出数据\n  const dataToExport = [];\n  const imageData = {};\n\n  // 处理每条记录\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n    console.log(`处理记录 ${i + 1}/${records.length}`);\n\n    // 基本数据\n    const exportItem = {\n      '单位': record.unit_name || '',\n      '废物类型': record.waste_type_name || '',\n      '收集地点': record.location || '',\n      '收集时间': record.collection_start_time ? new Date(record.collection_start_time).toLocaleString() : '',\n      '数量(kg)': record.quantity || 0,\n      '记录时间': record.created_at ? new Date(record.created_at).toLocaleString() : '',\n      '汇报人': record.creator_name || '未知',\n      '清理前照片': '',\n      '清理后照片': ''\n    };\n    dataToExport.push(exportItem);\n\n    // 处理清理前照片\n    try {\n      console.log(`检查记录 ${i + 1} 的清理前照片`);\n      console.log('照片路径:', record.photo_path_before);\n      const beforePhotos = parsePhotoPath(record.photo_path_before);\n      console.log('解析后的照片路径:', beforePhotos);\n      if (beforePhotos && beforePhotos.length > 0) {\n        const photoUrl = beforePhotos[0].startsWith('http') ? beforePhotos[0] : `${baseUrl}${beforePhotos[0]}`;\n        console.log(`记录${i + 1}清理前照片URL:`, photoUrl);\n        if (!imageData[i]) imageData[i] = {};\n        imageData[i][7] = {\n          url: photoUrl,\n          width: 150,\n          height: 100\n        };\n\n        // 尝试转换为base64（可选）\n        try {\n          console.log('尝试转换清理前照片到base64');\n          const base64Data = await imageUrlToBase64(photoUrl);\n          if (base64Data) {\n            console.log('清理前照片base64转换成功，长度:', base64Data.length);\n            imageData[i][7].base64 = base64Data;\n          } else {\n            console.warn('清理前照片base64转换失败，返回null');\n          }\n        } catch (e) {\n          console.warn('转换清理前照片到base64失败:', e);\n        }\n      } else {\n        console.log(`记录 ${i + 1} 没有清理前照片`);\n      }\n    } catch (error) {\n      console.error('处理清理前照片失败:', error);\n    }\n\n    // 处理清理后照片\n    try {\n      console.log(`检查记录 ${i + 1} 的清理后照片`);\n      console.log('照片路径:', record.photo_path_after);\n      const afterPhotos = parsePhotoPath(record.photo_path_after);\n      console.log('解析后的照片路径:', afterPhotos);\n      if (afterPhotos && afterPhotos.length > 0) {\n        const photoUrl = afterPhotos[0].startsWith('http') ? afterPhotos[0] : `${baseUrl}${afterPhotos[0]}`;\n        console.log(`记录${i + 1}清理后照片URL:`, photoUrl);\n        if (!imageData[i]) imageData[i] = {};\n        imageData[i][8] = {\n          url: photoUrl,\n          width: 150,\n          height: 100\n        };\n\n        // 尝试转换为base64（可选）\n        try {\n          console.log('尝试转换清理后照片到base64');\n          const base64Data = await imageUrlToBase64(photoUrl);\n          if (base64Data) {\n            console.log('清理后照片base64转换成功，长度:', base64Data.length);\n            imageData[i][8].base64 = base64Data;\n          } else {\n            console.warn('清理后照片base64转换失败，返回null');\n          }\n        } catch (e) {\n          console.warn('转换清理后照片到base64失败:', e);\n        }\n      } else {\n        console.log(`记录 ${i + 1} 没有清理后照片`);\n      }\n    } catch (error) {\n      console.error('处理清理后照片失败:', error);\n    }\n  }\n  console.log('导出数据准备完成，数据条数:', dataToExport.length);\n  console.log('图片数据条数:', Object.keys(imageData).length);\n  return {\n    dataToExport,\n    imageData\n  };\n};","map":{"version":3,"names":["XLSX","console","log","version","Object","keys","join","exportToExcel","data","fileName","headers","imageData","length","error","replace","timestamp","Date","toISOString","substring","wb","utils","book_new","enhancedData","map","row","index","newRow","url","ws","json_to_sheet","header","h","field","colWidths","wch","book_append_sheet","excelFileName","writeFile","e","warn","wbout","write","bookType","type","blob","Blob","size","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportToCSV","csvFileName","csvContent","headerRow","title","forEach","item","value","undefined","cellValue","String","includes","setAttribute","style","visibility","imageUrlToBase64","response","fetch","mode","cache","ok","Error","status","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","img","Image","crossOrigin","onload","src","width","height","canvas","ctx","getContext","drawImage","base64","toDataURL","error2","prepareImageExportData","records","baseUrl","parsePhotoPath","dataToExport","i","record","exportItem","unit_name","waste_type_name","location","collection_start_time","toLocaleString","quantity","created_at","creator_name","push","photo_path_before","beforePhotos","photoUrl","startsWith","base64Data","photo_path_after","afterPhotos"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 如果有图片数据，使用XLSX导出\r\n  if (imageData && Object.keys(imageData).length > 0) {\r\n    try {\r\n      console.log('尝试导出带图片的Excel...');\r\n      \r\n      // 创建工作簿\r\n      const wb = XLSX.utils.book_new();\r\n      console.log('工作簿创建成功');\r\n      \r\n      // 准备数据（添加图片链接列）\r\n      const enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n      \r\n      console.log('数据准备完成，开始创建工作表');\r\n      \r\n      // 创建工作表\r\n      const ws = XLSX.utils.json_to_sheet(enhancedData, {\r\n        header: headers.map(h => h.field)\r\n      });\r\n      \r\n      console.log('工作表创建成功');\r\n      \r\n      // 设置列宽\r\n      const colWidths = headers.map(() => ({ wch: 20 }));\r\n      ws['!cols'] = colWidths;\r\n      \r\n      // 添加工作表到工作簿\r\n      XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n      console.log('工作表已添加到工作簿');\r\n      \r\n      // 导出Excel文件\r\n      const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n      console.log('准备导出Excel文件:', excelFileName);\r\n      \r\n      // 使用writeFile导出（仅在浏览器环境中有效）\r\n      try {\r\n        console.log('尝试使用XLSX.writeFile方法导出...');\r\n        XLSX.writeFile(wb, excelFileName);\r\n        console.log('Excel导出成功 (使用writeFile方法)');\r\n        return true;\r\n      } catch (e) {\r\n        console.warn('使用writeFile导出失败，错误:', e);\r\n        console.log('尝试使用替代方法导出...');\r\n        \r\n        // 替代方法：手动创建下载链接\r\n        const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n        \r\n        const blob = new Blob([wbout], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n        console.log('Blob创建成功，大小:', blob.size, '字节');\r\n        \r\n        const url = URL.createObjectURL(blob);\r\n        console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n        \r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = excelFileName;\r\n        console.log('下载链接创建成功，准备触发点击');\r\n        \r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n        \r\n        console.log('Excel导出成功（使用替代方法）');\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('导出带图片的Excel失败，错误详情:', error);\r\n      console.log('回退到CSV导出');\r\n      // 如果带图片导出失败，回退到CSV导出\r\n      exportToCSV(data, fileName, headers);\r\n      return false;\r\n    }\r\n  } else {\r\n    console.log('没有图片数据或图片数据为空，使用CSV导出');\r\n    // 使用CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return true;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nconst exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\r\nconst imageUrlToBase64 = async (url) => {\r\n  console.log('开始转换图片到Base64:', url);\r\n  \r\n  // 确保URL有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('无效的图片URL:', url);\r\n    return null;\r\n  }\r\n  \r\n  // 尝试方法1：使用fetch API\r\n  try {\r\n    console.log('尝试使用fetch API获取图片...');\r\n    const response = await fetch(url, { \r\n      mode: 'cors',\r\n      cache: 'no-cache'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP错误: ${response.status}`);\r\n    }\r\n    \r\n    const blob = await response.blob();\r\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = (e) => {\r\n        console.error('FileReader错误:', e);\r\n        reject(e);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  } catch (error) {\r\n    console.warn('使用fetch API获取图片失败:', error);\r\n    \r\n    // 尝试方法2：使用Image对象\r\n    try {\r\n      console.log('尝试使用Image对象获取图片...');\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous'; // 允许跨域\r\n      \r\n      // 等待图片加载\r\n      await new Promise((resolve, reject) => {\r\n        img.onload = resolve;\r\n        img.onerror = (e) => {\r\n          console.error('图片加载错误:', e);\r\n          reject(e);\r\n        };\r\n        img.src = url;\r\n      });\r\n      \r\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\r\n      \r\n      // 创建canvas并绘制图片\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n      \r\n      // 转换为base64\r\n      const base64 = canvas.toDataURL('image/jpeg');\r\n      console.log('图片转换为Base64成功，长度:', base64.length);\r\n      return base64;\r\n    } catch (error2) {\r\n      console.error('使用Image对象获取图片也失败:', error2);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @param {Function} parsePhotoPath 解析照片路径的函数\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\r\n  console.log('准备导出数据，记录数量:', records.length);\r\n  console.log('基础URL:', baseUrl);\r\n  \r\n  // 准备导出数据\r\n  const dataToExport = [];\r\n  const imageData = {};\r\n  \r\n  // 处理每条记录\r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    console.log(`处理记录 ${i+1}/${records.length}`);\r\n    \r\n    // 基本数据\r\n    const exportItem = {\r\n      '单位': record.unit_name || '',\r\n      '废物类型': record.waste_type_name || '',\r\n      '收集地点': record.location || '',\r\n      '收集时间': record.collection_start_time ? new Date(record.collection_start_time).toLocaleString() : '',\r\n      '数量(kg)': record.quantity || 0,\r\n      '记录时间': record.created_at ? new Date(record.created_at).toLocaleString() : '',\r\n      '汇报人': record.creator_name || '未知',\r\n      '清理前照片': '',\r\n      '清理后照片': ''\r\n    };\r\n    \r\n    dataToExport.push(exportItem);\r\n    \r\n    // 处理清理前照片\r\n    try {\r\n      console.log(`检查记录 ${i+1} 的清理前照片`);\r\n      console.log('照片路径:', record.photo_path_before);\r\n      \r\n      const beforePhotos = parsePhotoPath(record.photo_path_before);\r\n      console.log('解析后的照片路径:', beforePhotos);\r\n      \r\n      if (beforePhotos && beforePhotos.length > 0) {\r\n        const photoUrl = beforePhotos[0].startsWith('http') \r\n          ? beforePhotos[0] \r\n          : `${baseUrl}${beforePhotos[0]}`;\r\n        \r\n        console.log(`记录${i+1}清理前照片URL:`, photoUrl);\r\n        \r\n        if (!imageData[i]) imageData[i] = {};\r\n        imageData[i][7] = { \r\n          url: photoUrl,\r\n          width: 150, \r\n          height: 100 \r\n        };\r\n        \r\n        // 尝试转换为base64（可选）\r\n        try {\r\n          console.log('尝试转换清理前照片到base64');\r\n          const base64Data = await imageUrlToBase64(photoUrl);\r\n          if (base64Data) {\r\n            console.log('清理前照片base64转换成功，长度:', base64Data.length);\r\n            imageData[i][7].base64 = base64Data;\r\n          } else {\r\n            console.warn('清理前照片base64转换失败，返回null');\r\n          }\r\n        } catch (e) {\r\n          console.warn('转换清理前照片到base64失败:', e);\r\n        }\r\n      } else {\r\n        console.log(`记录 ${i+1} 没有清理前照片`);\r\n      }\r\n    } catch (error) {\r\n      console.error('处理清理前照片失败:', error);\r\n    }\r\n    \r\n    // 处理清理后照片\r\n    try {\r\n      console.log(`检查记录 ${i+1} 的清理后照片`);\r\n      console.log('照片路径:', record.photo_path_after);\r\n      \r\n      const afterPhotos = parsePhotoPath(record.photo_path_after);\r\n      console.log('解析后的照片路径:', afterPhotos);\r\n      \r\n      if (afterPhotos && afterPhotos.length > 0) {\r\n        const photoUrl = afterPhotos[0].startsWith('http') \r\n          ? afterPhotos[0] \r\n          : `${baseUrl}${afterPhotos[0]}`;\r\n        \r\n        console.log(`记录${i+1}清理后照片URL:`, photoUrl);\r\n        \r\n        if (!imageData[i]) imageData[i] = {};\r\n        imageData[i][8] = { \r\n          url: photoUrl,\r\n          width: 150, \r\n          height: 100 \r\n        };\r\n        \r\n        // 尝试转换为base64（可选）\r\n        try {\r\n          console.log('尝试转换清理后照片到base64');\r\n          const base64Data = await imageUrlToBase64(photoUrl);\r\n          if (base64Data) {\r\n            console.log('清理后照片base64转换成功，长度:', base64Data.length);\r\n            imageData[i][8].base64 = base64Data;\r\n          } else {\r\n            console.warn('清理后照片base64转换失败，返回null');\r\n          }\r\n        } catch (e) {\r\n          console.warn('转换清理后照片到base64失败:', e);\r\n        }\r\n      } else {\r\n        console.log(`记录 ${i+1} 没有清理后照片`);\r\n      }\r\n    } catch (error) {\r\n      console.error('处理清理后照片失败:', error);\r\n    }\r\n  }\r\n  \r\n  console.log('导出数据准备完成，数据条数:', dataToExport.length);\r\n  console.log('图片数据条数:', Object.keys(imageData).length);\r\n  \r\n  return { dataToExport, imageData };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}