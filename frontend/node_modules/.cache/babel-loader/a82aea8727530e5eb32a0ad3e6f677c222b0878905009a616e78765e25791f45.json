{"ast":null,"code":"/**\r\n * 图片处理工具函数\r\n */\nimport Compressor from 'compressorjs';\n\n/**\r\n * 将图片转换为JPG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {Function} onProgress - 进度回调函数（可选）\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\nexport const compressToJpg = (file, onProgress) => {\n  return new Promise(resolve => {\n    // 报告进度：开始\n    if (onProgress) onProgress(0);\n    console.log('开始处理图片:', file.name, '类型:', file.type, '大小:', (file.size / 1024).toFixed(2), 'KB');\n\n    // 检查是否为图片\n    if (!file.type.startsWith('image/')) {\n      console.warn('文件不是图片类型:', file.type);\n      if (onProgress) onProgress(100);\n      resolve(file); // 如果不是图片，直接返回原文件\n      return;\n    }\n\n    // 报告进度：25%\n    if (onProgress) onProgress(25);\n\n    // 使用compressorjs处理图片\n    new Compressor(file, {\n      quality: 0.6,\n      // 中等压缩 (0-1)\n      maxWidth: 1920,\n      // 最大宽度\n      maxHeight: 1920,\n      // 最大高度\n      mimeType: 'image/jpeg',\n      // 强制转换为JPEG\n      convertSize: 0,\n      // 所有图片都转换格式\n      // 报告进度：50%\n      beforeDraw() {\n        if (onProgress) onProgress(50);\n        console.log('图片处理中...');\n      },\n      // 报告进度：75%\n      drew() {\n        if (onProgress) onProgress(75);\n        console.log('图片绘制完成');\n      },\n      success(result) {\n        // 创建新的文件名（确保扩展名为.jpg）\n        const fileName = file.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\n\n        // 创建新的File对象\n        const processedFile = new File([result], fileName, {\n          type: 'image/jpeg',\n          lastModified: new Date().getTime()\n        });\n\n        // 输出处理结果日志\n        console.log('图片处理完成:');\n        console.log('- 原始大小:', (file.size / 1024).toFixed(2), 'KB');\n        console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\n        console.log('- 压缩率:', Math.round((1 - processedFile.size / file.size) * 100), '%');\n        console.log('- 处理后文件类型:', processedFile.type);\n        console.log('- 处理后文件名:', processedFile.name);\n\n        // 报告进度：完成\n        if (onProgress) onProgress(100);\n        resolve(processedFile);\n      },\n      error(err) {\n        console.error('图片压缩失败:', err);\n        // 如果处理失败，返回原始文件\n        if (onProgress) onProgress(100);\n        resolve(file);\n      }\n    });\n  });\n};\n\n/**\r\n * 批量处理图片文件，转换为JPG并压缩\r\n * @param {File[]} files - 图片文件数组\r\n * @param {Function} onProgress - 进度回调函数（可选）\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\nexport const batchCompressToJpg = async (files, onProgress) => {\n  if (!files || files.length === 0) {\n    return [];\n  }\n  const processedFiles = [];\n  const totalFiles = files.length;\n  for (let i = 0; i < totalFiles; i++) {\n    // 计算并报告当前进度\n    const currentProgress = Math.round(i / totalFiles * 100);\n    if (onProgress) onProgress(currentProgress);\n\n    // 处理单个文件\n    const processedFile = await compressToJpg(files[i]);\n    processedFiles.push(processedFile);\n  }\n\n  // 报告进度：完成\n  if (onProgress) onProgress(100);\n  return processedFiles;\n};\n\n/**\r\n * 简单的图片处理函数（不进行转换或压缩）\r\n * @param {File} file - 原始图片文件\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File>} - 原始图片文件\r\n */\nexport const convertAndCompressImage = (file, onProgress) => {\n  return new Promise(resolve => {\n    // 报告进度：开始\n    if (onProgress) onProgress(0);\n\n    // 立即报告100%进度\n    setTimeout(() => {\n      if (onProgress) onProgress(100);\n      // 直接返回原始文件\n      resolve(file);\n    }, 10);\n  });\n};\n\n/**\r\n * 批量处理图片文件（不进行实际处理）\r\n * @param {File[]} files - 图片文件数组\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File[]>} - 原始图片文件数组\r\n */\nexport const batchProcessImages = async (files, onProgress) => {\n  if (!files || files.length === 0) {\n    return [];\n  }\n\n  // 立即报告100%进度\n  if (onProgress) onProgress(100);\n\n  // 直接返回原始文件数组\n  return files;\n};","map":{"version":3,"names":["Compressor","compressToJpg","file","onProgress","Promise","resolve","console","log","name","type","size","toFixed","startsWith","warn","quality","maxWidth","maxHeight","mimeType","convertSize","beforeDraw","drew","success","result","fileName","replace","processedFile","File","lastModified","Date","getTime","Math","round","error","err","batchCompressToJpg","files","length","processedFiles","totalFiles","i","currentProgress","push","convertAndCompressImage","setTimeout","batchProcessImages"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\r\n * 图片处理工具函数\r\n */\r\nimport Compressor from 'compressorjs';\r\n\r\n/**\r\n * 将图片转换为JPG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {Function} onProgress - 进度回调函数（可选）\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\r\nexport const compressToJpg = (file, onProgress) => {\r\n  return new Promise((resolve) => {\r\n    // 报告进度：开始\r\n    if (onProgress) onProgress(0);\r\n    \r\n    console.log('开始处理图片:', file.name, '类型:', file.type, '大小:', (file.size / 1024).toFixed(2), 'KB');\r\n    \r\n    // 检查是否为图片\r\n    if (!file.type.startsWith('image/')) {\r\n      console.warn('文件不是图片类型:', file.type);\r\n      if (onProgress) onProgress(100);\r\n      resolve(file); // 如果不是图片，直接返回原文件\r\n      return;\r\n    }\r\n    \r\n    // 报告进度：25%\r\n    if (onProgress) onProgress(25);\r\n    \r\n    // 使用compressorjs处理图片\r\n    new Compressor(file, {\r\n      quality: 0.6,           // 中等压缩 (0-1)\r\n      maxWidth: 1920,         // 最大宽度\r\n      maxHeight: 1920,        // 最大高度\r\n      mimeType: 'image/jpeg', // 强制转换为JPEG\r\n      convertSize: 0,         // 所有图片都转换格式\r\n      // 报告进度：50%\r\n      beforeDraw() {\r\n        if (onProgress) onProgress(50);\r\n        console.log('图片处理中...');\r\n      },\r\n      // 报告进度：75%\r\n      drew() {\r\n        if (onProgress) onProgress(75);\r\n        console.log('图片绘制完成');\r\n      },\r\n      success(result) {\r\n        // 创建新的文件名（确保扩展名为.jpg）\r\n        const fileName = file.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\r\n        \r\n        // 创建新的File对象\r\n        const processedFile = new File([result], fileName, {\r\n          type: 'image/jpeg',\r\n          lastModified: new Date().getTime()\r\n        });\r\n        \r\n        // 输出处理结果日志\r\n        console.log('图片处理完成:');\r\n        console.log('- 原始大小:', (file.size / 1024).toFixed(2), 'KB');\r\n        console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\r\n        console.log('- 压缩率:', Math.round((1 - processedFile.size / file.size) * 100), '%');\r\n        console.log('- 处理后文件类型:', processedFile.type);\r\n        console.log('- 处理后文件名:', processedFile.name);\r\n        \r\n        // 报告进度：完成\r\n        if (onProgress) onProgress(100);\r\n        resolve(processedFile);\r\n      },\r\n      error(err) {\r\n        console.error('图片压缩失败:', err);\r\n        // 如果处理失败，返回原始文件\r\n        if (onProgress) onProgress(100);\r\n        resolve(file);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 批量处理图片文件，转换为JPG并压缩\r\n * @param {File[]} files - 图片文件数组\r\n * @param {Function} onProgress - 进度回调函数（可选）\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\r\nexport const batchCompressToJpg = async (files, onProgress) => {\r\n  if (!files || files.length === 0) {\r\n    return [];\r\n  }\r\n  \r\n  const processedFiles = [];\r\n  const totalFiles = files.length;\r\n  \r\n  for (let i = 0; i < totalFiles; i++) {\r\n    // 计算并报告当前进度\r\n    const currentProgress = Math.round((i / totalFiles) * 100);\r\n    if (onProgress) onProgress(currentProgress);\r\n    \r\n    // 处理单个文件\r\n    const processedFile = await compressToJpg(files[i]);\r\n    processedFiles.push(processedFile);\r\n  }\r\n  \r\n  // 报告进度：完成\r\n  if (onProgress) onProgress(100);\r\n  \r\n  return processedFiles;\r\n};\r\n\r\n/**\r\n * 简单的图片处理函数（不进行转换或压缩）\r\n * @param {File} file - 原始图片文件\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File>} - 原始图片文件\r\n */\r\nexport const convertAndCompressImage = (file, onProgress) => {\r\n  return new Promise((resolve) => {\r\n    // 报告进度：开始\r\n    if (onProgress) onProgress(0);\r\n    \r\n    // 立即报告100%进度\r\n    setTimeout(() => {\r\n      if (onProgress) onProgress(100);\r\n      // 直接返回原始文件\r\n      resolve(file);\r\n    }, 10);\r\n  });\r\n};\r\n\r\n/**\r\n * 批量处理图片文件（不进行实际处理）\r\n * @param {File[]} files - 图片文件数组\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File[]>} - 原始图片文件数组\r\n */\r\nexport const batchProcessImages = async (files, onProgress) => {\r\n  if (!files || files.length === 0) {\r\n    return [];\r\n  }\r\n  \r\n  // 立即报告100%进度\r\n  if (onProgress) onProgress(100);\r\n  \r\n  // 直接返回原始文件数组\r\n  return files;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}