{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter, useRoute } from 'vue-router';\nimport { ElMessage, ElImageViewer } from 'element-plus';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\nimport { ArrowLeft, Plus, Clock } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\nimport { convertAndCompressImage } from '../utils/imageUtils';\nexport default {\n  name: 'EditRecordView',\n  components: {\n    ArrowLeft,\n    Plus,\n    Clock,\n    ElImageViewer\n  },\n  setup() {\n    const router = useRouter();\n    const route = useRoute();\n    const recordForm = ref(null);\n    const loading = ref(false);\n    const submitting = ref(false);\n    const unitName = ref('');\n    const wasteTypes = ref([]);\n    const units = ref([]);\n    const photoBeforeList = ref([]);\n    const photoAfterList = ref([]);\n    const photoBeforeFiles = ref([]);\n    const photoAfterFiles = ref([]);\n    const existingPhotosPathsBefore = ref([]);\n    const existingPhotosPathsAfter = ref([]);\n    const previewImages = ref([]);\n    const showViewer = ref(false);\n    const previewIndex = ref(0);\n    const createdAt = ref('');\n\n    // 是否为新增记录\n    const isNew = computed(() => {\n      return !route.params.id || route.params.id === 'new';\n    });\n\n    // 是否为超级管理员\n    const isSuperAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n\n    // 表单数据\n    const form = reactive({\n      unitId: '',\n      wasteTypeId: '',\n      location: '',\n      collectionDate: '',\n      collectionTime: '',\n      quantity: 0,\n      recordId: null,\n      creatorId: auth.state.user?.id || null\n    });\n    const rules = {\n      unitId: [{\n        required: true,\n        message: '请选择单位',\n        trigger: 'change'\n      }],\n      wasteTypeId: [{\n        required: true,\n        message: '请选择废物类型',\n        trigger: 'change'\n      }],\n      location: [{\n        required: true,\n        message: '请输入废物产生地点',\n        trigger: 'blur'\n      }],\n      collectionDate: [{\n        required: false\n      }],\n      collectionTime: [{\n        required: false\n      }],\n      quantity: [{\n        required: true,\n        message: '请输入收集数量',\n        trigger: 'change'\n      }]\n    };\n    onMounted(async () => {\n      loading.value = true;\n      try {\n        // 获取废物类型\n        await fetchWasteTypes();\n\n        // 如果是超级管理员，获取所有单位\n        if (isSuperAdmin.value) {\n          await fetchUnits();\n        }\n\n        // 如果是新增记录\n        if (isNew.value) {\n          // 新增记录默认使用当前用户的单位（非超级管理员）\n          if (!isSuperAdmin.value && auth.state.user) {\n            form.unitId = auth.state.user.unit_id;\n            await fetchUnitName(form.unitId);\n          }\n        } else {\n          // 只有在编辑现有记录时才获取记录详情\n          await fetchRecordDetails();\n        }\n      } catch (error) {\n        console.error('初始化数据失败:', error);\n        ElMessage.error('加载数据失败，请刷新重试');\n      } finally {\n        loading.value = false;\n      }\n    });\n\n    // 获取单位列表\n    const fetchUnits = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        units.value = response.data;\n      } catch (error) {\n        console.error('获取单位列表失败:', error);\n        ElMessage.error('获取单位列表失败');\n      }\n    };\n\n    // 获取单位名称\n    const fetchUnitName = async unitId => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        const unit = response.data.find(u => u.id === parseInt(unitId));\n        if (unit) {\n          unitName.value = unit.name;\n        }\n      } catch (error) {\n        console.error('获取单位信息失败:', error);\n      }\n    };\n\n    // 获取废物类型\n    const fetchWasteTypes = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\n        wasteTypes.value = response.data;\n      } catch (error) {\n        console.error('获取废物类型失败:', error);\n        ElMessage.error('获取废物类型失败');\n      }\n    };\n\n    // 获取记录详情\n    const fetchRecordDetails = async () => {\n      try {\n        loading.value = true;\n        const response = await httpService.get(`${apiConfig.endpoints.wasteRecords}/detail/${route.params.id}`);\n        const record = response.data;\n        console.log('获取到的记录详情:', record);\n        form.unitId = record.unit_id;\n        form.wasteTypeId = record.waste_type_id;\n        form.location = record.location;\n        form.recordId = record.id;\n\n        // 处理收集时间\n        if (record.collection_start_time) {\n          const dateTime = new Date(record.collection_start_time);\n          form.collectionDate = dateTime.toISOString().slice(0, 10);\n          form.collectionTime = dateTime.toTimeString().slice(0, 5);\n        }\n        form.quantity = record.quantity;\n\n        // 处理照片路径\n        try {\n          // 处理收集前照片\n          let photoPathsBefore = [];\n          if (record.photo_path_before) {\n            photoPathsBefore = JSON.parse(record.photo_path_before);\n            console.log('解析的收集前照片路径:', photoPathsBefore);\n          }\n\n          // 处理收集后照片\n          let photoPathsAfter = [];\n          if (record.photo_path_after) {\n            photoPathsAfter = JSON.parse(record.photo_path_after);\n            console.log('解析的收集后照片路径:', photoPathsAfter);\n          }\n\n          // 设置已有照片路径\n          existingPhotosPathsBefore.value = photoPathsBefore;\n          existingPhotosPathsAfter.value = photoPathsAfter;\n\n          // 设置上传组件的文件列表，使现有照片能显示在上传组件中\n          photoBeforeList.value = photoPathsBefore.map((path, index) => {\n            const url = `${apiConfig.baseURL}${path}`;\n            console.log(`收集前照片${index + 1}的URL:`, url);\n            return {\n              name: `收集前照片${index + 1}`,\n              url: url,\n              uid: `before-${index}`,\n              status: 'success' // 添加状态，表示已上传成功\n            };\n          });\n          photoAfterList.value = photoPathsAfter.map((path, index) => {\n            const url = `${apiConfig.baseURL}${path}`;\n            console.log(`收集后照片${index + 1}的URL:`, url);\n            return {\n              name: `收集后照片${index + 1}`,\n              url: url,\n              uid: `after-${index}`,\n              status: 'success' // 添加状态，表示已上传成功\n            };\n          });\n\n          // 更新预览图片\n          updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\n        } catch (error) {\n          console.error('解析照片路径失败:', error);\n          previewImages.value = [];\n          existingPhotosPathsBefore.value = [];\n          existingPhotosPathsAfter.value = [];\n          photoBeforeList.value = [];\n          photoAfterList.value = [];\n        }\n\n        // 获取单位名称\n        unitName.value = record.unit_name;\n\n        // 设置创建时间\n        createdAt.value = record.created_at;\n      } catch (error) {\n        console.error('获取记录详情失败:', error);\n        ElMessage.error('获取记录详情失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 处理上传前的文件处理\n    const handleBeforeUpload = async file => {\n      // 检查文件类型是否为图片\n      const acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\n      const isImage = acceptedTypes.includes(file.type);\n      if (!isImage) {\n        ElMessage.error('只能上传图片文件!');\n        return false;\n      }\n      try {\n        // 处理图片\n        const processedFile = await convertAndCompressImage(file);\n        // 替换原始文件\n        file.raw = processedFile;\n        file.name = processedFile.name;\n        file.type = processedFile.type;\n\n        // 为文件添加唯一标识符\n        if (!file.uid) {\n          file.uid = Date.now() + '-' + Math.random().toString(36).substr(2, 10);\n        }\n        return true; // 允许上传\n      } catch (error) {\n        console.error('图片处理失败:', error);\n        ElMessage.error('图片处理失败，请重试');\n        return false;\n      }\n    };\n\n    // 处理收集前的照片变更\n    const handlePhotoBeforeChange = (file, fileList) => {\n      console.log('收集前照片变更:', file, fileList);\n\n      // 更新photoBeforeList\n      photoBeforeList.value = fileList;\n\n      // 更新photoBeforeFiles，只包含新上传的文件\n      photoBeforeFiles.value = fileList.filter(f => f.raw) // 只处理新上传的文件\n      .map(f => f.raw);\n\n      // 更新existingPhotosPathsBefore，只保留仍在fileList中的现有照片\n      if (!isNew.value) {\n        const existingFileUids = fileList.filter(f => f.uid && typeof f.uid === 'string' && f.uid.startsWith('before-')).map(f => f.uid);\n\n        // 保留仍在fileList中的现有照片\n        existingPhotosPathsBefore.value = existingPhotosPathsBefore.value.filter((_, index) => {\n          return existingFileUids.includes(`before-${index}`);\n        });\n      }\n\n      // 更新预览图片\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\n      return false; // 阻止自动上传\n    };\n\n    // 处理收集前的照片移除\n    const handlePhotoBeforeRemove = (file, fileList) => {\n      console.log('收集前照片移除:', file, fileList);\n\n      // 更新photoBeforeList\n      photoBeforeList.value = fileList;\n\n      // 如果是现有照片，从existingPhotosPathsBefore中移除\n      if (file.uid && typeof file.uid === 'string' && file.uid.startsWith('before-')) {\n        const index = parseInt(file.uid.replace('before-', ''));\n        // 从existingPhotosPathsBefore中移除\n        existingPhotosPathsBefore.value = existingPhotosPathsBefore.value.filter((_, i) => i !== index);\n      }\n\n      // 更新photoBeforeFiles，只包含新上传的文件\n      photoBeforeFiles.value = fileList.filter(f => f.raw).map(f => f.raw);\n\n      // 更新预览图片\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\n    };\n\n    // 处理收集后的照片变更\n    const handlePhotoAfterChange = (file, fileList) => {\n      console.log('收集后照片变更:', file, fileList);\n\n      // 更新photoAfterList\n      photoAfterList.value = fileList;\n\n      // 更新photoAfterFiles，只包含新上传的文件\n      photoAfterFiles.value = fileList.filter(f => f.raw) // 只处理新上传的文件\n      .map(f => f.raw);\n\n      // 更新existingPhotosPathsAfter，只保留仍在fileList中的现有照片\n      if (!isNew.value) {\n        const existingFileUids = fileList.filter(f => f.uid && typeof f.uid === 'string' && f.uid.startsWith('after-')).map(f => f.uid);\n\n        // 保留仍在fileList中的现有照片\n        existingPhotosPathsAfter.value = existingPhotosPathsAfter.value.filter((_, index) => {\n          return existingFileUids.includes(`after-${index}`);\n        });\n      }\n\n      // 更新预览图片\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\n      return false; // 阻止自动上传\n    };\n\n    // 处理收集后的照片移除\n    const handlePhotoAfterRemove = (file, fileList) => {\n      console.log('收集后照片移除:', file, fileList);\n\n      // 更新photoAfterList\n      photoAfterList.value = fileList;\n\n      // 如果是现有照片，从existingPhotosPathsAfter中移除\n      if (file.uid && typeof file.uid === 'string' && file.uid.startsWith('after-')) {\n        const index = parseInt(file.uid.replace('after-', ''));\n        // 从existingPhotosPathsAfter中移除\n        existingPhotosPathsAfter.value = existingPhotosPathsAfter.value.filter((_, i) => i !== index);\n      }\n\n      // 更新photoAfterFiles，只包含新上传的文件\n      photoAfterFiles.value = fileList.filter(f => f.raw).map(f => f.raw);\n\n      // 更新预览图片\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\n    };\n\n    // 更新预览图片\n    const updatePreviewImages = fileList => {\n      previewImages.value = fileList.map(file => {\n        if (file.url) {\n          return file.url;\n        } else if (file.raw) {\n          return URL.createObjectURL(file.raw);\n        } else if (file instanceof File) {\n          return URL.createObjectURL(file);\n        }\n        return '';\n      }).filter(url => url);\n      console.log('预览图片列表:', previewImages.value);\n    };\n\n    // 处理图片预览\n    const handlePictureCardPreview = file => {\n      // 找到当前图片在预览列表中的索引\n      const index = previewImages.value.findIndex(url => {\n        return url === file.url || file.raw && url === URL.createObjectURL(file.raw);\n      });\n      if (index !== -1) {\n        previewIndex.value = index;\n      } else {\n        previewIndex.value = 0;\n      }\n\n      // 显示图片预览器\n      showViewer.value = true;\n    };\n\n    // 关闭图片预览\n    const closeViewer = () => {\n      showViewer.value = false;\n    };\n\n    // 提交表单\n    const submitForm = async () => {\n      recordForm.value.validate(async valid => {\n        if (valid) {\n          try {\n            loading.value = true;\n\n            // 创建FormData对象\n            const formData = new FormData();\n\n            // 添加基本字段\n            formData.append('unitId', form.unitId);\n            formData.append('wasteTypeId', form.wasteTypeId);\n            formData.append('location', form.location);\n            formData.append('quantity', form.quantity);\n            if (form.collectionDate && form.collectionTime) {\n              const combinedDateTime = `${form.collectionDate} ${form.collectionTime}:00`;\n              formData.append('collectionStartTime', combinedDateTime);\n            }\n\n            // 添加收集前照片\n            if (photoBeforeFiles.value && photoBeforeFiles.value.length > 0) {\n              photoBeforeFiles.value.forEach(file => {\n                if (file) {\n                  formData.append('photosBefore', file);\n                }\n              });\n            }\n\n            // 添加收集后照片\n            if (photoAfterFiles.value && photoAfterFiles.value.length > 0) {\n              photoAfterFiles.value.forEach(file => {\n                if (file) {\n                  formData.append('photosAfter', file);\n                }\n              });\n            }\n\n            // 添加现有收集前照片路径（用于更新时保留未更改的照片）\n            if (!isNew.value && existingPhotosPathsBefore.value.length > 0) {\n              formData.append('existingPhotosPathsBefore', JSON.stringify(existingPhotosPathsBefore.value));\n            }\n\n            // 添加现有收集后照片路径（用于更新时保留未更改的照片）\n            if (!isNew.value && existingPhotosPathsAfter.value.length > 0) {\n              formData.append('existingPhotosPathsAfter', JSON.stringify(existingPhotosPathsAfter.value));\n            }\n            let response;\n            if (isNew.value) {\n              // 新增记录\n              response = await httpService.postForm(apiConfig.endpoints.wasteRecords, formData);\n              ElMessage.success('废物记录添加成功');\n            } else {\n              // 更新记录\n              response = await httpService.putForm(`${apiConfig.endpoints.wasteRecords}/${form.recordId}`, formData);\n              ElMessage.success('废物记录更新成功');\n            }\n            console.log('提交响应:', response.data);\n\n            // 返回列表页\n            goBack();\n          } catch (error) {\n            console.error('提交表单失败:', error);\n            ElMessage.error('提交表单失败');\n          } finally {\n            loading.value = false;\n          }\n        } else {\n          console.log('表单验证失败');\n          ElMessage.error('请填写必填字段');\n          return false;\n        }\n      });\n    };\n\n    // 返回上一页\n    const goBack = () => {\n      if (isSuperAdmin.value) {\n        router.push('/admin-records');\n      } else {\n        router.push({\n          name: 'RecordsList',\n          params: {\n            unitId: auth.state.user.unit_id\n          }\n        });\n      }\n    };\n    return {\n      form,\n      rules,\n      recordForm,\n      loading,\n      submitting,\n      unitName,\n      wasteTypes,\n      units,\n      photoBeforeList,\n      photoAfterList,\n      previewImages,\n      showViewer,\n      previewIndex,\n      isNew,\n      isSuperAdmin,\n      handlePhotoBeforeChange,\n      handlePhotoBeforeRemove,\n      handlePhotoAfterChange,\n      handlePhotoAfterRemove,\n      handlePictureCardPreview,\n      handleBeforeUpload,\n      closeViewer,\n      submitForm,\n      goBack\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useRouter","useRoute","ElMessage","ElImageViewer","httpService","apiConfig","ArrowLeft","Plus","Clock","auth","convertAndCompressImage","name","components","setup","router","route","recordForm","loading","submitting","unitName","wasteTypes","units","photoBeforeList","photoAfterList","photoBeforeFiles","photoAfterFiles","existingPhotosPathsBefore","existingPhotosPathsAfter","previewImages","showViewer","previewIndex","createdAt","isNew","params","id","isSuperAdmin","state","isLoggedIn","user","role_id","form","unitId","wasteTypeId","location","collectionDate","collectionTime","quantity","recordId","creatorId","rules","required","message","trigger","value","fetchWasteTypes","fetchUnits","unit_id","fetchUnitName","fetchRecordDetails","error","console","response","get","endpoints","data","unit","find","u","parseInt","wasteRecords","record","log","waste_type_id","collection_start_time","dateTime","Date","toISOString","slice","toTimeString","photoPathsBefore","photo_path_before","JSON","parse","photoPathsAfter","photo_path_after","map","path","index","url","baseURL","uid","status","updatePreviewImages","unit_name","created_at","handleBeforeUpload","file","acceptedTypes","isImage","includes","type","processedFile","raw","now","Math","random","toString","substr","handlePhotoBeforeChange","fileList","filter","f","existingFileUids","startsWith","_","handlePhotoBeforeRemove","replace","i","handlePhotoAfterChange","handlePhotoAfterRemove","URL","createObjectURL","File","handlePictureCardPreview","findIndex","closeViewer","submitForm","validate","valid","formData","FormData","append","combinedDateTime","length","forEach","stringify","postForm","success","putForm","goBack","push"],"sources":["C:\\Users\\10150\\Desktop\\Hazardous-waste-management-system\\frontend\\src\\views\\EditRecord.vue"],"sourcesContent":["<template>\r\n  <div class=\"edit-record-container\">\r\n    <div class=\"header\">\r\n      <div class=\"back-button\" @click=\"goBack\">\r\n        <el-icon><arrow-left /></el-icon> 返回\r\n      </div>\r\n      <h1>{{ isNew ? '新增废物记录' : '编辑废物记录' }}</h1>\r\n      <div></div>\r\n    </div>\r\n\r\n    <div class=\"content\">\r\n      <div class=\"form-header\">\r\n        <h2>{{ unitName }}</h2>\r\n      </div>\r\n\r\n      <el-form \r\n        ref=\"recordForm\" \r\n        :model=\"form\" \r\n        :rules=\"rules\" \r\n        label-width=\"120px\"\r\n        class=\"record-form\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <!-- 如果是超级管理员且是新增记录，显示单位选择 -->\r\n        <el-form-item label=\"单位\" prop=\"unitId\" v-if=\"isSuperAdmin && isNew\">\r\n          <el-select v-model=\"form.unitId\" placeholder=\"请选择单位\" style=\"width: 100%\">\r\n            <el-option \r\n              v-for=\"unit in units\" \r\n              :key=\"unit.id\" \r\n              :label=\"unit.name\" \r\n              :value=\"unit.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"废物类型\" prop=\"wasteTypeId\">\r\n          <el-select v-model=\"form.wasteTypeId\" placeholder=\"请选择废物类型\" style=\"width: 100%\">\r\n            <el-option \r\n              v-for=\"type in wasteTypes\" \r\n              :key=\"type.id\" \r\n              :label=\"type.name\" \r\n              :value=\"type.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"产生地点\" prop=\"location\">\r\n          <el-input v-model=\"form.location\" placeholder=\"请输入废物产生地点\" />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"收集日期\">\r\n          <el-date-picker\r\n            v-model=\"form.collectionDate\"\r\n            type=\"date\"\r\n            placeholder=\"选择日期\"\r\n            format=\"YYYY-MM-DD\"\r\n            value-format=\"YYYY-MM-DD\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"收集时间\">\r\n          <el-time-picker\r\n            v-model=\"form.collectionTime\"\r\n            format=\"HH:mm\"\r\n            placeholder=\"选择时间\"\r\n            value-format=\"HH:mm\"\r\n            style=\"width: 100%\"\r\n          >\r\n            <template #prefix>\r\n              <el-icon><clock /></el-icon>\r\n            </template>\r\n          </el-time-picker>\r\n          <!-- <div class=\"time-tip\">只需选择小时和分钟</div> -->\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"收集数量(吨)\" prop=\"quantity\">\r\n          <el-input-number \r\n            v-model=\"form.quantity\" \r\n            :min=\"0\" \r\n            :precision=\"3\" \r\n            :step=\"0.001\" \r\n            style=\"width: 100%\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"现场照片（收集前）\" prop=\"photosBefore\">\r\n          <el-upload\r\n            class=\"waste-photo-uploader\"\r\n            action=\"#\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handlePhotoBeforeChange\"\r\n            :on-remove=\"handlePhotoBeforeRemove\"\r\n            :file-list=\"photoBeforeList\"\r\n            :limit=\"10\"\r\n            multiple\r\n            list-type=\"picture-card\"\r\n            :on-preview=\"handlePictureCardPreview\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            accept=\"image/jpeg,image/jpg,image/png,image/gif,image/bmp,image/webp,.jpeg,.jpg,.png,.gif,.bmp,.webp\"\r\n          >\r\n            <el-icon><plus /></el-icon>\r\n          </el-upload>\r\n          <div class=\"photo-tip\">请上传废物收集前的现场照片（最多10张）</div>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"现场照片（收集后）\" prop=\"photosAfter\">\r\n          <el-upload\r\n            class=\"waste-photo-uploader\"\r\n            action=\"#\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handlePhotoAfterChange\"\r\n            :on-remove=\"handlePhotoAfterRemove\"\r\n            :file-list=\"photoAfterList\"\r\n            :limit=\"10\"\r\n            multiple\r\n            list-type=\"picture-card\"\r\n            :on-preview=\"handlePictureCardPreview\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            accept=\"image/jpeg,image/jpg,image/png,image/gif,image/bmp,image/webp,.jpeg,.jpg,.png,.gif,.bmp,.webp\"\r\n          >\r\n            <el-icon><plus /></el-icon>\r\n          </el-upload>\r\n          <div class=\"photo-tip\">请上传废物收集后的现场照片（最多10张）</div>\r\n          \r\n          <!-- 添加独立的图片预览组件 -->\r\n          <el-image-viewer\r\n            v-if=\"showViewer\"\r\n            :url-list=\"previewImages\"\r\n            :initial-index=\"previewIndex\"\r\n            @close=\"closeViewer\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"loading\">保存</el-button>\r\n          <el-button @click=\"goBack\">取消</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n\r\n    <div class=\"footer\">\r\n      <p>&copy; 2025 危险废物管理系统</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, computed } from 'vue';\r\nimport { useRouter, useRoute } from 'vue-router';\r\nimport { ElMessage, ElImageViewer } from 'element-plus';\r\nimport httpService from '../config/httpService';\r\nimport apiConfig from '../config/api';\r\nimport { ArrowLeft, Plus, Clock } from '@element-plus/icons-vue';\r\nimport auth from '../store/auth';\r\nimport { convertAndCompressImage } from '../utils/imageUtils';\r\n\r\nexport default {\r\n  name: 'EditRecordView',\r\n  components: {\r\n    ArrowLeft,\r\n    Plus,\r\n    Clock,\r\n    ElImageViewer\r\n  },\r\n  setup() {\r\n    const router = useRouter();\r\n    const route = useRoute();\r\n    const recordForm = ref(null);\r\n    const loading = ref(false);\r\n    const submitting = ref(false);\r\n    const unitName = ref('');\r\n    const wasteTypes = ref([]);\r\n    const units = ref([]);\r\n    const photoBeforeList = ref([]);\r\n    const photoAfterList = ref([]);\r\n    const photoBeforeFiles = ref([]);\r\n    const photoAfterFiles = ref([]);\r\n    const existingPhotosPathsBefore = ref([]);\r\n    const existingPhotosPathsAfter = ref([]);\r\n    const previewImages = ref([]);\r\n    const showViewer = ref(false);\r\n    const previewIndex = ref(0);\r\n    const createdAt = ref('');\r\n    \r\n    // 是否为新增记录\r\n    const isNew = computed(() => {\r\n      return !route.params.id || route.params.id === 'new';\r\n    });\r\n    \r\n    // 是否为超级管理员\r\n    const isSuperAdmin = computed(() => {\r\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\r\n    });\r\n    \r\n    // 表单数据\r\n    const form = reactive({\r\n      unitId: '',\r\n      wasteTypeId: '',\r\n      location: '',\r\n      collectionDate: '',\r\n      collectionTime: '',\r\n      quantity: 0,\r\n      recordId: null,\r\n      creatorId: auth.state.user?.id || null\r\n    });\r\n\r\n    const rules = {\r\n      unitId: [\r\n        { required: true, message: '请选择单位', trigger: 'change' }\r\n      ],\r\n      wasteTypeId: [\r\n        { required: true, message: '请选择废物类型', trigger: 'change' }\r\n      ],\r\n      location: [\r\n        { required: true, message: '请输入废物产生地点', trigger: 'blur' }\r\n      ],\r\n      collectionDate: [\r\n        { required: false }\r\n      ],\r\n      collectionTime: [\r\n        { required: false }\r\n      ],\r\n      quantity: [\r\n        { required: true, message: '请输入收集数量', trigger: 'change' }\r\n      ]\r\n    };\r\n\r\n    onMounted(async () => {\r\n      loading.value = true;\r\n      \r\n      try {\r\n        // 获取废物类型\r\n        await fetchWasteTypes();\r\n        \r\n        // 如果是超级管理员，获取所有单位\r\n        if (isSuperAdmin.value) {\r\n          await fetchUnits();\r\n        }\r\n        \r\n        // 如果是新增记录\r\n        if (isNew.value) {\r\n          // 新增记录默认使用当前用户的单位（非超级管理员）\r\n          if (!isSuperAdmin.value && auth.state.user) {\r\n            form.unitId = auth.state.user.unit_id;\r\n            await fetchUnitName(form.unitId);\r\n          }\r\n        } else {\r\n          // 只有在编辑现有记录时才获取记录详情\r\n          await fetchRecordDetails();\r\n        }\r\n      } catch (error) {\r\n        console.error('初始化数据失败:', error);\r\n        ElMessage.error('加载数据失败，请刷新重试');\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    });\r\n\r\n    // 获取单位列表\r\n    const fetchUnits = async () => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.units);\r\n        units.value = response.data;\r\n      } catch (error) {\r\n        console.error('获取单位列表失败:', error);\r\n        ElMessage.error('获取单位列表失败');\r\n      }\r\n    };\r\n\r\n    // 获取单位名称\r\n    const fetchUnitName = async (unitId) => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.units);\r\n        const unit = response.data.find(u => u.id === parseInt(unitId));\r\n        if (unit) {\r\n          unitName.value = unit.name;\r\n        }\r\n      } catch (error) {\r\n        console.error('获取单位信息失败:', error);\r\n      }\r\n    };\r\n\r\n    // 获取废物类型\r\n    const fetchWasteTypes = async () => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\r\n        wasteTypes.value = response.data;\r\n      } catch (error) {\r\n        console.error('获取废物类型失败:', error);\r\n        ElMessage.error('获取废物类型失败');\r\n      }\r\n    };\r\n\r\n    // 获取记录详情\r\n    const fetchRecordDetails = async () => {\r\n      try {\r\n        loading.value = true;\r\n        const response = await httpService.get(`${apiConfig.endpoints.wasteRecords}/detail/${route.params.id}`);\r\n        \r\n        const record = response.data;\r\n        console.log('获取到的记录详情:', record);\r\n        \r\n        form.unitId = record.unit_id;\r\n        form.wasteTypeId = record.waste_type_id;\r\n        form.location = record.location;\r\n        form.recordId = record.id;\r\n        \r\n        // 处理收集时间\r\n        if (record.collection_start_time) {\r\n          const dateTime = new Date(record.collection_start_time);\r\n          form.collectionDate = dateTime.toISOString().slice(0, 10);\r\n          form.collectionTime = dateTime.toTimeString().slice(0, 5);\r\n        }\r\n        \r\n        form.quantity = record.quantity;\r\n        \r\n        // 处理照片路径\r\n        try {\r\n          // 处理收集前照片\r\n          let photoPathsBefore = [];\r\n          if (record.photo_path_before) {\r\n            photoPathsBefore = JSON.parse(record.photo_path_before);\r\n            console.log('解析的收集前照片路径:', photoPathsBefore);\r\n          }\r\n          \r\n          // 处理收集后照片\r\n          let photoPathsAfter = [];\r\n          if (record.photo_path_after) {\r\n            photoPathsAfter = JSON.parse(record.photo_path_after);\r\n            console.log('解析的收集后照片路径:', photoPathsAfter);\r\n          }\r\n          \r\n          // 设置已有照片路径\r\n          existingPhotosPathsBefore.value = photoPathsBefore;\r\n          existingPhotosPathsAfter.value = photoPathsAfter;\r\n          \r\n          // 设置上传组件的文件列表，使现有照片能显示在上传组件中\r\n          photoBeforeList.value = photoPathsBefore.map((path, index) => {\r\n            const url = `${apiConfig.baseURL}${path}`;\r\n            console.log(`收集前照片${index + 1}的URL:`, url);\r\n            return {\r\n              name: `收集前照片${index + 1}`,\r\n              url: url,\r\n              uid: `before-${index}`,\r\n              status: 'success' // 添加状态，表示已上传成功\r\n            };\r\n          });\r\n          \r\n          photoAfterList.value = photoPathsAfter.map((path, index) => {\r\n            const url = `${apiConfig.baseURL}${path}`;\r\n            console.log(`收集后照片${index + 1}的URL:`, url);\r\n            return {\r\n              name: `收集后照片${index + 1}`,\r\n              url: url,\r\n              uid: `after-${index}`,\r\n              status: 'success' // 添加状态，表示已上传成功\r\n            };\r\n          });\r\n          \r\n          // 更新预览图片\r\n          updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\r\n        } catch (error) {\r\n          console.error('解析照片路径失败:', error);\r\n          previewImages.value = [];\r\n          existingPhotosPathsBefore.value = [];\r\n          existingPhotosPathsAfter.value = [];\r\n          photoBeforeList.value = [];\r\n          photoAfterList.value = [];\r\n        }\r\n        \r\n        // 获取单位名称\r\n        unitName.value = record.unit_name;\r\n        \r\n        // 设置创建时间\r\n        createdAt.value = record.created_at;\r\n        \r\n      } catch (error) {\r\n        console.error('获取记录详情失败:', error);\r\n        ElMessage.error('获取记录详情失败');\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // 处理上传前的文件处理\r\n    const handleBeforeUpload = async (file) => {\r\n      // 检查文件类型是否为图片\r\n      const acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\r\n      const isImage = acceptedTypes.includes(file.type);\r\n      \r\n      if (!isImage) {\r\n        ElMessage.error('只能上传图片文件!');\r\n        return false;\r\n      }\r\n      \r\n      try {\r\n        // 处理图片\r\n        const processedFile = await convertAndCompressImage(file);\r\n        // 替换原始文件\r\n        file.raw = processedFile;\r\n        file.name = processedFile.name;\r\n        file.type = processedFile.type;\r\n        \r\n        // 为文件添加唯一标识符\r\n        if (!file.uid) {\r\n          file.uid = Date.now() + '-' + Math.random().toString(36).substr(2, 10);\r\n        }\r\n        return true; // 允许上传\r\n      } catch (error) {\r\n        console.error('图片处理失败:', error);\r\n        ElMessage.error('图片处理失败，请重试');\r\n        return false;\r\n      }\r\n    };\r\n\r\n    // 处理收集前的照片变更\r\n    const handlePhotoBeforeChange = (file, fileList) => {\r\n      console.log('收集前照片变更:', file, fileList);\r\n      \r\n      // 更新photoBeforeList\r\n      photoBeforeList.value = fileList;\r\n      \r\n      // 更新photoBeforeFiles，只包含新上传的文件\r\n      photoBeforeFiles.value = fileList\r\n        .filter(f => f.raw) // 只处理新上传的文件\r\n        .map(f => f.raw);\r\n      \r\n      // 更新existingPhotosPathsBefore，只保留仍在fileList中的现有照片\r\n      if (!isNew.value) {\r\n        const existingFileUids = fileList\r\n          .filter(f => f.uid && typeof f.uid === 'string' && f.uid.startsWith('before-'))\r\n          .map(f => f.uid);\r\n        \r\n        // 保留仍在fileList中的现有照片\r\n        existingPhotosPathsBefore.value = existingPhotosPathsBefore.value.filter((_, index) => {\r\n          return existingFileUids.includes(`before-${index}`);\r\n        });\r\n      }\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\r\n      \r\n      return false; // 阻止自动上传\r\n    };\r\n\r\n    // 处理收集前的照片移除\r\n    const handlePhotoBeforeRemove = (file, fileList) => {\r\n      console.log('收集前照片移除:', file, fileList);\r\n      \r\n      // 更新photoBeforeList\r\n      photoBeforeList.value = fileList;\r\n      \r\n      // 如果是现有照片，从existingPhotosPathsBefore中移除\r\n      if (file.uid && typeof file.uid === 'string' && file.uid.startsWith('before-')) {\r\n        const index = parseInt(file.uid.replace('before-', ''));\r\n        // 从existingPhotosPathsBefore中移除\r\n        existingPhotosPathsBefore.value = existingPhotosPathsBefore.value.filter((_, i) => i !== index);\r\n      }\r\n      \r\n      // 更新photoBeforeFiles，只包含新上传的文件\r\n      photoBeforeFiles.value = fileList\r\n        .filter(f => f.raw)\r\n        .map(f => f.raw);\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\r\n    };\r\n\r\n    // 处理收集后的照片变更\r\n    const handlePhotoAfterChange = (file, fileList) => {\r\n      console.log('收集后照片变更:', file, fileList);\r\n      \r\n      // 更新photoAfterList\r\n      photoAfterList.value = fileList;\r\n      \r\n      // 更新photoAfterFiles，只包含新上传的文件\r\n      photoAfterFiles.value = fileList\r\n        .filter(f => f.raw) // 只处理新上传的文件\r\n        .map(f => f.raw);\r\n      \r\n      // 更新existingPhotosPathsAfter，只保留仍在fileList中的现有照片\r\n      if (!isNew.value) {\r\n        const existingFileUids = fileList\r\n          .filter(f => f.uid && typeof f.uid === 'string' && f.uid.startsWith('after-'))\r\n          .map(f => f.uid);\r\n        \r\n        // 保留仍在fileList中的现有照片\r\n        existingPhotosPathsAfter.value = existingPhotosPathsAfter.value.filter((_, index) => {\r\n          return existingFileUids.includes(`after-${index}`);\r\n        });\r\n      }\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\r\n      \r\n      return false; // 阻止自动上传\r\n    };\r\n\r\n    // 处理收集后的照片移除\r\n    const handlePhotoAfterRemove = (file, fileList) => {\r\n      console.log('收集后照片移除:', file, fileList);\r\n      \r\n      // 更新photoAfterList\r\n      photoAfterList.value = fileList;\r\n      \r\n      // 如果是现有照片，从existingPhotosPathsAfter中移除\r\n      if (file.uid && typeof file.uid === 'string' && file.uid.startsWith('after-')) {\r\n        const index = parseInt(file.uid.replace('after-', ''));\r\n        // 从existingPhotosPathsAfter中移除\r\n        existingPhotosPathsAfter.value = existingPhotosPathsAfter.value.filter((_, i) => i !== index);\r\n      }\r\n      \r\n      // 更新photoAfterFiles，只包含新上传的文件\r\n      photoAfterFiles.value = fileList\r\n        .filter(f => f.raw)\r\n        .map(f => f.raw);\r\n      \r\n      // 更新预览图片\r\n      updatePreviewImages([...photoBeforeList.value, ...photoAfterList.value]);\r\n    };\r\n\r\n    // 更新预览图片\r\n    const updatePreviewImages = (fileList) => {\r\n      previewImages.value = fileList.map(file => {\r\n        if (file.url) {\r\n          return file.url;\r\n        } else if (file.raw) {\r\n          return URL.createObjectURL(file.raw);\r\n        } else if (file instanceof File) {\r\n          return URL.createObjectURL(file);\r\n        }\r\n        return '';\r\n      }).filter(url => url);\r\n      \r\n      console.log('预览图片列表:', previewImages.value);\r\n    };\r\n\r\n    // 处理图片预览\r\n    const handlePictureCardPreview = (file) => {\r\n      // 找到当前图片在预览列表中的索引\r\n      const index = previewImages.value.findIndex(url => {\r\n        return url === file.url || (file.raw && url === URL.createObjectURL(file.raw));\r\n      });\r\n      \r\n      if (index !== -1) {\r\n        previewIndex.value = index;\r\n      } else {\r\n        previewIndex.value = 0;\r\n      }\r\n      \r\n      // 显示图片预览器\r\n      showViewer.value = true;\r\n    };\r\n    \r\n    // 关闭图片预览\r\n    const closeViewer = () => {\r\n      showViewer.value = false;\r\n    };\r\n\r\n    // 提交表单\r\n    const submitForm = async () => {\r\n      recordForm.value.validate(async (valid) => {\r\n        if (valid) {\r\n          try {\r\n            loading.value = true;\r\n            \r\n            // 创建FormData对象\r\n            const formData = new FormData();\r\n            \r\n            // 添加基本字段\r\n            formData.append('unitId', form.unitId);\r\n            formData.append('wasteTypeId', form.wasteTypeId);\r\n            formData.append('location', form.location);\r\n            formData.append('quantity', form.quantity);\r\n            \r\n            if (form.collectionDate && form.collectionTime) {\r\n              const combinedDateTime = `${form.collectionDate} ${form.collectionTime}:00`;\r\n              formData.append('collectionStartTime', combinedDateTime);\r\n            }\r\n            \r\n            // 添加收集前照片\r\n            if (photoBeforeFiles.value && photoBeforeFiles.value.length > 0) {\r\n              photoBeforeFiles.value.forEach(file => {\r\n                if (file) {\r\n                  formData.append('photosBefore', file);\r\n                }\r\n              });\r\n            }\r\n            \r\n            // 添加收集后照片\r\n            if (photoAfterFiles.value && photoAfterFiles.value.length > 0) {\r\n              photoAfterFiles.value.forEach(file => {\r\n                if (file) {\r\n                  formData.append('photosAfter', file);\r\n                }\r\n              });\r\n            }\r\n            \r\n            // 添加现有收集前照片路径（用于更新时保留未更改的照片）\r\n            if (!isNew.value && existingPhotosPathsBefore.value.length > 0) {\r\n              formData.append('existingPhotosPathsBefore', JSON.stringify(existingPhotosPathsBefore.value));\r\n            }\r\n            \r\n            // 添加现有收集后照片路径（用于更新时保留未更改的照片）\r\n            if (!isNew.value && existingPhotosPathsAfter.value.length > 0) {\r\n              formData.append('existingPhotosPathsAfter', JSON.stringify(existingPhotosPathsAfter.value));\r\n            }\r\n            \r\n            let response;\r\n            \r\n            if (isNew.value) {\r\n              // 新增记录\r\n              response = await httpService.postForm(apiConfig.endpoints.wasteRecords, formData);\r\n              ElMessage.success('废物记录添加成功');\r\n            } else {\r\n              // 更新记录\r\n              response = await httpService.putForm(`${apiConfig.endpoints.wasteRecords}/${form.recordId}`, formData);\r\n              ElMessage.success('废物记录更新成功');\r\n            }\r\n            \r\n            console.log('提交响应:', response.data);\r\n            \r\n            // 返回列表页\r\n            goBack();\r\n          } catch (error) {\r\n            console.error('提交表单失败:', error);\r\n            ElMessage.error('提交表单失败');\r\n          } finally {\r\n            loading.value = false;\r\n          }\r\n        } else {\r\n          console.log('表单验证失败');\r\n          ElMessage.error('请填写必填字段');\r\n          return false;\r\n        }\r\n      });\r\n    };\r\n\r\n    // 返回上一页\r\n    const goBack = () => {\r\n      if (isSuperAdmin.value) {\r\n        router.push('/admin-records');\r\n      } else {\r\n        router.push({ \r\n          name: 'RecordsList', \r\n          params: { unitId: auth.state.user.unit_id } \r\n        });\r\n      }\r\n    };\r\n\r\n    return {\r\n      form,\r\n      rules,\r\n      recordForm,\r\n      loading,\r\n      submitting,\r\n      unitName,\r\n      wasteTypes,\r\n      units,\r\n      photoBeforeList,\r\n      photoAfterList,\r\n      previewImages,\r\n      showViewer,\r\n      previewIndex,\r\n      isNew,\r\n      isSuperAdmin,\r\n      handlePhotoBeforeChange,\r\n      handlePhotoBeforeRemove,\r\n      handlePhotoAfterChange,\r\n      handlePhotoAfterRemove,\r\n      handlePictureCardPreview,\r\n      handleBeforeUpload,\r\n      closeViewer,\r\n      submitForm,\r\n      goBack\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.edit-record-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n}\r\n\r\n.header {\r\n  background-color: #409EFF;\r\n  color: white;\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.back-button {\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  font-size: 14px;\r\n}\r\n\r\n.content {\r\n  flex: 1;\r\n  padding: 30px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.form-header {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-header h2 {\r\n  color: #333;\r\n  border-bottom: 2px solid #409EFF;\r\n  display: inline-block;\r\n  padding-bottom: 5px;\r\n}\r\n\r\n.record-form {\r\n  background-color: #f9f9f9;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.waste-photo-uploader {\r\n  width: 100%;\r\n}\r\n\r\n.photo-tip, .time-tip {\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-top: 5px;\r\n}\r\n\r\n.footer {\r\n  background-color: #f5f5f5;\r\n  padding: 15px;\r\n  text-align: center;\r\n  color: #666;\r\n}\r\n</style>\r\n\r\n<style>\r\n/* 修复Element Plus图片预览组件的z-index问题 */\r\n.el-image-viewer__wrapper {\r\n  z-index: 2147483647 !important; /* 使用最大可能的z-index值 */\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的遮罩层也在最上层 */\r\n.el-image-viewer__mask {\r\n  z-index: 2147483646 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的操作按钮在最上层 */\r\n.el-image-viewer__btn {\r\n  z-index: 2147483647 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的关闭按钮在最上层 */\r\n.el-image-viewer__close {\r\n  z-index: 2147483647 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的图片在最上层 */\r\n.el-image-viewer__img {\r\n  z-index: 2147483646 !important;\r\n  position: relative !important;\r\n}\r\n\r\n/* 确保图片预览的操作栏在最上层 */\r\n.el-image-viewer__actions {\r\n  z-index: 2147483647 !important;\r\n  position: fixed !important;\r\n}\r\n\r\n/* 确保图片预览的缩放按钮在最上层 */\r\n.el-image-viewer__actions__inner {\r\n  z-index: 2147483647 !important;\r\n  position: relative !important;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}