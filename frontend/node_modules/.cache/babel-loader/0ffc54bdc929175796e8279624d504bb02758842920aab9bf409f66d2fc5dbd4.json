{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\n * 将数据导出为Excel文件（使用ExcelJS，支持图片）\n * @param {Array} data - 要导出的数据数组\n * @param {String} fileName - 导出的文件名（不含后缀）\n * @param {Array} headers - 要导出的列标题和对应字段名\n * @param {Object} imageData - 图片数据对象（可选）\n */\nexport const exportToExcel = async (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n  try {\n    console.log('使用ExcelJS导出Excel...');\n\n    // 创建新的工作簿\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = '危险废物管理系统';\n    workbook.lastModifiedBy = '危险废物管理系统';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n\n    // 添加工作表\n    const worksheet = workbook.addWorksheet('危险废物记录');\n\n    // 设置列\n    const columns = headers.map(header => ({\n      header: header.text,\n      key: header.field,\n      width: 15\n    }));\n    worksheet.columns = columns;\n\n    // 添加数据行\n    data.forEach((record, rowIndex) => {\n      const row = {};\n      headers.forEach(header => {\n        row[header.field] = record[header.field] || '';\n      });\n      worksheet.addRow(row);\n\n      // 处理图片\n      if (imageData && imageData[rowIndex]) {\n        // 处理清理前照片\n        if (imageData[rowIndex][7] && imageData[rowIndex][7].base64) {\n          try {\n            // 从base64添加图片\n            const beforePhotoBase64 = imageData[rowIndex][7].base64;\n            const beforePhotoId = workbook.addImage({\n              base64: beforePhotoBase64,\n              extension: 'jpeg'\n            });\n\n            // 计算图片位置（清理前照片列）\n            const beforePhotoColIndex = headers.findIndex(h => h.field === '清理前照片');\n            if (beforePhotoColIndex !== -1) {\n              // 添加图片到单元格，设置宽高\n              worksheet.addImage(beforePhotoId, {\n                tl: {\n                  col: beforePhotoColIndex,\n                  row: rowIndex + 1\n                },\n                ext: {\n                  width: 80,\n                  height: 80\n                }\n              });\n\n              // 调整行高以适应图片\n              worksheet.getRow(rowIndex + 2).height = 60;\n            }\n          } catch (imgError) {\n            console.error(`添加清理前照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n\n        // 处理清理后照片\n        if (imageData[rowIndex][8] && imageData[rowIndex][8].base64) {\n          try {\n            // 从base64添加图片\n            const afterPhotoBase64 = imageData[rowIndex][8].base64;\n            const afterPhotoId = workbook.addImage({\n              base64: afterPhotoBase64,\n              extension: 'jpeg'\n            });\n\n            // 计算图片位置（清理后照片列）\n            const afterPhotoColIndex = headers.findIndex(h => h.field === '清理后照片');\n            if (afterPhotoColIndex !== -1) {\n              // 添加图片到单元格，设置宽高\n              worksheet.addImage(afterPhotoId, {\n                tl: {\n                  col: afterPhotoColIndex,\n                  row: rowIndex + 1\n                },\n                ext: {\n                  width: 80,\n                  height: 80\n                }\n              });\n\n              // 调整行高以适应图片\n              worksheet.getRow(rowIndex + 2).height = 60;\n            }\n          } catch (imgError) {\n            console.error(`添加清理后照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n      }\n    });\n\n    // 设置表头样式\n    worksheet.getRow(1).font = {\n      bold: true\n    };\n    worksheet.getRow(1).alignment = {\n      vertical: 'middle',\n      horizontal: 'center'\n    };\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 生成buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n\n    // 创建Blob对象\n    const blob = new Blob([buffer], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\n * 导出为CSV文件\n * @param {Array} data - 数据数组\n * @param {String} fileName - 文件名\n * @param {Array} headers - 表头配置\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\n * 将图片URL转换为Base64格式\n * @param {string} url 图片URL\n * @returns {Promise<string>} Base64格式的图片数据\n */\nexport const imageUrlToBase64 = async url => {\n  console.log('开始转换图片到Base64:', url);\n\n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n\n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, {\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = e => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n\n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n\n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = e => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n\n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\n * 准备带图片的导出数据\n * @param {Array} records 记录数据\n * @param {string} baseUrl 基础URL\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  console.log('准备图片导出数据，记录数:', records.length);\n  console.log('使用的基础URL:', baseUrl);\n\n  // 调试：打印第一条记录的所有字段\n  if (records.length > 0) {\n    console.log('第一条记录的所有字段:');\n    const firstRecord = records[0];\n    Object.keys(firstRecord).forEach(key => {\n      console.log(`${key}: ${typeof firstRecord[key] === 'object' ? JSON.stringify(firstRecord[key]) : firstRecord[key]}`);\n    });\n  }\n  const imageData = {};\n  let processedCount = 0;\n  let successCount = 0;\n\n  // 解析照片路径的函数\n  const parsePhotoPath = path => {\n    if (!path) return [];\n    try {\n      // 尝试解析为JSON\n      if (path.startsWith('[') && path.endsWith(']')) {\n        return JSON.parse(path);\n      }\n      // 如果不是JSON格式，则将其作为单个路径返回\n      return [path];\n    } catch (error) {\n      console.error('解析照片路径失败:', error);\n      // 如果解析失败，将其作为单个路径返回\n      return [path];\n    }\n  };\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n    console.log(`处理记录 ${i + 1}/${records.length}, ID: ${record.id}`);\n\n    // 初始化该记录的图片数据\n    imageData[i] = {};\n\n    // 处理清理前照片\n    if (record.photo_path_before) {\n      const beforePhotoPaths = parsePhotoPath(record.photo_path_before);\n      console.log(`记录 ${i + 1} 清理前照片路径:`, beforePhotoPaths);\n      if (beforePhotoPaths.length > 0) {\n        const beforePhotoUrl = `${baseUrl}${beforePhotoPaths[0]}`;\n        console.log(`记录 ${i + 1} 清理前照片URL:`, beforePhotoUrl);\n        try {\n          const beforePhotoBase64 = await imageUrlToBase64(beforePhotoUrl);\n          if (beforePhotoBase64) {\n            imageData[i][7] = {\n              url: beforePhotoUrl,\n              base64: beforePhotoBase64\n            };\n            console.log(`记录 ${i + 1} 清理前照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i + 1} 清理前照片转换失败`);\n            // 仍然保留URL\n            imageData[i][7] = {\n              url: beforePhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i + 1} 清理前照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][7] = {\n            url: beforePhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i + 1} 没有清理前照片`);\n    }\n\n    // 处理清理后照片\n    if (record.photo_path_after) {\n      const afterPhotoPaths = parsePhotoPath(record.photo_path_after);\n      console.log(`记录 ${i + 1} 清理后照片路径:`, afterPhotoPaths);\n      if (afterPhotoPaths.length > 0) {\n        const afterPhotoUrl = `${baseUrl}${afterPhotoPaths[0]}`;\n        console.log(`记录 ${i + 1} 清理后照片URL:`, afterPhotoUrl);\n        try {\n          const afterPhotoBase64 = await imageUrlToBase64(afterPhotoUrl);\n          if (afterPhotoBase64) {\n            imageData[i][8] = {\n              url: afterPhotoUrl,\n              base64: afterPhotoBase64\n            };\n            console.log(`记录 ${i + 1} 清理后照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i + 1} 清理后照片转换失败`);\n            // 仍然保留URL\n            imageData[i][8] = {\n              url: afterPhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i + 1} 清理后照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][8] = {\n            url: afterPhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i + 1} 没有清理后照片`);\n    }\n\n    // 添加单位名称\n    if (record.unit_name) {\n      imageData[i].unit_name = record.unit_name;\n    }\n    processedCount++;\n  }\n  console.log(`图片数据准备完成，处理记录: ${processedCount}/${records.length}, 成功转换图片: ${successCount}`);\n  return imageData;\n};","map":{"version":3,"names":["XLSX","console","log","version","Object","keys","join","exportToExcel","data","fileName","headers","imageData","length","error","replace","timestamp","Date","toISOString","substring","workbook","ExcelJS","Workbook","creator","lastModifiedBy","created","modified","worksheet","addWorksheet","columns","map","header","text","key","field","width","forEach","record","rowIndex","row","addRow","base64","beforePhotoBase64","beforePhotoId","addImage","extension","beforePhotoColIndex","findIndex","h","tl","col","ext","height","getRow","imgError","afterPhotoBase64","afterPhotoId","afterPhotoColIndex","font","bold","alignment","vertical","horizontal","excelFileName","buffer","xlsx","writeBuffer","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportToCSV","csvFileName","csvContent","headerRow","title","item","value","undefined","cellValue","String","includes","setAttribute","style","visibility","imageUrlToBase64","response","fetch","mode","cache","ok","Error","status","size","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","e","readAsDataURL","warn","img","Image","crossOrigin","onload","src","canvas","ctx","getContext","drawImage","toDataURL","error2","prepareImageExportData","records","baseUrl","firstRecord","JSON","stringify","processedCount","successCount","parsePhotoPath","path","startsWith","endsWith","parse","i","id","photo_path_before","beforePhotoPaths","beforePhotoUrl","photo_path_after","afterPhotoPaths","afterPhotoUrl","unit_name"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n/**\n * 将数据导出为Excel文件（使用ExcelJS，支持图片）\n * @param {Array} data - 要导出的数据数组\n * @param {String} fileName - 导出的文件名（不含后缀）\n * @param {Array} headers - 要导出的列标题和对应字段名\n * @param {Object} imageData - 图片数据对象（可选）\n */\nexport const exportToExcel = async (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  \n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n  \n  try {\n    console.log('使用ExcelJS导出Excel...');\n    \n    // 创建新的工作簿\n    const workbook = new ExcelJS.Workbook();\n    workbook.creator = '危险废物管理系统';\n    workbook.lastModifiedBy = '危险废物管理系统';\n    workbook.created = new Date();\n    workbook.modified = new Date();\n    \n    // 添加工作表\n    const worksheet = workbook.addWorksheet('危险废物记录');\n    \n    // 设置列\n    const columns = headers.map(header => ({\n      header: header.text,\n      key: header.field,\n      width: 15\n    }));\n    worksheet.columns = columns;\n    \n    // 添加数据行\n    data.forEach((record, rowIndex) => {\n      const row = {};\n      headers.forEach(header => {\n        row[header.field] = record[header.field] || '';\n      });\n      worksheet.addRow(row);\n      \n      // 处理图片\n      if (imageData && imageData[rowIndex]) {\n        // 处理清理前照片\n        if (imageData[rowIndex][7] && imageData[rowIndex][7].base64) {\n          try {\n            // 从base64添加图片\n            const beforePhotoBase64 = imageData[rowIndex][7].base64;\n            const beforePhotoId = workbook.addImage({\n              base64: beforePhotoBase64,\n              extension: 'jpeg',\n            });\n            \n            // 计算图片位置（清理前照片列）\n            const beforePhotoColIndex = headers.findIndex(h => h.field === '清理前照片');\n            if (beforePhotoColIndex !== -1) {\n              // 添加图片到单元格，设置宽高\n              worksheet.addImage(beforePhotoId, {\n                tl: { col: beforePhotoColIndex, row: rowIndex + 1 },\n                ext: { width: 80, height: 80 }\n              });\n              \n              // 调整行高以适应图片\n              worksheet.getRow(rowIndex + 2).height = 60;\n            }\n          } catch (imgError) {\n            console.error(`添加清理前照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n        \n        // 处理清理后照片\n        if (imageData[rowIndex][8] && imageData[rowIndex][8].base64) {\n          try {\n            // 从base64添加图片\n            const afterPhotoBase64 = imageData[rowIndex][8].base64;\n            const afterPhotoId = workbook.addImage({\n              base64: afterPhotoBase64,\n              extension: 'jpeg',\n            });\n            \n            // 计算图片位置（清理后照片列）\n            const afterPhotoColIndex = headers.findIndex(h => h.field === '清理后照片');\n            if (afterPhotoColIndex !== -1) {\n              // 添加图片到单元格，设置宽高\n              worksheet.addImage(afterPhotoId, {\n                tl: { col: afterPhotoColIndex, row: rowIndex + 1 },\n                ext: { width: 80, height: 80 }\n              });\n              \n              // 调整行高以适应图片\n              worksheet.getRow(rowIndex + 2).height = 60;\n            }\n          } catch (imgError) {\n            console.error(`添加清理后照片失败，行 ${rowIndex + 1}:`, imgError);\n          }\n        }\n      }\n    });\n    \n    // 设置表头样式\n    worksheet.getRow(1).font = { bold: true };\n    worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };\n    \n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n    \n    // 生成buffer\n    const buffer = await workbook.xlsx.writeBuffer();\n    \n    // 创建Blob对象\n    const blob = new Blob([buffer], { \n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \n    });\n    \n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    \n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\n * 导出为CSV文件\n * @param {Array} data - 数据数组\n * @param {String} fileName - 文件名\n * @param {Array} headers - 表头配置\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n  \n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n  \n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n  \n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n      \n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n      \n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n      \n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      \n      return cellValue;\n    }).join(',');\n    \n    csvContent += row + '\\r\\n';\n  });\n  \n  // 创建下载链接\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  \n  console.log('CSV导出成功');\n};\n\n/**\n * 将图片URL转换为Base64格式\n * @param {string} url 图片URL\n * @returns {Promise<string>} Base64格式的图片数据\n */\nexport const imageUrlToBase64 = async (url) => {\n  console.log('开始转换图片到Base64:', url);\n  \n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n  \n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, { \n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    \n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    \n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = (e) => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n    \n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n      \n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = (e) => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      \n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n      \n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n      \n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\n * 准备带图片的导出数据\n * @param {Array} records 记录数据\n * @param {string} baseUrl 基础URL\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  console.log('准备图片导出数据，记录数:', records.length);\n  console.log('使用的基础URL:', baseUrl);\n  \n  // 调试：打印第一条记录的所有字段\n  if (records.length > 0) {\n    console.log('第一条记录的所有字段:');\n    const firstRecord = records[0];\n    Object.keys(firstRecord).forEach(key => {\n      console.log(`${key}: ${typeof firstRecord[key] === 'object' ? JSON.stringify(firstRecord[key]) : firstRecord[key]}`);\n    });\n  }\n  \n  const imageData = {};\n  let processedCount = 0;\n  let successCount = 0;\n  \n  // 解析照片路径的函数\n  const parsePhotoPath = (path) => {\n    if (!path) return [];\n    \n    try {\n      // 尝试解析为JSON\n      if (path.startsWith('[') && path.endsWith(']')) {\n        return JSON.parse(path);\n      }\n      // 如果不是JSON格式，则将其作为单个路径返回\n      return [path];\n    } catch (error) {\n      console.error('解析照片路径失败:', error);\n      // 如果解析失败，将其作为单个路径返回\n      return [path];\n    }\n  };\n  \n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n    console.log(`处理记录 ${i+1}/${records.length}, ID: ${record.id}`);\n    \n    // 初始化该记录的图片数据\n    imageData[i] = {};\n    \n    // 处理清理前照片\n    if (record.photo_path_before) {\n      const beforePhotoPaths = parsePhotoPath(record.photo_path_before);\n      console.log(`记录 ${i+1} 清理前照片路径:`, beforePhotoPaths);\n      \n      if (beforePhotoPaths.length > 0) {\n        const beforePhotoUrl = `${baseUrl}${beforePhotoPaths[0]}`;\n        console.log(`记录 ${i+1} 清理前照片URL:`, beforePhotoUrl);\n        \n        try {\n          const beforePhotoBase64 = await imageUrlToBase64(beforePhotoUrl);\n          if (beforePhotoBase64) {\n            imageData[i][7] = {\n              url: beforePhotoUrl,\n              base64: beforePhotoBase64\n            };\n            console.log(`记录 ${i+1} 清理前照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i+1} 清理前照片转换失败`);\n            // 仍然保留URL\n            imageData[i][7] = {\n              url: beforePhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i+1} 清理前照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][7] = {\n            url: beforePhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i+1} 没有清理前照片`);\n    }\n    \n    // 处理清理后照片\n    if (record.photo_path_after) {\n      const afterPhotoPaths = parsePhotoPath(record.photo_path_after);\n      console.log(`记录 ${i+1} 清理后照片路径:`, afterPhotoPaths);\n      \n      if (afterPhotoPaths.length > 0) {\n        const afterPhotoUrl = `${baseUrl}${afterPhotoPaths[0]}`;\n        console.log(`记录 ${i+1} 清理后照片URL:`, afterPhotoUrl);\n        \n        try {\n          const afterPhotoBase64 = await imageUrlToBase64(afterPhotoUrl);\n          if (afterPhotoBase64) {\n            imageData[i][8] = {\n              url: afterPhotoUrl,\n              base64: afterPhotoBase64\n            };\n            console.log(`记录 ${i+1} 清理后照片转换成功`);\n            successCount++;\n          } else {\n            console.warn(`记录 ${i+1} 清理后照片转换失败`);\n            // 仍然保留URL\n            imageData[i][8] = {\n              url: afterPhotoUrl\n            };\n          }\n        } catch (error) {\n          console.error(`记录 ${i+1} 清理后照片处理错误:`, error);\n          // 仍然保留URL\n          imageData[i][8] = {\n            url: afterPhotoUrl\n          };\n        }\n      }\n    } else {\n      console.log(`记录 ${i+1} 没有清理后照片`);\n    }\n    \n    // 添加单位名称\n    if (record.unit_name) {\n      imageData[i].unit_name = record.unit_name;\n    }\n    \n    processedCount++;\n  }\n  \n  console.log(`图片数据准备完成，处理记录: ${processedCount}/${records.length}, 成功转换图片: ${successCount}`);\n  return imageData;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}