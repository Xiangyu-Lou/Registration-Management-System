{"ast":null,"code":"import { reactive, ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport auth from '../store/auth';\n\n/* eslint-disable vue/multi-word-component-names */\nexport default {\n  name: 'LoginView',\n  setup() {\n    const router = useRouter();\n    const loginForm = ref(null);\n    const form = reactive({\n      phone: '',\n      password: '',\n      userType: 1,\n      // 默认为员工\n      rememberMe: false // 添加记住登录选项\n    });\n\n    // 所有用户类型都需要密码\n    const rules = {\n      phone: [{\n        required: true,\n        message: '请输入手机号',\n        trigger: 'submit'\n      }, {\n        pattern: /^1[3-9]\\d{9}$/,\n        message: '请输入正确的手机号格式',\n        trigger: 'submit'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'submit'\n      }]\n    };\n\n    // 切换用户类型时重置表单验证\n    const handleUserTypeChange = () => {\n      if (loginForm.value) {\n        loginForm.value.clearValidate();\n      }\n    };\n\n    // 提交表单\n    const submitForm = async () => {\n      console.log('提交表单被触发');\n      if (!loginForm.value) {\n        console.log('表单引用不存在');\n        return;\n      }\n\n      // 防止重复提交\n      if (auth.state.loading) {\n        console.log('登录正在进行中，跳过');\n        return;\n      }\n\n      // 所有用户类型都需要验证整个表单\n      loginForm.value.validate(async valid => {\n        if (valid) {\n          console.log('表单验证通过');\n          await doLogin();\n        } else {\n          console.log('表单验证失败');\n        }\n      });\n    };\n\n    // 执行登录\n    const doLogin = async () => {\n      console.log('开始登录，账号:', form.phone, '用户类型:', form.userType);\n      try {\n        // 添加调试信息\n        console.log('开始处理登录操作...');\n\n        // 所有用户类型都需要密码\n        const result = await auth.login(form.phone, form.password, form.rememberMe, form.userType);\n        console.log('登录响应:', result);\n        if (result.success) {\n          const user = result.user;\n          ElMessage.success(`欢迎，${user.username || user.phone}`);\n\n          // 根据用户角色跳转到不同页面\n          if (user.role_id === 3) {\n            // 超级管理员\n            router.push('/admin-records');\n          } else if (user.role_id === 2) {\n            // 单位管理员直接进入记录页面\n            router.push(`/records/${user.unit_id}`);\n          } else {\n            // 普通员工进入填报页面\n            router.push(`/unit/${user.unit_id}`);\n          }\n        } else {\n          // 显示登录失败错误\n          ElMessage.error(result.error || '登录失败');\n        }\n      } catch (error) {\n        // 捕获并显示非预期错误\n        ElMessage.error(error.response?.data?.error || '登录失败，请检查网络连接');\n      }\n    };\n\n    // 如果已登录，自动跳转\n    onMounted(() => {\n      if (auth.state.isLoggedIn) {\n        const user = auth.state.user;\n        if (user.role_id === 3) {\n          router.push('/admin-records');\n        } else if (user.role_id === 2) {\n          router.push(`/records/${user.unit_id}`);\n        } else {\n          router.push(`/unit/${user.unit_id}`);\n        }\n      }\n    });\n    return {\n      form,\n      rules,\n      loginForm,\n      handleUserTypeChange,\n      submitForm,\n      auth\n    };\n  }\n};","map":{"version":3,"names":["reactive","ref","onMounted","useRouter","ElMessage","auth","name","setup","router","loginForm","form","phone","password","userType","rememberMe","rules","required","message","trigger","pattern","handleUserTypeChange","value","clearValidate","submitForm","console","log","state","loading","validate","valid","doLogin","result","login","success","user","username","role_id","push","unit_id","error","response","data","isLoggedIn"],"sources":["F:\\Project\\Hazardous-waste-management-system\\frontend\\src\\views\\Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-card\">\r\n      <div class=\"login-header\">\r\n        <h1>危险废物管理系统</h1>\r\n        <h2>用户登录</h2>\r\n      </div>\r\n      \r\n      <el-form \r\n        ref=\"loginForm\" \r\n        :model=\"form\" \r\n        :rules=\"rules\" \r\n        label-width=\"80px\"\r\n        class=\"login-form\"\r\n        @submit.prevent=\"submitForm\"\r\n      >\r\n        <el-form-item label=\"手机号\" prop=\"phone\">\r\n          <el-input \r\n            v-model=\"form.phone\" \r\n            placeholder=\"请输入手机号\" \r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"密码\" prop=\"password\">\r\n          <el-input \r\n            v-model=\"form.password\" \r\n            type=\"password\" \r\n            placeholder=\"请输入密码\" \r\n            show-password\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-radio-group v-model=\"form.userType\" @change=\"handleUserTypeChange\">\r\n            <el-radio :label=\"1\">员工</el-radio>\r\n            <el-radio :label=\"2\">单位管理员</el-radio>\r\n            <el-radio :label=\"3\">超级管理员</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-checkbox v-model=\"form.rememberMe\">记住登录</el-checkbox>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-button \r\n            type=\"primary\" \r\n            native-type=\"submit\"\r\n            @click=\"submitForm\" \r\n            :loading=\"auth.state.loading\"\r\n            style=\"width: 100%\"\r\n          >\r\n            登录\r\n          </el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n      \r\n      <div v-if=\"auth.state.error\" class=\"login-error\">\r\n        {{ auth.state.error }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { reactive, ref, onMounted } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { ElMessage } from 'element-plus';\r\nimport auth from '../store/auth';\r\n\r\n/* eslint-disable vue/multi-word-component-names */\r\nexport default {\r\n  name: 'LoginView',\r\n  setup() {\r\n    const router = useRouter();\r\n    const loginForm = ref(null);\r\n    \r\n    const form = reactive({\r\n      phone: '',\r\n      password: '',\r\n      userType: 1, // 默认为员工\r\n      rememberMe: false // 添加记住登录选项\r\n    });\r\n    \r\n    // 所有用户类型都需要密码\r\n    const rules = {\r\n      phone: [\r\n        { required: true, message: '请输入手机号', trigger: 'submit' },\r\n        { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号格式', trigger: 'submit' }\r\n      ],\r\n      password: [\r\n        { required: true, message: '请输入密码', trigger: 'submit' }\r\n      ]\r\n    };\r\n    \r\n    // 切换用户类型时重置表单验证\r\n    const handleUserTypeChange = () => {\r\n      if (loginForm.value) {\r\n        loginForm.value.clearValidate();\r\n      }\r\n    };\r\n    \r\n    // 提交表单\r\n    const submitForm = async () => {\r\n      console.log('提交表单被触发');\r\n      if (!loginForm.value) {\r\n        console.log('表单引用不存在');\r\n        return;\r\n      }\r\n      \r\n      // 防止重复提交\r\n      if (auth.state.loading) {\r\n        console.log('登录正在进行中，跳过');\r\n        return;\r\n      }\r\n      \r\n      // 所有用户类型都需要验证整个表单\r\n      loginForm.value.validate(async (valid) => {\r\n        if (valid) {\r\n          console.log('表单验证通过');\r\n          await doLogin();\r\n        } else {\r\n          console.log('表单验证失败');\r\n        }\r\n      });\r\n    };\r\n    \r\n    // 执行登录\r\n    const doLogin = async () => {\r\n      console.log('开始登录，账号:', form.phone, '用户类型:', form.userType);\r\n      try {\r\n        // 添加调试信息\r\n        console.log('开始处理登录操作...');\r\n        \r\n        // 所有用户类型都需要密码\r\n        const result = await auth.login(\r\n          form.phone,\r\n          form.password,\r\n          form.rememberMe,\r\n          form.userType\r\n        );\r\n        \r\n        console.log('登录响应:', result);\r\n        \r\n        if (result.success) {\r\n          const user = result.user;\r\n          \r\n          ElMessage.success(`欢迎，${user.username || user.phone}`);\r\n          \r\n          // 根据用户角色跳转到不同页面\r\n          if (user.role_id === 3) {\r\n            // 超级管理员\r\n            router.push('/admin-records');\r\n          } else if (user.role_id === 2) {\r\n            // 单位管理员直接进入记录页面\r\n            router.push(`/records/${user.unit_id}`);\r\n          } else {\r\n            // 普通员工进入填报页面\r\n            router.push(`/unit/${user.unit_id}`);\r\n          }\r\n        } else {\r\n          // 显示登录失败错误\r\n          ElMessage.error(result.error || '登录失败');\r\n        }\r\n      } catch (error) {\r\n        // 捕获并显示非预期错误\r\n        ElMessage.error(error.response?.data?.error || '登录失败，请检查网络连接');\r\n      }\r\n    };\r\n    \r\n    // 如果已登录，自动跳转\r\n    onMounted(() => {\r\n      if (auth.state.isLoggedIn) {\r\n        const user = auth.state.user;\r\n        if (user.role_id === 3) {\r\n          router.push('/admin-records');\r\n        } else if (user.role_id === 2) {\r\n          router.push(`/records/${user.unit_id}`);\r\n        } else {\r\n          router.push(`/unit/${user.unit_id}`);\r\n        }\r\n      }\r\n    });\r\n    \r\n    return {\r\n      form,\r\n      rules,\r\n      loginForm,\r\n      handleUserTypeChange,\r\n      submitForm,\r\n      auth\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background-color: #f0f2f5;\r\n  padding: 15px;\r\n}\r\n\r\n.login-card {\r\n  width: 400px;\r\n  padding: 30px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.login-header {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.login-header h1 {\r\n  font-size: 24px;\r\n  color: #409EFF;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.login-header h2 {\r\n  font-size: 18px;\r\n  color: #555;\r\n  font-weight: normal;\r\n}\r\n\r\n.login-form {\r\n  margin-top: 20px;\r\n}\r\n\r\n.login-error {\r\n  color: #f56c6c;\r\n  text-align: center;\r\n  margin-top: 15px;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 移动端适配 */\r\n@media screen and (max-width: 480px) {\r\n  .login-card {\r\n    width: 100%;\r\n    padding: 20px;\r\n    box-shadow: none;\r\n  }\r\n  \r\n  .login-header h1 {\r\n    font-size: 20px;\r\n  }\r\n  \r\n  .login-header h2 {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .el-form-item {\r\n    margin-bottom: 15px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAiEA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAC9C,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,SAAQ,QAAS,cAAc;AACxC,OAAOC,IAAG,MAAO,eAAe;;AAEhC;AACA,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIL,SAAS,CAAC,CAAC;IAC1B,MAAMM,SAAQ,GAAIR,GAAG,CAAC,IAAI,CAAC;IAE3B,MAAMS,IAAG,GAAIV,QAAQ,CAAC;MACpBW,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,CAAC;MAAE;MACbC,UAAU,EAAE,KAAI,CAAE;IACpB,CAAC,CAAC;;IAEF;IACA,MAAMC,KAAI,GAAI;MACZJ,KAAK,EAAE,CACL;QAAEK,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAS,CAAC,EACxD;QAAEC,OAAO,EAAE,eAAe;QAAEF,OAAO,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAS,EACvE;MACDN,QAAQ,EAAE,CACR;QAAEI,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAS;IAE1D,CAAC;;IAED;IACA,MAAME,oBAAmB,GAAIA,CAAA,KAAM;MACjC,IAAIX,SAAS,CAACY,KAAK,EAAE;QACnBZ,SAAS,CAACY,KAAK,CAACC,aAAa,CAAC,CAAC;MACjC;IACF,CAAC;;IAED;IACA,MAAMC,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7BC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB,IAAI,CAAChB,SAAS,CAACY,KAAK,EAAE;QACpBG,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtB;MACF;;MAEA;MACA,IAAIpB,IAAI,CAACqB,KAAK,CAACC,OAAO,EAAE;QACtBH,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QACzB;MACF;;MAEA;MACAhB,SAAS,CAACY,KAAK,CAACO,QAAQ,CAAC,MAAOC,KAAK,IAAK;QACxC,IAAIA,KAAK,EAAE;UACTL,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;UACrB,MAAMK,OAAO,CAAC,CAAC;QACjB,OAAO;UACLN,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACvB;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAMK,OAAM,GAAI,MAAAA,CAAA,KAAY;MAC1BN,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEf,IAAI,CAACC,KAAK,EAAE,OAAO,EAAED,IAAI,CAACG,QAAQ,CAAC;MAC3D,IAAI;QACF;QACAW,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;;QAE1B;QACA,MAAMM,MAAK,GAAI,MAAM1B,IAAI,CAAC2B,KAAK,CAC7BtB,IAAI,CAACC,KAAK,EACVD,IAAI,CAACE,QAAQ,EACbF,IAAI,CAACI,UAAU,EACfJ,IAAI,CAACG,QACP,CAAC;QAEDW,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEM,MAAM,CAAC;QAE5B,IAAIA,MAAM,CAACE,OAAO,EAAE;UAClB,MAAMC,IAAG,GAAIH,MAAM,CAACG,IAAI;UAExB9B,SAAS,CAAC6B,OAAO,CAAC,MAAMC,IAAI,CAACC,QAAO,IAAKD,IAAI,CAACvB,KAAK,EAAE,CAAC;;UAEtD;UACA,IAAIuB,IAAI,CAACE,OAAM,KAAM,CAAC,EAAE;YACtB;YACA5B,MAAM,CAAC6B,IAAI,CAAC,gBAAgB,CAAC;UAC/B,OAAO,IAAIH,IAAI,CAACE,OAAM,KAAM,CAAC,EAAE;YAC7B;YACA5B,MAAM,CAAC6B,IAAI,CAAC,YAAYH,IAAI,CAACI,OAAO,EAAE,CAAC;UACzC,OAAO;YACL;YACA9B,MAAM,CAAC6B,IAAI,CAAC,SAASH,IAAI,CAACI,OAAO,EAAE,CAAC;UACtC;QACF,OAAO;UACL;UACAlC,SAAS,CAACmC,KAAK,CAACR,MAAM,CAACQ,KAAI,IAAK,MAAM,CAAC;QACzC;MACF,EAAE,OAAOA,KAAK,EAAE;QACd;QACAnC,SAAS,CAACmC,KAAK,CAACA,KAAK,CAACC,QAAQ,EAAEC,IAAI,EAAEF,KAAI,IAAK,cAAc,CAAC;MAChE;IACF,CAAC;;IAED;IACArC,SAAS,CAAC,MAAM;MACd,IAAIG,IAAI,CAACqB,KAAK,CAACgB,UAAU,EAAE;QACzB,MAAMR,IAAG,GAAI7B,IAAI,CAACqB,KAAK,CAACQ,IAAI;QAC5B,IAAIA,IAAI,CAACE,OAAM,KAAM,CAAC,EAAE;UACtB5B,MAAM,CAAC6B,IAAI,CAAC,gBAAgB,CAAC;QAC/B,OAAO,IAAIH,IAAI,CAACE,OAAM,KAAM,CAAC,EAAE;UAC7B5B,MAAM,CAAC6B,IAAI,CAAC,YAAYH,IAAI,CAACI,OAAO,EAAE,CAAC;QACzC,OAAO;UACL9B,MAAM,CAAC6B,IAAI,CAAC,SAASH,IAAI,CAACI,OAAO,EAAE,CAAC;QACtC;MACF;IACF,CAAC,CAAC;IAEF,OAAO;MACL5B,IAAI;MACJK,KAAK;MACLN,SAAS;MACTW,oBAAoB;MACpBG,UAAU;MACVlB;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}