{"ast":null,"code":"import { reactive } from 'vue';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\n\n// 初始化状态\nconst defaultState = {\n  user: null,\n  token: null,\n  isLoggedIn: false,\n  loading: false,\n  error: null\n};\n\n// 创建响应式状态\nconst state = reactive({\n  ...defaultState\n});\n\n// 从localStorage获取已保存的用户信息和token\nconst init = () => {\n  const savedUser = localStorage.getItem('user');\n  const savedToken = localStorage.getItem('token');\n  if (savedUser && savedToken) {\n    try {\n      const user = JSON.parse(savedUser);\n      state.user = user;\n      state.token = savedToken;\n      state.isLoggedIn = true;\n      // 设置 token 到 httpService\n      httpService.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\n    } catch (e) {\n      console.error('Error parsing saved user data:', e);\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n    }\n  }\n};\n\n// 登录方法\nconst login = async (phone, password, rememberMe = false) => {\n  // 设置加载状态\n  state.loading = true;\n  state.error = null;\n  console.log('auth.login 开始执行，手机号:', phone);\n  try {\n    // 员工登录不发送密码字段，管理员必须发送密码\n    const postData = {\n      phone,\n      rememberMe\n    };\n\n    // 只有在密码存在且非空时才添加到请求中\n    if (password !== null && password !== undefined && password !== '') {\n      postData.password = password;\n      console.log('auth.login 发送密码参数');\n    } else {\n      console.log('auth.login 不发送密码参数');\n    }\n    console.log('发送登录请求，数据:', postData);\n    const response = await httpService.post(apiConfig.endpoints.login, postData);\n    console.log('登录请求成功响应:', response.data);\n    const {\n      token,\n      ...user\n    } = response.data;\n    state.user = user;\n    state.token = token;\n    state.isLoggedIn = true;\n\n    // 设置 token 到 httpService\n    httpService.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n    // 如果选择记住登录，保存到localStorage\n    if (rememberMe) {\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } else {\n      // 否则只保存在 sessionStorage 中\n      sessionStorage.setItem('user', JSON.stringify(user));\n      sessionStorage.setItem('token', token);\n    }\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\n    console.error('Login error:', error);\n    return {\n      success: false,\n      error: state.error\n    };\n  } finally {\n    state.loading = false;\n  }\n};\n\n// 注销方法\nconst logout = () => {\n  state.user = null;\n  state.token = null;\n  state.isLoggedIn = false;\n  delete httpService.defaults.headers.common['Authorization'];\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  sessionStorage.removeItem('user');\n  sessionStorage.removeItem('token');\n};\n\n// 初始化认证状态\ninit();\nexport default {\n  state,\n  login,\n  logout\n};","map":{"version":3,"names":["reactive","httpService","apiConfig","defaultState","user","token","isLoggedIn","loading","error","state","init","savedUser","localStorage","getItem","savedToken","JSON","parse","defaults","headers","common","e","console","removeItem","login","phone","password","rememberMe","log","postData","undefined","response","post","endpoints","data","setItem","stringify","sessionStorage","success","logout"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/store/auth.js"],"sourcesContent":["import { reactive } from 'vue';\r\nimport httpService from '../config/httpService';\r\nimport apiConfig from '../config/api';\r\n\r\n// 初始化状态\r\nconst defaultState = {\r\n  user: null,\r\n  token: null,\r\n  isLoggedIn: false,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// 创建响应式状态\r\nconst state = reactive({\r\n  ...defaultState\r\n});\r\n\r\n// 从localStorage获取已保存的用户信息和token\r\nconst init = () => {\r\n  const savedUser = localStorage.getItem('user');\r\n  const savedToken = localStorage.getItem('token');\r\n  if (savedUser && savedToken) {\r\n    try {\r\n      const user = JSON.parse(savedUser);\r\n      state.user = user;\r\n      state.token = savedToken;\r\n      state.isLoggedIn = true;\r\n      // 设置 token 到 httpService\r\n      httpService.defaults.headers.common['Authorization'] = `Bearer ${savedToken}`;\r\n    } catch (e) {\r\n      console.error('Error parsing saved user data:', e);\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n    }\r\n  }\r\n};\r\n\r\n// 登录方法\r\nconst login = async (phone, password, rememberMe = false) => {\r\n  // 设置加载状态\r\n  state.loading = true;\r\n  state.error = null;\r\n  \r\n  console.log('auth.login 开始执行，手机号:', phone);\r\n\r\n  try {\r\n    // 员工登录不发送密码字段，管理员必须发送密码\r\n    const postData = { phone, rememberMe };\r\n    \r\n    // 只有在密码存在且非空时才添加到请求中\r\n    if (password !== null && password !== undefined && password !== '') {\r\n      postData.password = password;\r\n      console.log('auth.login 发送密码参数');\r\n    } else {\r\n      console.log('auth.login 不发送密码参数');\r\n    }\r\n    \r\n    console.log('发送登录请求，数据:', postData);\r\n    const response = await httpService.post(apiConfig.endpoints.login, postData);\r\n    console.log('登录请求成功响应:', response.data);\r\n\r\n    const { token, ...user } = response.data;\r\n    state.user = user;\r\n    state.token = token;\r\n    state.isLoggedIn = true;\r\n    \r\n    // 设置 token 到 httpService\r\n    httpService.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    \r\n    // 如果选择记住登录，保存到localStorage\r\n    if (rememberMe) {\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n    } else {\r\n      // 否则只保存在 sessionStorage 中\r\n      sessionStorage.setItem('user', JSON.stringify(user));\r\n      sessionStorage.setItem('token', token);\r\n    }\r\n    \r\n    return { success: true, user };\r\n  } catch (error) {\r\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\r\n    console.error('Login error:', error);\r\n    return { success: false, error: state.error };\r\n  } finally {\r\n    state.loading = false;\r\n  }\r\n};\r\n\r\n// 注销方法\r\nconst logout = () => {\r\n  state.user = null;\r\n  state.token = null;\r\n  state.isLoggedIn = false;\r\n  delete httpService.defaults.headers.common['Authorization'];\r\n  localStorage.removeItem('user');\r\n  localStorage.removeItem('token');\r\n  sessionStorage.removeItem('user');\r\n  sessionStorage.removeItem('token');\r\n};\r\n\r\n// 初始化认证状态\r\ninit();\r\n\r\nexport default {\r\n  state,\r\n  login,\r\n  logout\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}