{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n// 解析照片路径函数（与页面中使用的方式相同）\nconst parsePhotoPath = path => {\n  if (!path) return [];\n  try {\n    // 尝试解析为JSON\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\n      return JSON.parse(path);\n    }\n    // 如果不是JSON格式，则将其作为单个路径返回\n    return [path];\n  } catch (error) {\n    console.error('解析照片路径失败:', error);\n    // 如果解析失败，将其作为单个路径返回\n    return [path];\n  }\n};\n\n// 添加一个函数来创建图片元素\nconst createImageElement = url => {\n  const img = document.createElement('img');\n  img.src = url;\n  img.style.width = '100px';\n  img.style.height = '100px';\n  return img;\n};\n\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象\r\n */\nexport const exportToExcelWithImages = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('使用js-table2excel导出Excel...');\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n\n    // 创建一个临时表格元素\n    const table = document.createElement('table');\n    table.style.display = 'none';\n    document.body.appendChild(table);\n\n    // 创建表头\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header => {\n      const th = document.createElement('th');\n      th.textContent = header.text;\n      headerRow.appendChild(th);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n\n    // 创建表体\n    const tbody = document.createElement('tbody');\n\n    // 添加数据行\n    data.forEach((row, rowIndex) => {\n      const tr = document.createElement('tr');\n      headers.forEach(header => {\n        const td = document.createElement('td');\n\n        // 处理清理前照片列\n        if (header.field === '清理前照片') {\n          const record = row['__original'] || {}; // 获取原始记录\n\n          if (record.photo_path_before) {\n            // 解析照片路径（与页面中使用的方式相同）\n            const photoPaths = parsePhotoPath(record.photo_path_before);\n            if (photoPaths && photoPaths.length > 0) {\n              // 只使用第一张照片\n              const firstPath = photoPaths[0];\n              // 构建完整URL（与页面中使用的方式相同）\n              const imageUrl = window.location.origin + firstPath;\n              console.log('清理前照片URL:', imageUrl);\n\n              // 创建图片元素\n              const img = createImageElement(imageUrl);\n              td.appendChild(img);\n            } else {\n              td.textContent = '无图片';\n            }\n          } else {\n            td.textContent = '无图片';\n          }\n        }\n        // 处理清理后照片列 \n        else if (header.field === '清理后照片') {\n          const record = row['__original'] || {}; // 获取原始记录\n\n          if (record.photo_path_after) {\n            // 解析照片路径（与页面中使用的方式相同）\n            const photoPaths = parsePhotoPath(record.photo_path_after);\n            if (photoPaths && photoPaths.length > 0) {\n              // 只使用第一张照片\n              const firstPath = photoPaths[0];\n              // 构建完整URL（与页面中使用的方式相同）\n              const imageUrl = window.location.origin + firstPath;\n              console.log('清理后照片URL:', imageUrl);\n\n              // 创建图片元素\n              const img = createImageElement(imageUrl);\n              td.appendChild(img);\n            } else {\n              td.textContent = '无图片';\n            }\n          } else {\n            td.textContent = '无图片';\n          }\n        } else {\n          // 普通文本列\n          td.textContent = row[header.field] || '';\n        }\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n    });\n    table.appendChild(tbody);\n\n    // 使用js-table2excel导出\n    const table2excel = new Table2Excel();\n    table2excel.export(table, fullFileName);\n\n    // 导出完成后移除临时表格\n    document.body.removeChild(table);\n    return true;\n  } catch (error) {\n    console.error('使用js-table2excel导出Excel失败:', error);\n\n    // 如果js-table2excel导出失败，尝试使用CSV导出\n    try {\n      console.log('尝试使用CSV导出...');\n\n      // 准备CSV内容\n      let csvContent = '';\n\n      // 添加表头\n      csvContent += headers.map(header => `\"${header.text}\"`).join(',') + '\\n';\n\n      // 添加数据行\n      data.forEach(row => {\n        const rowData = headers.map(header => {\n          const value = row[header.field] || '';\n          // 如果值包含逗号、双引号或换行符，需要用双引号包裹并转义内部的双引号\n          if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\n          }\n          return `\"${value}\"`;\n        });\n        csvContent += rowData.join(',') + '\\n';\n      });\n\n      // 创建Blob对象\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n\n      // 创建下载链接\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${fileName}_${new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14)}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n\n      // 触发下载\n      link.click();\n\n      // 清理\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      return true;\n    } catch (csvError) {\n      console.error('CSV导出也失败:', csvError);\n      return false;\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片链接\n    if (imageData && Object.keys(imageData).length > 0) {\n      enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n    } else {\n      enhancedData = data;\n    }\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\nexport const imageUrlToBase64 = async url => {\n  console.log('开始转换图片到Base64:', url);\n\n  // 确保URL有效\n  if (!url || typeof url !== 'string') {\n    console.error('无效的图片URL:', url);\n    return null;\n  }\n\n  // 尝试方法1：使用fetch API\n  try {\n    console.log('尝试使用fetch API获取图片...');\n    const response = await fetch(url, {\n      mode: 'cors',\n      cache: 'no-cache'\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP错误: ${response.status}`);\n    }\n    const blob = await response.blob();\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\n        resolve(reader.result);\n      };\n      reader.onerror = e => {\n        console.error('FileReader错误:', e);\n        reject(e);\n      };\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.warn('使用fetch API获取图片失败:', error);\n\n    // 尝试方法2：使用Image对象\n    try {\n      console.log('尝试使用Image对象获取图片...');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // 允许跨域\n\n      // 等待图片加载\n      await new Promise((resolve, reject) => {\n        img.onload = resolve;\n        img.onerror = e => {\n          console.error('图片加载错误:', e);\n          reject(e);\n        };\n        img.src = url;\n      });\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\n\n      // 创建canvas并绘制图片\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0);\n\n      // 转换为base64\n      const base64 = canvas.toDataURL('image/jpeg');\n      console.log('图片转换为Base64成功，长度:', base64.length);\n      return base64;\n    } catch (error2) {\n      console.error('使用Image对象获取图片也失败:', error2);\n      return null;\n    }\n  }\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\n      }\n    });\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","Table2Excel","console","log","version","Object","keys","join","parsePhotoPath","path","startsWith","endsWith","JSON","parse","error","createImageElement","url","img","document","createElement","src","style","width","height","exportToExcelWithImages","data","fileName","headers","imageData","length","replace","timestamp","Date","toISOString","substring","fullFileName","table","display","body","appendChild","thead","headerRow","forEach","header","th","textContent","text","tbody","row","rowIndex","tr","td","field","record","photo_path_before","photoPaths","firstPath","imageUrl","window","location","origin","photo_path_after","table2excel","export","removeChild","csvContent","map","rowData","value","includes","blob","Blob","type","link","URL","createObjectURL","setAttribute","visibility","click","revokeObjectURL","csvError","exportToExcel","wb","utils","book_new","enhancedData","index","newRow","ws","json_to_sheet","colWidths","wch","book_append_sheet","excelFileName","wbout","write","bookType","size","href","download","exportToCSV","csvFileName","h","title","item","undefined","cellValue","String","imageUrlToBase64","response","fetch","mode","cache","ok","Error","status","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","e","readAsDataURL","warn","Image","crossOrigin","onload","canvas","ctx","getContext","drawImage","base64","toDataURL","error2","prepareImageExportData","records","baseUrl","beforeImages","afterImages","beforePaths","pathStr","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n// 解析照片路径函数（与页面中使用的方式相同）\r\nconst parsePhotoPath = (path) => {\r\n  if (!path) return [];\r\n  \r\n  try {\r\n    // 尝试解析为JSON\r\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\r\n      return JSON.parse(path);\r\n    }\r\n    // 如果不是JSON格式，则将其作为单个路径返回\r\n    return [path];\r\n  } catch (error) {\r\n    console.error('解析照片路径失败:', error);\r\n    // 如果解析失败，将其作为单个路径返回\r\n    return [path];\r\n  }\r\n};\r\n\r\n// 添加一个函数来创建图片元素\r\nconst createImageElement = (url) => {\r\n  const img = document.createElement('img');\r\n  img.src = url;\r\n  img.style.width = '100px';\r\n  img.style.height = '100px';\r\n  return img;\r\n};\r\n\r\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象\r\n */\r\nexport const exportToExcelWithImages = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('使用js-table2excel导出Excel...');\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    \r\n    // 创建一个临时表格元素\r\n    const table = document.createElement('table');\r\n    table.style.display = 'none';\r\n    document.body.appendChild(table);\r\n    \r\n    // 创建表头\r\n    const thead = document.createElement('thead');\r\n    const headerRow = document.createElement('tr');\r\n    \r\n    headers.forEach(header => {\r\n      const th = document.createElement('th');\r\n      th.textContent = header.text;\r\n      headerRow.appendChild(th);\r\n    });\r\n    \r\n    thead.appendChild(headerRow);\r\n    table.appendChild(thead);\r\n    \r\n    // 创建表体\r\n    const tbody = document.createElement('tbody');\r\n    \r\n    // 添加数据行\r\n    data.forEach((row, rowIndex) => {\r\n      const tr = document.createElement('tr');\r\n      \r\n      headers.forEach(header => {\r\n        const td = document.createElement('td');\r\n        \r\n        // 处理清理前照片列\r\n        if (header.field === '清理前照片') {\r\n          const record = row['__original'] || {}; // 获取原始记录\r\n          \r\n          if (record.photo_path_before) {\r\n            // 解析照片路径（与页面中使用的方式相同）\r\n            const photoPaths = parsePhotoPath(record.photo_path_before);\r\n            \r\n            if (photoPaths && photoPaths.length > 0) {\r\n              // 只使用第一张照片\r\n              const firstPath = photoPaths[0];\r\n              // 构建完整URL（与页面中使用的方式相同）\r\n              const imageUrl = window.location.origin + firstPath;\r\n              console.log('清理前照片URL:', imageUrl);\r\n              \r\n              // 创建图片元素\r\n              const img = createImageElement(imageUrl);\r\n              td.appendChild(img);\r\n            } else {\r\n              td.textContent = '无图片';\r\n            }\r\n          } else {\r\n            td.textContent = '无图片';\r\n          }\r\n        }\r\n        // 处理清理后照片列 \r\n        else if (header.field === '清理后照片') {\r\n          const record = row['__original'] || {}; // 获取原始记录\r\n          \r\n          if (record.photo_path_after) {\r\n            // 解析照片路径（与页面中使用的方式相同）\r\n            const photoPaths = parsePhotoPath(record.photo_path_after);\r\n            \r\n            if (photoPaths && photoPaths.length > 0) {\r\n              // 只使用第一张照片\r\n              const firstPath = photoPaths[0];\r\n              // 构建完整URL（与页面中使用的方式相同）\r\n              const imageUrl = window.location.origin + firstPath;\r\n              console.log('清理后照片URL:', imageUrl);\r\n              \r\n              // 创建图片元素\r\n              const img = createImageElement(imageUrl);\r\n              td.appendChild(img);\r\n            } else {\r\n              td.textContent = '无图片';\r\n            }\r\n          } else {\r\n            td.textContent = '无图片';\r\n          }\r\n        }\r\n        else {\r\n          // 普通文本列\r\n          td.textContent = row[header.field] || '';\r\n        }\r\n        \r\n        tr.appendChild(td);\r\n      });\r\n      \r\n      tbody.appendChild(tr);\r\n    });\r\n    \r\n    table.appendChild(tbody);\r\n    \r\n    // 使用js-table2excel导出\r\n    const table2excel = new Table2Excel();\r\n    table2excel.export(table, fullFileName);\r\n    \r\n    // 导出完成后移除临时表格\r\n    document.body.removeChild(table);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('使用js-table2excel导出Excel失败:', error);\r\n    \r\n    // 如果js-table2excel导出失败，尝试使用CSV导出\r\n    try {\r\n      console.log('尝试使用CSV导出...');\r\n      \r\n      // 准备CSV内容\r\n      let csvContent = '';\r\n      \r\n      // 添加表头\r\n      csvContent += headers.map(header => `\"${header.text}\"`).join(',') + '\\n';\r\n      \r\n      // 添加数据行\r\n      data.forEach(row => {\r\n        const rowData = headers.map(header => {\r\n          const value = row[header.field] || '';\r\n          // 如果值包含逗号、双引号或换行符，需要用双引号包裹并转义内部的双引号\r\n          if (value.includes(',') || value.includes('\"') || value.includes('\\n')) {\r\n            return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n          }\r\n          return `\"${value}\"`;\r\n        });\r\n        csvContent += rowData.join(',') + '\\n';\r\n      });\r\n      \r\n      // 创建Blob对象\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      \r\n      // 创建下载链接\r\n      const link = document.createElement('a');\r\n      const url = URL.createObjectURL(blob);\r\n      link.setAttribute('href', url);\r\n      link.setAttribute('download', `${fileName}_${new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14)}.csv`);\r\n      link.style.visibility = 'hidden';\r\n      document.body.appendChild(link);\r\n      \r\n      // 触发下载\r\n      link.click();\r\n      \r\n      // 清理\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      return true;\r\n    } catch (csvError) {\r\n      console.error('CSV导出也失败:', csvError);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片链接\r\n    if (imageData && Object.keys(imageData).length > 0) {\r\n      enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n    } else {\r\n      enhancedData = data;\r\n    }\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\r\nexport const imageUrlToBase64 = async (url) => {\r\n  console.log('开始转换图片到Base64:', url);\r\n  \r\n  // 确保URL有效\r\n  if (!url || typeof url !== 'string') {\r\n    console.error('无效的图片URL:', url);\r\n    return null;\r\n  }\r\n  \r\n  // 尝试方法1：使用fetch API\r\n  try {\r\n    console.log('尝试使用fetch API获取图片...');\r\n    const response = await fetch(url, { \r\n      mode: 'cors',\r\n      cache: 'no-cache'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`HTTP错误: ${response.status}`);\r\n    }\r\n    \r\n    const blob = await response.blob();\r\n    console.log('图片获取成功，大小:', blob.size, '字节, 类型:', blob.type);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        console.log('图片转换为Base64成功，长度:', reader.result.length);\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = (e) => {\r\n        console.error('FileReader错误:', e);\r\n        reject(e);\r\n      };\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  } catch (error) {\r\n    console.warn('使用fetch API获取图片失败:', error);\r\n    \r\n    // 尝试方法2：使用Image对象\r\n    try {\r\n      console.log('尝试使用Image对象获取图片...');\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous'; // 允许跨域\r\n      \r\n      // 等待图片加载\r\n      await new Promise((resolve, reject) => {\r\n        img.onload = resolve;\r\n        img.onerror = (e) => {\r\n          console.error('图片加载错误:', e);\r\n          reject(e);\r\n        };\r\n        img.src = url;\r\n      });\r\n      \r\n      console.log('图片加载成功，尺寸:', img.width, 'x', img.height);\r\n      \r\n      // 创建canvas并绘制图片\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0);\r\n      \r\n      // 转换为base64\r\n      const base64 = canvas.toDataURL('image/jpeg');\r\n      console.log('图片转换为Base64成功，长度:', base64.length);\r\n      return base64;\r\n    } catch (error2) {\r\n      console.error('使用Image对象获取图片也失败:', error2);\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\r\n        \r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\r\n        \r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\r\n      }\r\n    });\r\n    \r\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}