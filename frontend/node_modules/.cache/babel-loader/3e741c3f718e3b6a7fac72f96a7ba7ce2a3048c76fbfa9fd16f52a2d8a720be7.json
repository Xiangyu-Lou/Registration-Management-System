{"ast":null,"code":"import { ref, onMounted, computed, reactive, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\nimport { ArrowLeft, Home, Refresh, PictureFailed, Plus, User, ArrowDown, ArrowUp } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\n\n// 判断是否为JSON格式的照片路径\nconst isJsonPhotoPath = path => {\n  try {\n    const parsed = JSON.parse(path);\n    return Array.isArray(parsed);\n  } catch (error) {\n    return false;\n  }\n};\n\n// 解析JSON格式的照片路径\nconst parsePhotoPath = path => {\n  try {\n    return JSON.parse(path);\n  } catch (error) {\n    return [path];\n  }\n};\nexport default {\n  name: 'RecordsList',\n  components: {\n    ArrowLeft,\n    Home,\n    Refresh,\n    PictureFailed,\n    Plus,\n    User,\n    ArrowDown,\n    ArrowUp\n  },\n  props: {\n    unitId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  setup(props) {\n    const router = useRouter();\n    const records = ref([]);\n    const loading = ref(false);\n    const unitName = ref('');\n    const wasteTypes = ref([]);\n    const showFilterPanel = ref(false);\n\n    // 筛选表单\n    const filterForm = reactive({\n      dateRange: null,\n      wasteTypeId: null,\n      minQuantity: null,\n      maxQuantity: null,\n      location: ''\n    });\n\n    // 过滤后的记录\n    const filteredRecords = computed(() => {\n      return records.value.filter(record => {\n        // 检查废物类型\n        if (filterForm.wasteTypeId && record.waste_type_id !== filterForm.wasteTypeId) {\n          return false;\n        }\n\n        // 检查数量范围\n        if (filterForm.minQuantity !== null && parseFloat(record.quantity) < filterForm.minQuantity) {\n          return false;\n        }\n        if (filterForm.maxQuantity !== null && parseFloat(record.quantity) > filterForm.maxQuantity) {\n          return false;\n        }\n\n        // 检查地点关键词\n        if (filterForm.location && !record.location.toLowerCase().includes(filterForm.location.toLowerCase())) {\n          return false;\n        }\n\n        // 检查日期范围\n        if (filterForm.dateRange && filterForm.dateRange.length === 2) {\n          const startDate = new Date(filterForm.dateRange[0]);\n          // 将结束日期设置为当天的23:59:59，以包含整天\n          const endDate = new Date(filterForm.dateRange[1]);\n          endDate.setHours(23, 59, 59, 999);\n\n          // 解析记录中的收集开始时间\n          if (record.collection_start_time) {\n            // 处理已格式化的日期时间字符串\n            const recordDate = parseFormattedDateTime(record.collection_start_time);\n            if (recordDate < startDate || recordDate > endDate) {\n              return false;\n            }\n          } else {\n            // 如果记录没有收集时间，并且筛选设置了日期范围，则排除该记录\n            return false;\n          }\n        }\n        return true;\n      });\n    });\n\n    // 解析已格式化的日期时间字符串\n    const parseFormattedDateTime = formattedDateTime => {\n      // 假设格式是 \"2025-03-01 14:30:00\"\n      // 移除所有非数字和连字符、冒号的字符\n      const cleanedStr = formattedDateTime.replace(/[^0-9\\-: ]/g, '');\n      return new Date(cleanedStr);\n    };\n\n    // 检查用户是否为超级管理员\n    const isAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n\n    // 检查用户是否为单位管理员\n    const isUnitAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 2;\n    });\n    onMounted(async () => {\n      await fetchUnitName();\n      await fetchWasteTypes();\n      await fetchRecords();\n    });\n\n    // 获取废物类型列表\n    const fetchWasteTypes = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\n        wasteTypes.value = response.data;\n      } catch (error) {\n        console.error('Error fetching waste types:', error);\n        ElMessage.error('获取废物类型列表失败');\n      }\n    };\n    const fetchUnitName = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        const unit = response.data.find(u => u.id === parseInt(props.unitId));\n        if (unit) {\n          unitName.value = unit.name;\n        }\n      } catch (error) {\n        console.error('Error fetching unit name:', error);\n        ElMessage.error('获取单位信息失败');\n      }\n    };\n    const fetchRecords = async () => {\n      loading.value = true;\n      try {\n        // 使用用户ID获取相应权限的记录\n        const response = await httpService.get(`${apiConfig.endpoints.wasteRecords}/user/${auth.state.user.id}`);\n        records.value = response.data;\n\n        // 格式化日期\n        records.value.forEach(record => {\n          record.created_at = formatDateTime(record.created_at);\n          record.collection_start_time = formatDateTime(record.collection_start_time);\n        });\n      } catch (error) {\n        console.error('获取废物记录失败:', error);\n        ElMessage.error('获取废物记录失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n    const formatDateTime = dateTimeStr => {\n      if (!dateTimeStr) return '';\n      const date = new Date(dateTimeStr);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      });\n    };\n    const refreshRecords = () => {\n      fetchRecords();\n    };\n    const goBack = () => {\n      router.push({\n        name: 'WasteForm',\n        params: {\n          id: props.unitId\n        }\n      });\n    };\n\n    // 返回首页\n    const goHome = () => {\n      // 只有超级管理员才能回到单位选择页面\n      if (isAdmin.value) {\n        router.push('/');\n      }\n    };\n\n    // 前往人员管理页面\n    const goToUserManagement = () => {\n      router.push('/user-management');\n    };\n\n    // 添加新的废物记录\n    const addNewRecord = () => {\n      router.push('/record/new');\n    };\n\n    // 编辑现有记录\n    const editRecord = recordId => {\n      router.push(`/record/${recordId}`);\n    };\n\n    // 检查是否可以编辑记录\n    // 超级管理员可以编辑所有记录\n    // 单位管理员可以编辑本单位所有记录\n    // 普通员工只能编辑自己创建的记录\n    const canEdit = record => {\n      if (!auth.state.isLoggedIn) return false;\n      if (auth.state.user.role_id === 3) return true; // 超级管理员\n\n      if (auth.state.user.role_id === 2 && auth.state.user.unit_id === record.unit_id) return true; // 单位管理员\n\n      // 员工只能编辑自己创建的记录\n      // 注意: creator_id 可能为 null （旧记录），如果为 null 我们允许编辑\n      return auth.state.user.unit_id === record.unit_id && (record.creator_id === null || record.creator_id === auth.state.user.id);\n    };\n\n    // 确认删除记录\n    // 应用筛选\n    const applyFilter = () => {\n      // 筛选已在 computed 属性中处理\n      ElMessage.success('筛选已应用');\n    };\n\n    // 重置筛选\n    const resetFilter = () => {\n      filterForm.dateRange = null;\n      filterForm.wasteTypeId = null;\n      filterForm.minQuantity = null;\n      filterForm.maxQuantity = null;\n      filterForm.location = '';\n      ElMessage.info('筛选条件已重置');\n    };\n    const confirmDelete = record => {\n      ElMessageBox.confirm('此操作将永久删除该记录，是否继续？', '警告', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          await httpService.delete(`${apiConfig.endpoints.wasteRecords}/${record.id}`);\n          ElMessage.success('删除成功');\n          await fetchRecords();\n        } catch (error) {\n          console.error('删除记录失败:', error);\n          ElMessage.error('删除记录失败');\n        }\n      }).catch(() => {\n        ElMessage.info('已取消删除');\n      });\n    };\n    return {\n      records,\n      filteredRecords,\n      loading,\n      unitName,\n      wasteTypes,\n      isAdmin,\n      isUnitAdmin,\n      isJsonPhotoPath,\n      parsePhotoPath,\n      refreshRecords,\n      goBack,\n      goHome,\n      goToUserManagement,\n      addNewRecord,\n      editRecord,\n      canEdit,\n      confirmDelete,\n      apiConfig,\n      // 筛选相关\n      showFilterPanel,\n      filterForm,\n      applyFilter,\n      resetFilter\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","reactive","watch","useRouter","ElMessage","ElMessageBox","httpService","apiConfig","ArrowLeft","Home","Refresh","PictureFailed","Plus","User","ArrowDown","ArrowUp","auth","isJsonPhotoPath","path","parsed","JSON","parse","Array","isArray","error","parsePhotoPath","name","components","props","unitId","type","String","Number","required","setup","router","records","loading","unitName","wasteTypes","showFilterPanel","filterForm","dateRange","wasteTypeId","minQuantity","maxQuantity","location","filteredRecords","value","filter","record","waste_type_id","parseFloat","quantity","toLowerCase","includes","length","startDate","Date","endDate","setHours","collection_start_time","recordDate","parseFormattedDateTime","formattedDateTime","cleanedStr","replace","isAdmin","state","isLoggedIn","user","role_id","isUnitAdmin","fetchUnitName","fetchWasteTypes","fetchRecords","response","get","endpoints","data","console","units","unit","find","u","id","parseInt","wasteRecords","forEach","created_at","formatDateTime","dateTimeStr","date","toLocaleString","year","month","day","hour","minute","second","hour12","refreshRecords","goBack","push","params","goHome","goToUserManagement","addNewRecord","editRecord","recordId","canEdit","unit_id","creator_id","applyFilter","success","resetFilter","info","confirmDelete","confirm","confirmButtonText","cancelButtonText","then","delete","catch"],"sources":["C:\\Users\\10150\\Desktop\\Hazardous-waste-management-system\\frontend\\src\\views\\RecordsList.vue"],"sourcesContent":["<template>\n  <div class=\"records-container\">\n    <div class=\"header\">\n      <div class=\"back-button\" @click=\"goBack\">\n        <el-icon><arrow-left /></el-icon> 返回填报\n      </div>\n      <h1>废物记录查看</h1>\n      <div class=\"home-link\" @click=\"goHome\" v-if=\"isAdmin\">\n        首页 <el-icon><home /></el-icon>\n      </div>\n      <div v-else></div>\n    </div>\n\n    <div class=\"content\">\n      <div class=\"unit-info\">\n        <h2>{{ unitName }} - 危险废物记录</h2>\n      </div>\n      \n      <!-- 筛选面板 -->\n      <el-card class=\"filter-card\">\n        <div class=\"filter-header\">\n          <h3>筛选条件</h3>\n          <el-button type=\"primary\" link @click=\"showFilterPanel = !showFilterPanel\">\n            {{ showFilterPanel ? '收起' : '展开' }} <el-icon><arrow-down v-if=\"!showFilterPanel\" /><arrow-up v-else /></el-icon>\n          </el-button>\n        </div>\n        \n        <div v-show=\"showFilterPanel\" class=\"filter-form-container\">\n          <el-form :model=\"filterForm\" label-width=\"100px\" class=\"filter-form\">\n            <el-row :gutter=\"20\">\n              <!-- 收集时间范围 -->\n              <el-col :span=\"12\">\n                <el-form-item label=\"收集时间\">\n                  <el-date-picker\n                    v-model=\"filterForm.dateRange\"\n                    type=\"daterange\"\n                    range-separator=\"至\"\n                    start-placeholder=\"开始日期\"\n                    end-placeholder=\"结束日期\"\n                    format=\"YYYY-MM-DD\"\n                    value-format=\"YYYY-MM-DD\"\n                    style=\"width: 100%\"\n                  />\n                </el-form-item>\n              </el-col>\n              \n              <!-- 废物类型 -->\n              <el-col :span=\"12\">\n                <el-form-item label=\"废物类型\">\n                  <el-select v-model=\"filterForm.wasteTypeId\" placeholder=\"选择废物类型\" style=\"width: 100%\" clearable>\n                    <el-option \n                      v-for=\"type in wasteTypes\" \n                      :key=\"type.id\" \n                      :label=\"type.name\" \n                      :value=\"type.id\" \n                    />\n                  </el-select>\n                </el-form-item>\n              </el-col>\n            </el-row>\n            \n            <el-row :gutter=\"20\">\n              <!-- 数量范围 -->\n              <el-col :span=\"12\">\n                <el-form-item label=\"数量范围(吨)\">\n                  <div class=\"quantity-range\">\n                    <el-input-number \n                      v-model=\"filterForm.minQuantity\" \n                      :min=\"0\"\n                      :precision=\"3\"\n                      :step=\"0.001\"\n                      placeholder=\"最小值\"\n                      style=\"width: 48%\"\n                    />\n                    <span class=\"range-separator\">至</span>\n                    <el-input-number \n                      v-model=\"filterForm.maxQuantity\" \n                      :min=\"filterForm.minQuantity || 0\"\n                      :precision=\"3\"\n                      :step=\"0.001\"\n                      placeholder=\"最大值\"\n                      style=\"width: 48%\"\n                    />\n                  </div>\n                </el-form-item>\n              </el-col>\n              \n              <!-- 产生地点 -->\n              <el-col :span=\"12\">\n                <el-form-item label=\"产生地点\">\n                  <el-input \n                    v-model=\"filterForm.location\" \n                    placeholder=\"输入地点关键词搜索\" \n                    clearable\n                  />\n                </el-form-item>\n              </el-col>\n            </el-row>\n            \n            <div class=\"filter-actions\">\n              <el-button type=\"primary\" @click=\"applyFilter\">筛选</el-button>\n              <el-button @click=\"resetFilter\">重置</el-button>\n            </div>\n          </el-form>\n        </div>\n      </el-card>\n      \n      <div class=\"records-wrapper\">\n        <el-card class=\"records-card\">\n          <div class=\"card-header\">\n          <h3>废物记录列表</h3>\n          <div class=\"card-actions\">\n          <el-button type=\"primary\" @click=\"addNewRecord\">\n              <el-icon><plus /></el-icon> 新增填报\n          </el-button>\n          <el-button type=\"success\" @click=\"goToUserManagement\" v-if=\"isAdmin || isUnitAdmin\">\n              <el-icon><user /></el-icon> 人员管理\n          </el-button>\n          <el-button @click=\"refreshRecords\">\n            <el-icon><refresh /></el-icon> 刷新\n          </el-button>\n        </div>\n      </div>\n          \n          <el-table \n            :data=\"filteredRecords\" \n            style=\"width: 100%\" \n            border \n            v-loading=\"loading\"\n            stripe\n          >\n            <el-table-column prop=\"waste_type_name\" label=\"废物类型\" width=\"110\" />\n            <el-table-column prop=\"location\" label=\"产生地点\" />\n            <el-table-column prop=\"collection_start_time\" label=\"收集开始时间\" width=\"160\" />\n            <el-table-column prop=\"quantity\" label=\"数量(吨)\" width=\"100\" />\n            <el-table-column prop=\"created_at\" label=\"记录时间\" width=\"160\" />\n            <el-table-column label=\"现场照片\" width=\"100\">\n              <template #default=\"scope\">\n                <div v-if=\"scope.row.photo_path\">\n                  <template v-if=\"isJsonPhotoPath(scope.row.photo_path)\">\n                    <!-- 多张照片显示 -->\n                    <el-image \n                      v-for=\"(path, index) in parsePhotoPath(scope.row.photo_path)\" \n                      :key=\"index\"\n                      :src=\"`${apiConfig.baseURL}${path}`\"\n                      :preview-src-list=\"parsePhotoPath(scope.row.photo_path).map(p => `${apiConfig.baseURL}${p}`)\"\n                      fit=\"cover\"\n                      class=\"record-image\"\n                      :style=\"{ margin: index > 0 ? '2px 0 0 0' : '0' }\"\n                    >\n                      <template #error>\n                        <div class=\"image-error\">\n                          <el-icon><picture-failed /></el-icon>\n                        </div>\n                      </template>\n                    </el-image>\n                    <div v-if=\"parsePhotoPath(scope.row.photo_path).length > 1\" class=\"photo-count\">\n                      {{ parsePhotoPath(scope.row.photo_path).length }}张\n                    </div>\n                  </template>\n                  <template v-else>\n                    <!-- 单张照片显示 (兼容旧版本) -->\n                    <el-image \n                      :src=\"`${apiConfig.baseURL}${scope.row.photo_path}`\"\n                      :preview-src-list=\"[`${apiConfig.baseURL}${scope.row.photo_path}`]\"\n                      fit=\"cover\"\n                      class=\"record-image\"\n                    >\n                      <template #error>\n                        <div class=\"image-error\">\n                          <el-icon><picture-failed /></el-icon>\n                        </div>\n                      </template>\n                    </el-image>\n                  </template>\n                </div>\n                <span v-else>无照片</span>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"操作\" width=\"180\">\n              <template #default=\"scope\">\n                <el-button \n                  type=\"primary\" \n                  size=\"small\" \n                  @click=\"editRecord(scope.row.id)\"\n                  text\n                  v-if=\"canEdit(scope.row)\"\n                >\n                  编辑\n                </el-button>\n                <el-button \n                  type=\"danger\" \n                  size=\"small\" \n                  @click=\"confirmDelete(scope.row)\"\n                  text\n                  v-if=\"canEdit(scope.row)\"\n                >\n                  删除\n                </el-button>\n              </template>\n            </el-table-column>\n          </el-table>\n          \n          <div class=\"empty-block\" v-if=\"records.length === 0 && !loading\">\n            <el-empty description=\"暂无废物记录\" />\n          </div>\n        </el-card>\n      </div>\n    </div>\n\n    <div class=\"footer\">\n      <p>&copy; 2025 危险废物管理系统</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed, reactive, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\nimport { ArrowLeft, Home, Refresh, PictureFailed, Plus, User, ArrowDown, ArrowUp } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\n\n// 判断是否为JSON格式的照片路径\nconst isJsonPhotoPath = (path) => {\n  try {\n    const parsed = JSON.parse(path);\n    return Array.isArray(parsed);\n  } catch (error) {\n    return false;\n  }\n};\n\n// 解析JSON格式的照片路径\nconst parsePhotoPath = (path) => {\n  try {\n    return JSON.parse(path);\n  } catch (error) {\n    return [path];\n  }\n};\n\nexport default {\n  name: 'RecordsList',\n  components: {\n    ArrowLeft,\n    Home,\n    Refresh,\n    PictureFailed,\n    Plus,\n    User,\n    ArrowDown,\n    ArrowUp\n  },\n  props: {\n    unitId: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  setup(props) {\n    const router = useRouter();\n    const records = ref([]);\n    const loading = ref(false);\n    const unitName = ref('');\n    const wasteTypes = ref([]);\n    const showFilterPanel = ref(false);\n    \n    // 筛选表单\n    const filterForm = reactive({\n      dateRange: null,\n      wasteTypeId: null,\n      minQuantity: null,\n      maxQuantity: null,\n      location: ''\n    });\n    \n    // 过滤后的记录\n    const filteredRecords = computed(() => {\n      return records.value.filter(record => {\n        // 检查废物类型\n        if (filterForm.wasteTypeId && record.waste_type_id !== filterForm.wasteTypeId) {\n          return false;\n        }\n        \n        // 检查数量范围\n        if (filterForm.minQuantity !== null && parseFloat(record.quantity) < filterForm.minQuantity) {\n          return false;\n        }\n        if (filterForm.maxQuantity !== null && parseFloat(record.quantity) > filterForm.maxQuantity) {\n          return false;\n        }\n        \n        // 检查地点关键词\n        if (filterForm.location && !record.location.toLowerCase().includes(filterForm.location.toLowerCase())) {\n          return false;\n        }\n        \n        // 检查日期范围\n        if (filterForm.dateRange && filterForm.dateRange.length === 2) {\n          const startDate = new Date(filterForm.dateRange[0]);\n          // 将结束日期设置为当天的23:59:59，以包含整天\n          const endDate = new Date(filterForm.dateRange[1]);\n          endDate.setHours(23, 59, 59, 999);\n          \n          // 解析记录中的收集开始时间\n          if (record.collection_start_time) {\n            // 处理已格式化的日期时间字符串\n            const recordDate = parseFormattedDateTime(record.collection_start_time);\n            if (recordDate < startDate || recordDate > endDate) {\n              return false;\n            }\n          } else {\n            // 如果记录没有收集时间，并且筛选设置了日期范围，则排除该记录\n            return false;\n          }\n        }\n        \n        return true;\n      });\n    });\n    \n    // 解析已格式化的日期时间字符串\n    const parseFormattedDateTime = (formattedDateTime) => {\n      // 假设格式是 \"2025-03-01 14:30:00\"\n      // 移除所有非数字和连字符、冒号的字符\n      const cleanedStr = formattedDateTime.replace(/[^0-9\\-: ]/g, '');\n      return new Date(cleanedStr);\n    };\n    \n    // 检查用户是否为超级管理员\n    const isAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n    \n    // 检查用户是否为单位管理员\n    const isUnitAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 2;\n    });\n\n    onMounted(async () => {\n      await fetchUnitName();\n      await fetchWasteTypes();\n      await fetchRecords();\n    });\n\n    // 获取废物类型列表\n    const fetchWasteTypes = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\n        wasteTypes.value = response.data;\n      } catch (error) {\n        console.error('Error fetching waste types:', error);\n        ElMessage.error('获取废物类型列表失败');\n      }\n    };\n    \n    const fetchUnitName = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        const unit = response.data.find(u => u.id === parseInt(props.unitId));\n        if (unit) {\n          unitName.value = unit.name;\n        }\n      } catch (error) {\n        console.error('Error fetching unit name:', error);\n        ElMessage.error('获取单位信息失败');\n      }\n    };\n\n    const fetchRecords = async () => {\n      loading.value = true;\n      try {\n        // 使用用户ID获取相应权限的记录\n        const response = await httpService.get(`${apiConfig.endpoints.wasteRecords}/user/${auth.state.user.id}`);\n        records.value = response.data;\n        \n        // 格式化日期\n        records.value.forEach(record => {\n          record.created_at = formatDateTime(record.created_at);\n          record.collection_start_time = formatDateTime(record.collection_start_time);\n        });\n      } catch (error) {\n        console.error('获取废物记录失败:', error);\n        ElMessage.error('获取废物记录失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    const formatDateTime = (dateTimeStr) => {\n      if (!dateTimeStr) return '';\n      const date = new Date(dateTimeStr);\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false\n      });\n    };\n\n    const refreshRecords = () => {\n      fetchRecords();\n    };\n\n    const goBack = () => {\n      router.push({ name: 'WasteForm', params: { id: props.unitId } });\n    };\n\n    // 返回首页\n    const goHome = () => {\n      // 只有超级管理员才能回到单位选择页面\n      if (isAdmin.value) {\n        router.push('/');\n      }\n    };\n\n    // 前往人员管理页面\n    const goToUserManagement = () => {\n      router.push('/user-management');\n    };\n\n    // 添加新的废物记录\n    const addNewRecord = () => {\n      router.push('/record/new');\n    };\n\n    // 编辑现有记录\n    const editRecord = (recordId) => {\n      router.push(`/record/${recordId}`);\n    };\n\n    // 检查是否可以编辑记录\n    // 超级管理员可以编辑所有记录\n    // 单位管理员可以编辑本单位所有记录\n    // 普通员工只能编辑自己创建的记录\n    const canEdit = (record) => {\n      if (!auth.state.isLoggedIn) return false;\n\n      if (auth.state.user.role_id === 3) return true; // 超级管理员\n      \n      if (auth.state.user.role_id === 2 && auth.state.user.unit_id === record.unit_id) return true; // 单位管理员\n      \n      // 员工只能编辑自己创建的记录\n      // 注意: creator_id 可能为 null （旧记录），如果为 null 我们允许编辑\n      return auth.state.user.unit_id === record.unit_id && \n             (record.creator_id === null || record.creator_id === auth.state.user.id);\n    };\n\n    // 确认删除记录\n    // 应用筛选\n    const applyFilter = () => {\n      // 筛选已在 computed 属性中处理\n      ElMessage.success('筛选已应用');\n    };\n    \n    // 重置筛选\n    const resetFilter = () => {\n      filterForm.dateRange = null;\n      filterForm.wasteTypeId = null;\n      filterForm.minQuantity = null;\n      filterForm.maxQuantity = null;\n      filterForm.location = '';\n      ElMessage.info('筛选条件已重置');\n    };\n    \n    const confirmDelete = (record) => {\n      ElMessageBox.confirm(\n        '此操作将永久删除该记录，是否继续？',\n        '警告',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning',\n        }\n      )\n        .then(async () => {\n          try {\n            await httpService.delete(`${apiConfig.endpoints.wasteRecords}/${record.id}`);\n            ElMessage.success('删除成功');\n            await fetchRecords();\n          } catch (error) {\n            console.error('删除记录失败:', error);\n            ElMessage.error('删除记录失败');\n          }\n        })\n        .catch(() => {\n          ElMessage.info('已取消删除');\n        });\n    };\n\n    return {\n      records,\n      filteredRecords,\n      loading,\n      unitName,\n      wasteTypes,\n      isAdmin,\n      isUnitAdmin,\n      isJsonPhotoPath,\n      parsePhotoPath,\n      refreshRecords,\n      goBack,\n      goHome,\n      goToUserManagement,\n      addNewRecord,\n      editRecord,\n      canEdit,\n      confirmDelete,\n      apiConfig,\n      // 筛选相关\n      showFilterPanel,\n      filterForm,\n      applyFilter,\n      resetFilter\n    };\n  }\n};\n</script>\n\n<style scoped>\n.records-container {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.header {\n  background-color: #409EFF;\n  color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.back-button, .home-link {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  font-size: 14px;\n}\n\n.content {\n  flex: 1;\n  padding: 30px;\n  max-width: 1200px;\n  margin: 0 auto;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.unit-info {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.unit-info h2 {\n  color: #333;\n  border-bottom: 2px solid #409EFF;\n  display: inline-block;\n  padding-bottom: 5px;\n}\n\n.records-wrapper {\n  margin-top: 20px;\n}\n\n.records-card {\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.card-header h3 {\n  margin: 0;\n  color: #333;\n}\n\n.record-image {\n  width: 50px;\n  height: 50px;\n  border-radius: 4px;\n  cursor: pointer;\n  display: block;\n}\n\n.photo-count {\n  font-size: 12px;\n  color: #409EFF;\n  text-align: center;\n  margin-top: 2px;\n}\n\n.image-error {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 50px;\n  height: 50px;\n  background-color: #f5f7fa;\n  color: #909399;\n}\n\n.empty-block {\n  margin: 20px 0;\n}\n\n.filter-card {\n  margin-bottom: 20px;\n}\n\n.filter-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.filter-header h3 {\n  margin: 0;\n  color: #333;\n}\n\n.filter-form-container {\n  transition: all 0.3s ease;\n}\n\n.quantity-range {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.range-separator {\n  margin: 0 5px;\n}\n\n.filter-actions {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n  gap: 10px;\n}\n\n.footer {\n  background-color: #f5f5f5;\n  padding: 15px;\n  text-align: center;\n  color: #666;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}