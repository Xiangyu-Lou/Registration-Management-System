{"ast":null,"code":"/**\r\n * 图片处理工具函数\r\n */\n\n/**\r\n * 将图片转换为JPEG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\nexport const convertAndCompressImage = (file, quality = 0.8, onProgress) => {\n  return new Promise((resolve, reject) => {\n    // 创建文件读取器\n    const reader = new FileReader();\n\n    // 读取文件内容\n    reader.onload = e => {\n      // 创建图片对象\n      const img = new Image();\n\n      // 图片加载完成后进行处理\n      img.onload = () => {\n        // 创建canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // 设置canvas尺寸为图片原始尺寸\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // 在canvas上绘制图片\n        ctx.drawImage(img, 0, 0);\n\n        // 更新进度到50%\n        if (onProgress) {\n          onProgress(50);\n        }\n\n        // 将canvas内容转换为JPEG格式的Blob\n        canvas.toBlob(blob => {\n          // 更新进度到100%\n          if (onProgress) {\n            onProgress(100);\n          }\n\n          // 创建新的File对象\n          const newFile = new File([blob], file.name.replace(/\\.[^/.]+$/, '.jpg'), {\n            type: 'image/jpeg',\n            lastModified: new Date().getTime()\n          });\n\n          // 检查压缩效果\n          const originalSize = file.size;\n          const compressedSize = newFile.size;\n          console.log(`原始大小: ${(originalSize / 1024 / 1024).toFixed(2)}MB`);\n          console.log(`压缩后大小: ${(compressedSize / 1024 / 1024).toFixed(2)}MB`);\n          console.log(`压缩率: ${((1 - compressedSize / originalSize) * 100).toFixed(1)}%`);\n          resolve(newFile);\n        }, 'image/jpeg', quality);\n      };\n\n      // 处理图片加载错误\n      img.onerror = () => {\n        reject(new Error('图片加载失败'));\n      };\n\n      // 设置图片源\n      img.src = e.target.result;\n    };\n\n    // 处理文件读取错误\n    reader.onerror = () => {\n      reject(new Error('文件读取失败'));\n    };\n\n    // 开始读取文件\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\r\n * 批量处理图片文件\r\n * @param {File[]} files - 图片文件数组\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\nexport const batchProcessImages = async (files, quality = 0.8, onProgress) => {\n  const totalFiles = files.length;\n  const processedFiles = [];\n  for (let i = 0; i < totalFiles; i++) {\n    const file = files[i];\n    const fileProgress = progress => {\n      if (onProgress) {\n        // 计算总体进度\n        const totalProgress = (i * 100 + progress) / totalFiles;\n        onProgress(totalProgress);\n      }\n    };\n    try {\n      const processedFile = await convertAndCompressImage(file, quality, fileProgress);\n      processedFiles.push(processedFile);\n    } catch (error) {\n      console.error(`处理文件 ${file.name} 失败:`, error);\n      throw error;\n    }\n  }\n  return processedFiles;\n};","map":{"version":3,"names":["convertAndCompressImage","file","quality","onProgress","Promise","resolve","reject","reader","FileReader","onload","e","img","Image","canvas","document","createElement","ctx","getContext","width","height","drawImage","toBlob","blob","newFile","File","name","replace","type","lastModified","Date","getTime","originalSize","size","compressedSize","console","log","toFixed","onerror","Error","src","target","result","readAsDataURL","batchProcessImages","files","totalFiles","length","processedFiles","i","fileProgress","progress","totalProgress","processedFile","push","error"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\r\n * 图片处理工具函数\r\n */\r\n\r\n/**\r\n * 将图片转换为JPEG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\r\nexport const convertAndCompressImage = (file, quality = 0.8, onProgress) => {\r\n  return new Promise((resolve, reject) => {\r\n    // 创建文件读取器\r\n    const reader = new FileReader();\r\n    \r\n    // 读取文件内容\r\n    reader.onload = (e) => {\r\n      // 创建图片对象\r\n      const img = new Image();\r\n      \r\n      // 图片加载完成后进行处理\r\n      img.onload = () => {\r\n        // 创建canvas\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // 设置canvas尺寸为图片原始尺寸\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        \r\n        // 在canvas上绘制图片\r\n        ctx.drawImage(img, 0, 0);\r\n        \r\n        // 更新进度到50%\r\n        if (onProgress) {\r\n          onProgress(50);\r\n        }\r\n        \r\n        // 将canvas内容转换为JPEG格式的Blob\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            // 更新进度到100%\r\n            if (onProgress) {\r\n              onProgress(100);\r\n            }\r\n            \r\n            // 创建新的File对象\r\n            const newFile = new File([blob], file.name.replace(/\\.[^/.]+$/, '.jpg'), {\r\n              type: 'image/jpeg',\r\n              lastModified: new Date().getTime()\r\n            });\r\n            \r\n            // 检查压缩效果\r\n            const originalSize = file.size;\r\n            const compressedSize = newFile.size;\r\n            console.log(`原始大小: ${(originalSize / 1024 / 1024).toFixed(2)}MB`);\r\n            console.log(`压缩后大小: ${(compressedSize / 1024 / 1024).toFixed(2)}MB`);\r\n            console.log(`压缩率: ${((1 - compressedSize / originalSize) * 100).toFixed(1)}%`);\r\n            \r\n            resolve(newFile);\r\n          },\r\n          'image/jpeg',\r\n          quality\r\n        );\r\n      };\r\n      \r\n      // 处理图片加载错误\r\n      img.onerror = () => {\r\n        reject(new Error('图片加载失败'));\r\n      };\r\n      \r\n      // 设置图片源\r\n      img.src = e.target.result;\r\n    };\r\n    \r\n    // 处理文件读取错误\r\n    reader.onerror = () => {\r\n      reject(new Error('文件读取失败'));\r\n    };\r\n    \r\n    // 开始读取文件\r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * 批量处理图片文件\r\n * @param {File[]} files - 图片文件数组\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @param {Function} onProgress - 进度回调函数\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\r\nexport const batchProcessImages = async (files, quality = 0.8, onProgress) => {\r\n  const totalFiles = files.length;\r\n  const processedFiles = [];\r\n  \r\n  for (let i = 0; i < totalFiles; i++) {\r\n    const file = files[i];\r\n    const fileProgress = (progress) => {\r\n      if (onProgress) {\r\n        // 计算总体进度\r\n        const totalProgress = ((i * 100 + progress) / totalFiles);\r\n        onProgress(totalProgress);\r\n      }\r\n    };\r\n    \r\n    try {\r\n      const processedFile = await convertAndCompressImage(file, quality, fileProgress);\r\n      processedFiles.push(processedFile);\r\n    } catch (error) {\r\n      console.error(`处理文件 ${file.name} 失败:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  return processedFiles;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}