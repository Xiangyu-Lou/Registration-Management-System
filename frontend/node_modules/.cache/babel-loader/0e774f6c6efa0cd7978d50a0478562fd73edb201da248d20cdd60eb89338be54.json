{"ast":null,"code":"import { ref, reactive, onMounted, computed, onBeforeUnmount } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport httpService from '../config/httpService';\nimport apiConfig from '../config/api';\nimport { ArrowLeft, Document, Plus, Clock } from '@element-plus/icons-vue';\nimport auth from '../store/auth';\nimport Compressor from 'compressorjs';\nexport default {\n  name: 'WasteForm',\n  components: {\n    ArrowLeft,\n    Document,\n    Plus,\n    Clock\n  },\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  setup(props) {\n    const router = useRouter();\n    const wasteForm = ref(null);\n    const loading = ref(false);\n    const unitName = ref('');\n    const wasteTypes = ref([]);\n    const photoFilesBefore = ref([]);\n    const photoFilesAfter = ref([]);\n    const fileListBefore = ref([]);\n    const fileListAfter = ref([]);\n    const showUploadProgress = ref(false);\n    const uploadPercentage = ref(0);\n    const uploadStatus = ref('准备上传...');\n    const showLargeFileWarning = ref(false);\n\n    // 检查用户是否为超级管理员\n    const isAdmin = computed(() => {\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\n    });\n\n    // 初始化表单，将日期和时间分开\n    const form = reactive({\n      wasteTypeId: '',\n      location: '',\n      collectionDate: new Date().toISOString().slice(0, 10),\n      // 默认为当天\n      collectionTime: '08:00',\n      quantity: undefined,\n      photo_before: [],\n      photo_after: []\n    });\n    const rules = {\n      wasteTypeId: [{\n        required: true,\n        message: '请选择废物类型',\n        trigger: 'change'\n      }],\n      location: [{\n        required: true,\n        message: '请输入废物产生地点',\n        trigger: 'blur'\n      }],\n      collectionDate: [{\n        required: false\n      }],\n      collectionTime: [{\n        required: false\n      }],\n      quantity: [{\n        required: true,\n        message: '请输入收集数量',\n        trigger: 'change'\n      }]\n    };\n    onMounted(async () => {\n      // 设置viewport meta标签\n      const viewportMeta = document.createElement('meta');\n      viewportMeta.setAttribute('name', 'viewport');\n      viewportMeta.setAttribute('content', 'width=device-width,initial-scale=1.0,user-scalable=no,maximum-scale=1');\n      document.head.appendChild(viewportMeta);\n\n      // 保存原始的viewport meta标签（如果存在）\n      const originalViewport = document.querySelector('meta[name=\"viewport\"]');\n      if (originalViewport && originalViewport !== viewportMeta) {\n        originalViewport.remove();\n      }\n      await fetchUnitName();\n      await fetchWasteTypes();\n    });\n    onBeforeUnmount(() => {\n      // 移除我们添加的viewport meta标签\n      const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n      if (viewportMeta) {\n        viewportMeta.remove();\n      }\n\n      // 恢复原始的viewport设置\n      const originalViewport = document.createElement('meta');\n      originalViewport.setAttribute('name', 'viewport');\n      originalViewport.setAttribute('content', 'width=device-width,initial-scale=1.0');\n      document.head.appendChild(originalViewport);\n    });\n    const fetchUnitName = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.units);\n        const unit = response.data.find(u => u.id === parseInt(props.id));\n        if (unit) {\n          unitName.value = unit.name;\n        }\n      } catch (error) {\n        console.error('Error fetching unit name:', error);\n        ElMessage.error('获取单位信息失败');\n      }\n    };\n    const fetchWasteTypes = async () => {\n      try {\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\n        wasteTypes.value = response.data;\n      } catch (error) {\n        console.error('Error fetching waste types:', error);\n        ElMessage.error('获取废物类型失败');\n      }\n    };\n\n    // 处理上传前的文件处理\n    const handleBeforeUpload = file => {\n      // 检查文件类型是否为图片\n      const acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\n      const isImage = acceptedTypes.includes(file.type);\n      if (!isImage) {\n        ElMessage.error('只能上传图片文件!');\n        return false;\n      }\n\n      // 检查文件大小（50MB = 50 * 1024 * 1024 bytes）\n      const maxSize = 50 * 1024 * 1024;\n      if (file.size > maxSize) {\n        ElMessage.error('图片大小不能超过50MB!');\n        return false;\n      }\n\n      // 返回一个Promise\n      return new Promise(resolve => {\n        // 显示处理进度提示\n        showUploadProgress.value = true;\n        uploadStatus.value = '正在处理图片...';\n        uploadPercentage.value = 0;\n        console.log('开始处理图片:', file.name, '类型:', file.type, '大小:', (file.size / 1024).toFixed(2), 'KB');\n\n        // 使用Compressor直接处理图片\n        new Compressor(file, {\n          quality: 0.6,\n          // 中等压缩 (0-1)\n          maxWidth: 1920,\n          // 最大宽度\n          maxHeight: 1920,\n          // 最大高度\n          mimeType: 'image/jpeg',\n          // 强制转换为JPEG\n          convertSize: 0,\n          // 所有图片都转换格式\n          // 报告进度\n          beforeDraw() {\n            uploadPercentage.value = 30;\n            uploadStatus.value = '正在处理图片...';\n            console.log('图片处理中...');\n          },\n          // 报告进度\n          drew() {\n            uploadPercentage.value = 60;\n            uploadStatus.value = '正在压缩图片...';\n            console.log('图片绘制完成');\n          },\n          success(result) {\n            // 创建新的文件名（确保扩展名为.jpg）\n            const fileName = file.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\n\n            // 创建新的File对象\n            const processedFile = new File([result], fileName, {\n              type: 'image/jpeg',\n              lastModified: new Date().getTime()\n            });\n\n            // 输出处理结果日志\n            console.log('图片处理完成:');\n            console.log('- 原始大小:', (file.size / 1024).toFixed(2), 'KB');\n            console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\n            console.log('- 压缩率:', Math.round((1 - processedFile.size / file.size) * 100), '%');\n            console.log('- 处理后文件类型:', processedFile.type);\n            console.log('- 处理后文件名:', processedFile.name);\n\n            // 处理完成\n            uploadStatus.value = '图片处理完成';\n            uploadPercentage.value = 100;\n\n            // 延迟关闭进度条\n            setTimeout(() => {\n              showUploadProgress.value = false;\n            }, 500);\n\n            // 解析Promise，返回处理后的文件\n            resolve(processedFile);\n          },\n          error(err) {\n            console.error('图片压缩失败:', err);\n            // 如果处理失败，返回原始文件\n            uploadStatus.value = '处理失败，使用原始图片';\n            uploadPercentage.value = 100;\n\n            // 延迟关闭进度条\n            setTimeout(() => {\n              showUploadProgress.value = false;\n            }, 500);\n            resolve(file);\n          }\n        });\n      });\n    };\n\n    // 处理收集前照片变更\n    const handlePhotoBeforeChange = async (file, fileList) => {\n      // 更新文件列表（暂时）\n      console.log('收集前照片变更:', file);\n\n      // 如果文件已经处理过，直接返回\n      if (file.processed) {\n        console.log('文件已处理过，跳过压缩:', file.name);\n        fileListBefore.value = fileList;\n        return;\n      }\n\n      // 如果是新上传的文件，需要先处理\n      if (file.raw && file.status === 'ready') {\n        // 显示处理进度提示\n        showUploadProgress.value = true;\n        uploadStatus.value = '正在处理图片...';\n        uploadPercentage.value = 0;\n        console.log('开始处理收集前照片:', file.name, '类型:', file.raw.type, '大小:', (file.raw.size / 1024).toFixed(2), 'KB');\n        try {\n          // 使用Compressor直接处理图片\n          const processedFile = await new Promise(resolve => {\n            new Compressor(file.raw, {\n              quality: 0.6,\n              // 中等压缩 (0-1)\n              maxWidth: 1920,\n              // 最大宽度\n              maxHeight: 1920,\n              // 最大高度\n              mimeType: 'image/jpeg',\n              // 强制转换为JPEG\n              convertSize: 0,\n              // 所有图片都转换格式\n              // 报告进度\n              beforeDraw() {\n                uploadPercentage.value = 30;\n                uploadStatus.value = '正在处理图片...';\n                console.log('图片处理中...');\n              },\n              // 报告进度\n              drew() {\n                uploadPercentage.value = 60;\n                uploadStatus.value = '正在压缩图片...';\n                console.log('图片绘制完成');\n              },\n              success(result) {\n                // 创建新的文件名（确保扩展名为.jpg）\n                const fileName = file.raw.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\n\n                // 创建新的File对象\n                const processedFile = new File([result], fileName, {\n                  type: 'image/jpeg',\n                  lastModified: new Date().getTime()\n                });\n\n                // 输出处理结果日志\n                console.log('图片处理完成:');\n                console.log('- 原始大小:', (file.raw.size / 1024).toFixed(2), 'KB');\n                console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\n                console.log('- 压缩率:', Math.round((1 - processedFile.size / file.raw.size) * 100), '%');\n                console.log('- 处理后文件类型:', processedFile.type);\n                console.log('- 处理后文件名:', processedFile.name);\n\n                // 处理完成\n                uploadStatus.value = '图片处理完成';\n                uploadPercentage.value = 100;\n                resolve(processedFile);\n              },\n              error(err) {\n                console.error('图片压缩失败:', err);\n                // 如果处理失败，返回原始文件\n                uploadStatus.value = '处理失败，使用原始图片';\n                uploadPercentage.value = 100;\n                resolve(file.raw);\n              }\n            });\n          });\n\n          // 替换原始文件\n          console.log('替换原始文件为处理后的文件:', processedFile.name);\n\n          // 标记文件为已处理\n          file.processed = true;\n          file.raw = processedFile;\n\n          // 将处理后的文件添加到photoFilesBefore\n          const existingIndex = photoFilesBefore.value.findIndex(f => f.uid === file.uid || f.name === file.name);\n          if (existingIndex >= 0) {\n            // 替换现有文件\n            photoFilesBefore.value[existingIndex] = processedFile;\n          } else {\n            // 添加新文件\n            photoFilesBefore.value.push(processedFile);\n          }\n\n          // 延迟关闭进度条\n          setTimeout(() => {\n            showUploadProgress.value = false;\n          }, 500);\n        } catch (error) {\n          console.error('处理图片时出错:', error);\n          ElMessage.warning('图片处理失败，将使用原始图片');\n\n          // 添加原始文件\n          const existingIndex = photoFilesBefore.value.findIndex(f => f.uid === file.uid || f.name === file.name);\n          if (existingIndex >= 0) {\n            // 替换现有文件\n            photoFilesBefore.value[existingIndex] = file.raw;\n          } else {\n            // 添加新文件\n            photoFilesBefore.value.push(file.raw);\n          }\n          showUploadProgress.value = false;\n        }\n      } else if (!file.raw && file.url) {\n        // 如果是已有的文件（有URL），不需要处理\n        console.log('已有文件，不需要处理:', file.name);\n      }\n\n      // 更新文件列表\n      fileListBefore.value = fileList;\n\n      // 检查是否有大文件需要显示警告\n      const allFiles = [...photoFilesBefore.value, ...photoFilesAfter.value];\n      showLargeFileWarning.value = checkForLargeFiles(allFiles);\n      console.log('更新后的photoFilesBefore:', photoFilesBefore.value);\n    };\n\n    // 处理收集前照片移除\n    const handlePhotoBeforeRemove = (file, fileList) => {\n      console.log('收集前照片移除:', file);\n      fileListBefore.value = fileList;\n\n      // 从photoFilesBefore中移除被删除的文件\n      if (file.raw) {\n        photoFilesBefore.value = photoFilesBefore.value.filter(f => f.name !== file.raw.name);\n      } else {\n        // 如果没有raw属性，可能是已经处理过的文件，使用uid或name来匹配\n        photoFilesBefore.value = photoFilesBefore.value.filter(f => f.uid !== file.uid && f.name !== file.name);\n      }\n\n      // 如果没有大文件了，隐藏警告\n      if (!checkForLargeFiles([...photoFilesBefore.value, ...photoFilesAfter.value])) {\n        showLargeFileWarning.value = false;\n      }\n      console.log('更新后的photoFilesBefore:', photoFilesBefore.value);\n    };\n\n    // 处理收集后照片变更\n    const handlePhotoAfterChange = async (file, fileList) => {\n      // 更新文件列表（暂时）\n      console.log('收集后照片变更:', file);\n\n      // 如果文件已经处理过，直接返回\n      if (file.processed) {\n        console.log('文件已处理过，跳过压缩:', file.name);\n        fileListAfter.value = fileList;\n        return;\n      }\n\n      // 如果是新上传的文件，需要先处理\n      if (file.raw && file.status === 'ready') {\n        // 显示处理进度提示\n        showUploadProgress.value = true;\n        uploadStatus.value = '正在处理图片...';\n        uploadPercentage.value = 0;\n        console.log('开始处理收集后照片:', file.name, '类型:', file.raw.type, '大小:', (file.raw.size / 1024).toFixed(2), 'KB');\n        try {\n          // 使用Compressor直接处理图片\n          const processedFile = await new Promise(resolve => {\n            new Compressor(file.raw, {\n              quality: 0.6,\n              // 中等压缩 (0-1)\n              maxWidth: 1920,\n              // 最大宽度\n              maxHeight: 1920,\n              // 最大高度\n              mimeType: 'image/jpeg',\n              // 强制转换为JPEG\n              convertSize: 0,\n              // 所有图片都转换格式\n              // 报告进度\n              beforeDraw() {\n                uploadPercentage.value = 30;\n                uploadStatus.value = '正在处理图片...';\n                console.log('图片处理中...');\n              },\n              // 报告进度\n              drew() {\n                uploadPercentage.value = 60;\n                uploadStatus.value = '正在压缩图片...';\n                console.log('图片绘制完成');\n              },\n              success(result) {\n                // 创建新的文件名（确保扩展名为.jpg）\n                const fileName = file.raw.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\n\n                // 创建新的File对象\n                const processedFile = new File([result], fileName, {\n                  type: 'image/jpeg',\n                  lastModified: new Date().getTime()\n                });\n\n                // 输出处理结果日志\n                console.log('图片处理完成:');\n                console.log('- 原始大小:', (file.raw.size / 1024).toFixed(2), 'KB');\n                console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\n                console.log('- 压缩率:', Math.round((1 - processedFile.size / file.raw.size) * 100), '%');\n                console.log('- 处理后文件类型:', processedFile.type);\n                console.log('- 处理后文件名:', processedFile.name);\n\n                // 处理完成\n                uploadStatus.value = '图片处理完成';\n                uploadPercentage.value = 100;\n                resolve(processedFile);\n              },\n              error(err) {\n                console.error('图片压缩失败:', err);\n                // 如果处理失败，返回原始文件\n                uploadStatus.value = '处理失败，使用原始图片';\n                uploadPercentage.value = 100;\n                resolve(file.raw);\n              }\n            });\n          });\n\n          // 替换原始文件\n          console.log('替换原始文件为处理后的文件:', processedFile.name);\n\n          // 标记文件为已处理\n          file.processed = true;\n          file.raw = processedFile;\n\n          // 将处理后的文件添加到photoFilesAfter\n          const existingIndex = photoFilesAfter.value.findIndex(f => f.uid === file.uid || f.name === file.name);\n          if (existingIndex >= 0) {\n            // 替换现有文件\n            photoFilesAfter.value[existingIndex] = processedFile;\n          } else {\n            // 添加新文件\n            photoFilesAfter.value.push(processedFile);\n          }\n\n          // 延迟关闭进度条\n          setTimeout(() => {\n            showUploadProgress.value = false;\n          }, 500);\n        } catch (error) {\n          console.error('处理图片时出错:', error);\n          ElMessage.warning('图片处理失败，将使用原始图片');\n\n          // 添加原始文件\n          const existingIndex = photoFilesAfter.value.findIndex(f => f.uid === file.uid || f.name === file.name);\n          if (existingIndex >= 0) {\n            // 替换现有文件\n            photoFilesAfter.value[existingIndex] = file.raw;\n          } else {\n            // 添加新文件\n            photoFilesAfter.value.push(file.raw);\n          }\n          showUploadProgress.value = false;\n        }\n      } else if (!file.raw && file.url) {\n        // 如果是已有的文件（有URL），不需要处理\n        console.log('已有文件，不需要处理:', file.name);\n      }\n\n      // 更新文件列表\n      fileListAfter.value = fileList;\n\n      // 检查是否有大文件需要显示警告\n      const allFiles = [...photoFilesBefore.value, ...photoFilesAfter.value];\n      showLargeFileWarning.value = checkForLargeFiles(allFiles);\n      console.log('更新后的photoFilesAfter:', photoFilesAfter.value);\n    };\n\n    // 处理收集后照片移除\n    const handlePhotoAfterRemove = (file, fileList) => {\n      console.log('收集后照片移除:', file);\n      fileListAfter.value = fileList;\n\n      // 从photoFilesAfter中移除被删除的文件\n      if (file.raw) {\n        photoFilesAfter.value = photoFilesAfter.value.filter(f => f.name !== file.raw.name);\n      } else {\n        // 如果没有raw属性，可能是已经处理过的文件，使用uid或name来匹配\n        photoFilesAfter.value = photoFilesAfter.value.filter(f => f.uid !== file.uid && f.name !== file.name);\n      }\n\n      // 如果没有大文件了，隐藏警告\n      if (!checkForLargeFiles([...photoFilesBefore.value, ...photoFilesAfter.value])) {\n        showLargeFileWarning.value = false;\n      }\n      console.log('更新后的photoFilesAfter:', photoFilesAfter.value);\n    };\n\n    // 检查是否有大文件\n    const checkForLargeFiles = files => {\n      const largeFileThreshold = 5 * 1024 * 1024; // 5MB\n      return files.some(file => file.size > largeFileThreshold);\n    };\n\n    // 处理上传进度\n    const handleUploadProgress = progressEvent => {\n      if (progressEvent.total) {\n        const percentage = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        uploadPercentage.value = percentage;\n        if (percentage < 33) {\n          uploadStatus.value = '正在上传文件...';\n        } else if (percentage < 66) {\n          uploadStatus.value = '正在处理文件...';\n        } else if (percentage < 100) {\n          uploadStatus.value = '即将完成...';\n        } else {\n          uploadStatus.value = '上传完成，正在保存...';\n        }\n      }\n    };\n\n    // 格式化百分比显示\n    const percentageFormat = percentage => {\n      return percentage === 100 ? '完成' : `${percentage}%`;\n    };\n    const submitForm = () => {\n      wasteForm.value.validate(async valid => {\n        if (valid) {\n          loading.value = true;\n          try {\n            const formData = new FormData();\n            formData.append('unitId', props.id);\n            formData.append('wasteTypeId', form.wasteTypeId);\n            formData.append('location', form.location);\n\n            // 组合日期和时间，如果有的话\n            if (form.collectionDate && form.collectionTime) {\n              formData.append('collectionDate', form.collectionDate);\n              formData.append('collectionTime', form.collectionTime);\n            }\n            formData.append('quantity', form.quantity);\n\n            // 添加创建者ID（如果用户已登录）\n            if (auth.state.isLoggedIn && auth.state.user) {\n              formData.append('creator_id', auth.state.user.id);\n              // 添加创建者名称，优先使用username，如果没有则使用phone\n              const creatorName = auth.state.user.username || auth.state.user.phone || '未知';\n              formData.append('creator_name', creatorName);\n              console.log('添加用户信息:', {\n                creator_id: auth.state.user.id,\n                creator_name: creatorName,\n                user: auth.state.user\n              });\n            } else {\n              console.log('用户未登录或用户信息不完整');\n            }\n            console.log('提交表单数据:', {\n              unitId: props.id,\n              wasteTypeId: form.wasteTypeId,\n              location: form.location,\n              quantity: form.quantity,\n              photo_before: photoFilesBefore.value ? photoFilesBefore.value.length : 0,\n              photo_after: photoFilesAfter.value ? photoFilesAfter.value.length : 0\n            });\n\n            // 添加收集前照片\n            if (photoFilesBefore.value && photoFilesBefore.value.length > 0) {\n              console.log('添加收集前照片数量:', photoFilesBefore.value.length);\n              photoFilesBefore.value.forEach((file, index) => {\n                if (file) {\n                  console.log(`收集前照片 ${index + 1}:`, file.name);\n                  formData.append('photo_before', file);\n                }\n              });\n            }\n\n            // 添加收集后照片\n            if (photoFilesAfter.value && photoFilesAfter.value.length > 0) {\n              console.log('添加收集后照片数量:', photoFilesAfter.value.length);\n              photoFilesAfter.value.forEach((file, index) => {\n                if (file) {\n                  console.log(`收集后照片 ${index + 1}:`, file.name);\n                  formData.append('photo_after', file);\n                }\n              });\n            }\n\n            // 检查是否有大文件需要显示警告\n            const allFiles = [...(photoFilesBefore.value || []), ...(photoFilesAfter.value || [])];\n            showLargeFileWarning.value = checkForLargeFiles(allFiles);\n\n            // 如果有文件要上传，显示进度条\n            if (allFiles.length > 0) {\n              showUploadProgress.value = true;\n              uploadPercentage.value = 0;\n              uploadStatus.value = '准备上传...';\n            }\n            const response = await httpService.postForm(apiConfig.endpoints.wasteRecords, formData, handleUploadProgress);\n            console.log('提交响应:', response.data);\n            ElMessage.success('废物记录提交成功');\n            resetForm();\n          } catch (error) {\n            console.error('Error submitting form:', error);\n            if (error.response) {\n              console.error('错误响应数据:', error.response.data);\n              console.error('错误状态码:', error.response.status);\n            }\n            ElMessage.error('提交失败，请稍后再试');\n          } finally {\n            loading.value = false;\n            showUploadProgress.value = false;\n          }\n        } else {\n          ElMessage.warning('请完成必填项');\n        }\n      });\n    };\n    const resetForm = () => {\n      if (wasteForm.value) {\n        wasteForm.value.resetFields();\n      }\n      photoFilesBefore.value = [];\n      photoFilesAfter.value = [];\n      fileListBefore.value = [];\n      fileListAfter.value = [];\n      form.quantity = undefined;\n      form.collectionDate = new Date().toISOString().slice(0, 10); // 重置为今天\n      form.collectionTime = '08:00'; // 重置为默认时间\n    };\n    const goBack = () => {\n      // 只有超级管理员才能返回到单位选择页面\n      if (isAdmin.value) {\n        router.push('/');\n      }\n    };\n    const viewRecords = () => {\n      router.push({\n        name: 'RecordsList',\n        params: {\n          unitId: props.id\n        }\n      });\n    };\n    const selectAllText = event => {\n      // 使用setTimeout确保DOM已完全渲染\n      setTimeout(() => {\n        if (event && event.target) {\n          // 找到el-input-number内部的input元素\n          const inputEl = event.target.querySelector('input');\n          if (inputEl) {\n            inputEl.select();\n          }\n        }\n      }, 10);\n    };\n    return {\n      form,\n      rules,\n      wasteForm,\n      loading,\n      unitName,\n      wasteTypes,\n      isAdmin,\n      fileListBefore,\n      fileListAfter,\n      handlePhotoBeforeChange,\n      handlePhotoBeforeRemove,\n      handlePhotoAfterChange,\n      handlePhotoAfterRemove,\n      handleBeforeUpload,\n      submitForm,\n      resetForm,\n      goBack,\n      viewRecords,\n      selectAllText,\n      showUploadProgress,\n      uploadPercentage,\n      uploadStatus,\n      percentageFormat,\n      showLargeFileWarning\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","onBeforeUnmount","useRouter","ElMessage","httpService","apiConfig","ArrowLeft","Document","Plus","Clock","auth","Compressor","name","components","props","id","type","String","Number","required","setup","router","wasteForm","loading","unitName","wasteTypes","photoFilesBefore","photoFilesAfter","fileListBefore","fileListAfter","showUploadProgress","uploadPercentage","uploadStatus","showLargeFileWarning","isAdmin","state","isLoggedIn","user","role_id","form","wasteTypeId","location","collectionDate","Date","toISOString","slice","collectionTime","quantity","undefined","photo_before","photo_after","rules","message","trigger","viewportMeta","document","createElement","setAttribute","head","appendChild","originalViewport","querySelector","remove","fetchUnitName","fetchWasteTypes","response","get","endpoints","units","unit","data","find","u","parseInt","value","error","console","handleBeforeUpload","file","acceptedTypes","isImage","includes","maxSize","size","Promise","resolve","log","toFixed","quality","maxWidth","maxHeight","mimeType","convertSize","beforeDraw","drew","success","result","fileName","replace","processedFile","File","lastModified","getTime","Math","round","setTimeout","err","handlePhotoBeforeChange","fileList","processed","raw","status","existingIndex","findIndex","f","uid","push","warning","url","allFiles","checkForLargeFiles","handlePhotoBeforeRemove","filter","handlePhotoAfterChange","handlePhotoAfterRemove","files","largeFileThreshold","some","handleUploadProgress","progressEvent","total","percentage","loaded","percentageFormat","submitForm","validate","valid","formData","FormData","append","creatorName","username","phone","creator_id","creator_name","unitId","length","forEach","index","postForm","wasteRecords","resetForm","resetFields","goBack","viewRecords","params","selectAllText","event","target","inputEl","select"],"sources":["F:\\Project\\Hazardous-waste-management-system\\frontend\\src\\views\\WasteForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"waste-form-container\">\r\n    <div class=\"header\">\r\n      <div class=\"back-button\" @click=\"goBack\" v-if=\"isAdmin\">\r\n        <el-icon><arrow-left /></el-icon> 返回\r\n      </div>\r\n      <div v-else></div>\r\n      <h1>危险废物填报</h1>\r\n      <div class=\"view-records\" @click=\"viewRecords\">\r\n        查看记录 <el-icon><document /></el-icon>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"content\">\r\n      <div class=\"unit-info\">\r\n        <h2>{{ unitName }}</h2>\r\n      </div>\r\n\r\n      <el-form \r\n        ref=\"wasteForm\" \r\n        :model=\"form\" \r\n        :rules=\"rules\" \r\n        label-position=\"top\"\r\n        class=\"waste-form\"\r\n      >\r\n        <el-form-item label=\"废物类型\" prop=\"wasteTypeId\">\r\n          <el-select v-model=\"form.wasteTypeId\" placeholder=\"请选择废物类型\" style=\"width: 100%\">\r\n            <el-option \r\n              v-for=\"type in wasteTypes\" \r\n              :key=\"type.id\" \r\n              :label=\"type.name\" \r\n              :value=\"type.id\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"产生地点\" prop=\"location\">\r\n          <el-input v-model=\"form.location\" placeholder=\"请输入废物产生地点\" />\r\n        </el-form-item>\r\n\r\n        <div class=\"form-row\">\r\n          <el-form-item label=\"收集日期\" class=\"date-item\">\r\n            <el-date-picker\r\n              v-model=\"form.collectionDate\"\r\n              type=\"date\"\r\n              placeholder=\"选择日期\"\r\n              format=\"YYYY-MM-DD\"\r\n              value-format=\"YYYY-MM-DD\"\r\n              style=\"width: 100%\"\r\n              :editable=\"false\"\r\n              popper-class=\"date-picker-popup\"\r\n              :teleported=\"false\"\r\n            />\r\n          </el-form-item>\r\n\r\n          <el-form-item label=\"收集时间\" class=\"time-item\">\r\n            <el-time-picker\r\n              v-model=\"form.collectionTime\"\r\n              format=\"HH:mm\"\r\n              placeholder=\"选择时间\"\r\n              value-format=\"HH:mm\"\r\n              style=\"width: 100%\"\r\n              :editable=\"false\"\r\n              popper-class=\"time-picker-popup\"\r\n              :teleported=\"false\"\r\n            >\r\n              <template #prefix>\r\n                <el-icon><clock /></el-icon>\r\n              </template>\r\n            </el-time-picker>\r\n          </el-form-item>\r\n        </div>\r\n\r\n        <el-form-item label=\"收集数量(吨)\" prop=\"quantity\">\r\n          <el-input-number\r\n            v-model=\"form.quantity\"\r\n            :min=\"0\"\r\n            :precision=\"3\"\r\n            :step=\"0.001\"\r\n            style=\"width: 100%\"\r\n            @focus=\"selectAllText($event)\"\r\n            :input-props=\"{\r\n              inputmode: 'decimal',\r\n              pattern: '[0-9]*[.,]?[0-9]*'\r\n            }\"\r\n            :controls=\"false\"\r\n          />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"现场照片（收集前）\" prop=\"photo_before\">\r\n          <div class=\"photo-tip\">请上传废物收集前的现场照片（最多5张）</div>\r\n          <div class=\"upload-warning\" v-if=\"showLargeFileWarning\">\r\n            <el-alert\r\n              title=\"上传大文件可能会导致处理时间较长，请耐心等待\"\r\n              type=\"warning\"\r\n              :closable=\"false\"\r\n              show-icon\r\n            />\r\n          </div>\r\n          <el-upload\r\n            class=\"waste-photo-uploader\"\r\n            action=\"#\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handlePhotoBeforeChange\"\r\n            :on-remove=\"handlePhotoBeforeRemove\"\r\n            :file-list=\"fileListBefore\"\r\n            :limit=\"5\"\r\n            multiple\r\n            list-type=\"picture-card\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            accept=\"image/jpeg,image/jpg,image/png,image/gif,image/bmp,image/webp,.jpeg,.jpg,.png,.gif,.bmp,.webp\"\r\n          >\r\n            <el-icon><plus /></el-icon>\r\n          </el-upload>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"现场照片（收集后）\" prop=\"photo_after\">\r\n          <div class=\"photo-tip\">请上传废物收集后的现场照片（最多5张）</div>\r\n          <el-upload\r\n            class=\"waste-photo-uploader\"\r\n            action=\"#\"\r\n            :auto-upload=\"false\"\r\n            :on-change=\"handlePhotoAfterChange\"\r\n            :on-remove=\"handlePhotoAfterRemove\"\r\n            :file-list=\"fileListAfter\"\r\n            :limit=\"5\"\r\n            multiple\r\n            list-type=\"picture-card\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            accept=\"image/jpeg,image/jpg,image/png,image/gif,image/bmp,image/webp,.jpeg,.jpg,.png,.gif,.bmp,.webp\"\r\n          >\r\n            <el-icon><plus /></el-icon>\r\n          </el-upload>\r\n        </el-form-item>\r\n\r\n        <div class=\"form-actions\">\r\n          <el-button type=\"primary\" class=\"submit-btn\" @click=\"submitForm\" :loading=\"loading\">提交</el-button>\r\n          <el-button class=\"reset-btn\" @click=\"resetForm\">重置</el-button>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n\r\n    <!-- 上传进度条对话框 -->\r\n    <el-dialog\r\n      v-model=\"showUploadProgress\"\r\n      title=\"正在上传文件\"\r\n      width=\"30%\"\r\n      :close-on-click-modal=\"false\"\r\n      :close-on-press-escape=\"false\"\r\n      :show-close=\"false\"\r\n    >\r\n      <div class=\"upload-progress\">\r\n        <p>正在上传文件，请勿关闭页面...</p>\r\n        <el-progress \r\n          :percentage=\"uploadPercentage\" \r\n          :format=\"percentageFormat\"\r\n          :status=\"uploadPercentage === 100 ? 'success' : ''\"\r\n        ></el-progress>\r\n        <p class=\"upload-status\">{{ uploadStatus }}</p>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <div class=\"footer\">\r\n      <p>&copy; 2025 危险废物管理系统</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted, computed, onBeforeUnmount } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { ElMessage } from 'element-plus';\r\nimport httpService from '../config/httpService';\r\nimport apiConfig from '../config/api';\r\nimport { ArrowLeft, Document, Plus, Clock } from '@element-plus/icons-vue';\r\nimport auth from '../store/auth';\r\nimport Compressor from 'compressorjs';\r\n\r\nexport default {\r\n  name: 'WasteForm',\r\n  components: {\r\n    ArrowLeft,\r\n    Document,\r\n    Plus,\r\n    Clock\r\n  },\r\n  props: {\r\n    id: {\r\n      type: [String, Number],\r\n      required: true\r\n    }\r\n  },\r\n  setup(props) {\r\n    const router = useRouter();\r\n    const wasteForm = ref(null);\r\n    const loading = ref(false);\r\n    const unitName = ref('');\r\n    const wasteTypes = ref([]);\r\n    const photoFilesBefore = ref([]);\r\n    const photoFilesAfter = ref([]);\r\n    const fileListBefore = ref([]);\r\n    const fileListAfter = ref([]);\r\n    const showUploadProgress = ref(false);\r\n    const uploadPercentage = ref(0);\r\n    const uploadStatus = ref('准备上传...');\r\n    const showLargeFileWarning = ref(false);\r\n    \r\n    // 检查用户是否为超级管理员\r\n    const isAdmin = computed(() => {\r\n      return auth.state.isLoggedIn && auth.state.user.role_id === 3;\r\n    });\r\n\r\n    // 初始化表单，将日期和时间分开\r\n    const form = reactive({\r\n      wasteTypeId: '',\r\n      location: '',\r\n      collectionDate: new Date().toISOString().slice(0, 10), // 默认为当天\r\n      collectionTime: '08:00',\r\n      quantity: undefined,\r\n      photo_before: [],\r\n      photo_after: []\r\n    });\r\n\r\n    const rules = {\r\n      wasteTypeId: [\r\n        { required: true, message: '请选择废物类型', trigger: 'change' }\r\n      ],\r\n      location: [\r\n        { required: true, message: '请输入废物产生地点', trigger: 'blur' }\r\n      ],\r\n      collectionDate: [\r\n        { required: false }\r\n      ],\r\n      collectionTime: [\r\n        { required: false }\r\n      ],\r\n      quantity: [\r\n        { required: true, message: '请输入收集数量', trigger: 'change' }\r\n      ]\r\n    };\r\n\r\n    onMounted(async () => {\r\n      // 设置viewport meta标签\r\n      const viewportMeta = document.createElement('meta');\r\n      viewportMeta.setAttribute('name', 'viewport');\r\n      viewportMeta.setAttribute('content', 'width=device-width,initial-scale=1.0,user-scalable=no,maximum-scale=1');\r\n      document.head.appendChild(viewportMeta);\r\n\r\n      // 保存原始的viewport meta标签（如果存在）\r\n      const originalViewport = document.querySelector('meta[name=\"viewport\"]');\r\n      if (originalViewport && originalViewport !== viewportMeta) {\r\n        originalViewport.remove();\r\n      }\r\n\r\n      await fetchUnitName();\r\n      await fetchWasteTypes();\r\n    });\r\n\r\n    onBeforeUnmount(() => {\r\n      // 移除我们添加的viewport meta标签\r\n      const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\r\n      if (viewportMeta) {\r\n        viewportMeta.remove();\r\n      }\r\n\r\n      // 恢复原始的viewport设置\r\n      const originalViewport = document.createElement('meta');\r\n      originalViewport.setAttribute('name', 'viewport');\r\n      originalViewport.setAttribute('content', 'width=device-width,initial-scale=1.0');\r\n      document.head.appendChild(originalViewport);\r\n    });\r\n\r\n    const fetchUnitName = async () => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.units);\r\n        const unit = response.data.find(u => u.id === parseInt(props.id));\r\n        if (unit) {\r\n          unitName.value = unit.name;\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching unit name:', error);\r\n        ElMessage.error('获取单位信息失败');\r\n      }\r\n    };\r\n\r\n    const fetchWasteTypes = async () => {\r\n      try {\r\n        const response = await httpService.get(apiConfig.endpoints.wasteTypes);\r\n        wasteTypes.value = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching waste types:', error);\r\n        ElMessage.error('获取废物类型失败');\r\n      }\r\n    };\r\n\r\n    // 处理上传前的文件处理\r\n    const handleBeforeUpload = (file) => {\r\n      // 检查文件类型是否为图片\r\n      const acceptedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'];\r\n      const isImage = acceptedTypes.includes(file.type);\r\n      \r\n      if (!isImage) {\r\n        ElMessage.error('只能上传图片文件!');\r\n        return false;\r\n      }\r\n\r\n      // 检查文件大小（50MB = 50 * 1024 * 1024 bytes）\r\n      const maxSize = 50 * 1024 * 1024;\r\n      if (file.size > maxSize) {\r\n        ElMessage.error('图片大小不能超过50MB!');\r\n        return false;\r\n      }\r\n      \r\n      // 返回一个Promise\r\n      return new Promise((resolve) => {\r\n        // 显示处理进度提示\r\n        showUploadProgress.value = true;\r\n        uploadStatus.value = '正在处理图片...';\r\n        uploadPercentage.value = 0;\r\n        \r\n        console.log('开始处理图片:', file.name, '类型:', file.type, '大小:', (file.size / 1024).toFixed(2), 'KB');\r\n        \r\n        // 使用Compressor直接处理图片\r\n        new Compressor(file, {\r\n          quality: 0.6,           // 中等压缩 (0-1)\r\n          maxWidth: 1920,         // 最大宽度\r\n          maxHeight: 1920,        // 最大高度\r\n          mimeType: 'image/jpeg', // 强制转换为JPEG\r\n          convertSize: 0,         // 所有图片都转换格式\r\n          // 报告进度\r\n          beforeDraw() {\r\n            uploadPercentage.value = 30;\r\n            uploadStatus.value = '正在处理图片...';\r\n            console.log('图片处理中...');\r\n          },\r\n          // 报告进度\r\n          drew() {\r\n            uploadPercentage.value = 60;\r\n            uploadStatus.value = '正在压缩图片...';\r\n            console.log('图片绘制完成');\r\n          },\r\n          success(result) {\r\n            // 创建新的文件名（确保扩展名为.jpg）\r\n            const fileName = file.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\r\n            \r\n            // 创建新的File对象\r\n            const processedFile = new File([result], fileName, {\r\n              type: 'image/jpeg',\r\n              lastModified: new Date().getTime()\r\n            });\r\n            \r\n            // 输出处理结果日志\r\n            console.log('图片处理完成:');\r\n            console.log('- 原始大小:', (file.size / 1024).toFixed(2), 'KB');\r\n            console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\r\n            console.log('- 压缩率:', Math.round((1 - processedFile.size / file.size) * 100), '%');\r\n            console.log('- 处理后文件类型:', processedFile.type);\r\n            console.log('- 处理后文件名:', processedFile.name);\r\n            \r\n            // 处理完成\r\n            uploadStatus.value = '图片处理完成';\r\n            uploadPercentage.value = 100;\r\n            \r\n            // 延迟关闭进度条\r\n            setTimeout(() => {\r\n              showUploadProgress.value = false;\r\n            }, 500);\r\n            \r\n            // 解析Promise，返回处理后的文件\r\n            resolve(processedFile);\r\n          },\r\n          error(err) {\r\n            console.error('图片压缩失败:', err);\r\n            // 如果处理失败，返回原始文件\r\n            uploadStatus.value = '处理失败，使用原始图片';\r\n            uploadPercentage.value = 100;\r\n            \r\n            // 延迟关闭进度条\r\n            setTimeout(() => {\r\n              showUploadProgress.value = false;\r\n            }, 500);\r\n            \r\n            resolve(file);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    // 处理收集前照片变更\r\n    const handlePhotoBeforeChange = async (file, fileList) => {\r\n      // 更新文件列表（暂时）\r\n      console.log('收集前照片变更:', file);\r\n      \r\n      // 如果文件已经处理过，直接返回\r\n      if (file.processed) {\r\n        console.log('文件已处理过，跳过压缩:', file.name);\r\n        fileListBefore.value = fileList;\r\n        return;\r\n      }\r\n      \r\n      // 如果是新上传的文件，需要先处理\r\n      if (file.raw && file.status === 'ready') {\r\n        // 显示处理进度提示\r\n        showUploadProgress.value = true;\r\n        uploadStatus.value = '正在处理图片...';\r\n        uploadPercentage.value = 0;\r\n        \r\n        console.log('开始处理收集前照片:', file.name, '类型:', file.raw.type, '大小:', (file.raw.size / 1024).toFixed(2), 'KB');\r\n        \r\n        try {\r\n          // 使用Compressor直接处理图片\r\n          const processedFile = await new Promise((resolve) => {\r\n            new Compressor(file.raw, {\r\n              quality: 0.6,           // 中等压缩 (0-1)\r\n              maxWidth: 1920,         // 最大宽度\r\n              maxHeight: 1920,        // 最大高度\r\n              mimeType: 'image/jpeg', // 强制转换为JPEG\r\n              convertSize: 0,         // 所有图片都转换格式\r\n              // 报告进度\r\n              beforeDraw() {\r\n                uploadPercentage.value = 30;\r\n                uploadStatus.value = '正在处理图片...';\r\n                console.log('图片处理中...');\r\n              },\r\n              // 报告进度\r\n              drew() {\r\n                uploadPercentage.value = 60;\r\n                uploadStatus.value = '正在压缩图片...';\r\n                console.log('图片绘制完成');\r\n              },\r\n              success(result) {\r\n                // 创建新的文件名（确保扩展名为.jpg）\r\n                const fileName = file.raw.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\r\n                \r\n                // 创建新的File对象\r\n                const processedFile = new File([result], fileName, {\r\n                  type: 'image/jpeg',\r\n                  lastModified: new Date().getTime()\r\n                });\r\n                \r\n                // 输出处理结果日志\r\n                console.log('图片处理完成:');\r\n                console.log('- 原始大小:', (file.raw.size / 1024).toFixed(2), 'KB');\r\n                console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\r\n                console.log('- 压缩率:', Math.round((1 - processedFile.size / file.raw.size) * 100), '%');\r\n                console.log('- 处理后文件类型:', processedFile.type);\r\n                console.log('- 处理后文件名:', processedFile.name);\r\n                \r\n                // 处理完成\r\n                uploadStatus.value = '图片处理完成';\r\n                uploadPercentage.value = 100;\r\n                \r\n                resolve(processedFile);\r\n              },\r\n              error(err) {\r\n                console.error('图片压缩失败:', err);\r\n                // 如果处理失败，返回原始文件\r\n                uploadStatus.value = '处理失败，使用原始图片';\r\n                uploadPercentage.value = 100;\r\n                \r\n                resolve(file.raw);\r\n              }\r\n            });\r\n          });\r\n          \r\n          // 替换原始文件\r\n          console.log('替换原始文件为处理后的文件:', processedFile.name);\r\n          \r\n          // 标记文件为已处理\r\n          file.processed = true;\r\n          file.raw = processedFile;\r\n          \r\n          // 将处理后的文件添加到photoFilesBefore\r\n          const existingIndex = photoFilesBefore.value.findIndex(f => f.uid === file.uid || f.name === file.name);\r\n          if (existingIndex >= 0) {\r\n            // 替换现有文件\r\n            photoFilesBefore.value[existingIndex] = processedFile;\r\n          } else {\r\n            // 添加新文件\r\n            photoFilesBefore.value.push(processedFile);\r\n          }\r\n          \r\n          // 延迟关闭进度条\r\n          setTimeout(() => {\r\n            showUploadProgress.value = false;\r\n          }, 500);\r\n          \r\n        } catch (error) {\r\n          console.error('处理图片时出错:', error);\r\n          ElMessage.warning('图片处理失败，将使用原始图片');\r\n          \r\n          // 添加原始文件\r\n          const existingIndex = photoFilesBefore.value.findIndex(f => f.uid === file.uid || f.name === file.name);\r\n          if (existingIndex >= 0) {\r\n            // 替换现有文件\r\n            photoFilesBefore.value[existingIndex] = file.raw;\r\n          } else {\r\n            // 添加新文件\r\n            photoFilesBefore.value.push(file.raw);\r\n          }\r\n          \r\n          showUploadProgress.value = false;\r\n        }\r\n      } else if (!file.raw && file.url) {\r\n        // 如果是已有的文件（有URL），不需要处理\r\n        console.log('已有文件，不需要处理:', file.name);\r\n      }\r\n      \r\n      // 更新文件列表\r\n      fileListBefore.value = fileList;\r\n      \r\n      // 检查是否有大文件需要显示警告\r\n      const allFiles = [...photoFilesBefore.value, ...photoFilesAfter.value];\r\n      showLargeFileWarning.value = checkForLargeFiles(allFiles);\r\n      \r\n      console.log('更新后的photoFilesBefore:', photoFilesBefore.value);\r\n    };\r\n\r\n    // 处理收集前照片移除\r\n    const handlePhotoBeforeRemove = (file, fileList) => {\r\n      console.log('收集前照片移除:', file);\r\n      fileListBefore.value = fileList;\r\n      \r\n      // 从photoFilesBefore中移除被删除的文件\r\n      if (file.raw) {\r\n        photoFilesBefore.value = photoFilesBefore.value.filter(f => \r\n          f.name !== file.raw.name\r\n        );\r\n      } else {\r\n        // 如果没有raw属性，可能是已经处理过的文件，使用uid或name来匹配\r\n        photoFilesBefore.value = photoFilesBefore.value.filter(f => \r\n          f.uid !== file.uid && f.name !== file.name\r\n        );\r\n      }\r\n      \r\n      // 如果没有大文件了，隐藏警告\r\n      if (!checkForLargeFiles([...photoFilesBefore.value, ...photoFilesAfter.value])) {\r\n        showLargeFileWarning.value = false;\r\n      }\r\n      \r\n      console.log('更新后的photoFilesBefore:', photoFilesBefore.value);\r\n    };\r\n\r\n    // 处理收集后照片变更\r\n    const handlePhotoAfterChange = async (file, fileList) => {\r\n      // 更新文件列表（暂时）\r\n      console.log('收集后照片变更:', file);\r\n      \r\n      // 如果文件已经处理过，直接返回\r\n      if (file.processed) {\r\n        console.log('文件已处理过，跳过压缩:', file.name);\r\n        fileListAfter.value = fileList;\r\n        return;\r\n      }\r\n      \r\n      // 如果是新上传的文件，需要先处理\r\n      if (file.raw && file.status === 'ready') {\r\n        // 显示处理进度提示\r\n        showUploadProgress.value = true;\r\n        uploadStatus.value = '正在处理图片...';\r\n        uploadPercentage.value = 0;\r\n        \r\n        console.log('开始处理收集后照片:', file.name, '类型:', file.raw.type, '大小:', (file.raw.size / 1024).toFixed(2), 'KB');\r\n        \r\n        try {\r\n          // 使用Compressor直接处理图片\r\n          const processedFile = await new Promise((resolve) => {\r\n            new Compressor(file.raw, {\r\n              quality: 0.6,           // 中等压缩 (0-1)\r\n              maxWidth: 1920,         // 最大宽度\r\n              maxHeight: 1920,        // 最大高度\r\n              mimeType: 'image/jpeg', // 强制转换为JPEG\r\n              convertSize: 0,         // 所有图片都转换格式\r\n              // 报告进度\r\n              beforeDraw() {\r\n                uploadPercentage.value = 30;\r\n                uploadStatus.value = '正在处理图片...';\r\n                console.log('图片处理中...');\r\n              },\r\n              // 报告进度\r\n              drew() {\r\n                uploadPercentage.value = 60;\r\n                uploadStatus.value = '正在压缩图片...';\r\n                console.log('图片绘制完成');\r\n              },\r\n              success(result) {\r\n                // 创建新的文件名（确保扩展名为.jpg）\r\n                const fileName = file.raw.name.replace(/\\.[^/.]+$/, \"\") + '.jpg';\r\n                \r\n                // 创建新的File对象\r\n                const processedFile = new File([result], fileName, {\r\n                  type: 'image/jpeg',\r\n                  lastModified: new Date().getTime()\r\n                });\r\n                \r\n                // 输出处理结果日志\r\n                console.log('图片处理完成:');\r\n                console.log('- 原始大小:', (file.raw.size / 1024).toFixed(2), 'KB');\r\n                console.log('- 处理后大小:', (processedFile.size / 1024).toFixed(2), 'KB');\r\n                console.log('- 压缩率:', Math.round((1 - processedFile.size / file.raw.size) * 100), '%');\r\n                console.log('- 处理后文件类型:', processedFile.type);\r\n                console.log('- 处理后文件名:', processedFile.name);\r\n                \r\n                // 处理完成\r\n                uploadStatus.value = '图片处理完成';\r\n                uploadPercentage.value = 100;\r\n                \r\n                resolve(processedFile);\r\n              },\r\n              error(err) {\r\n                console.error('图片压缩失败:', err);\r\n                // 如果处理失败，返回原始文件\r\n                uploadStatus.value = '处理失败，使用原始图片';\r\n                uploadPercentage.value = 100;\r\n                \r\n                resolve(file.raw);\r\n              }\r\n            });\r\n          });\r\n          \r\n          // 替换原始文件\r\n          console.log('替换原始文件为处理后的文件:', processedFile.name);\r\n          \r\n          // 标记文件为已处理\r\n          file.processed = true;\r\n          file.raw = processedFile;\r\n          \r\n          // 将处理后的文件添加到photoFilesAfter\r\n          const existingIndex = photoFilesAfter.value.findIndex(f => f.uid === file.uid || f.name === file.name);\r\n          if (existingIndex >= 0) {\r\n            // 替换现有文件\r\n            photoFilesAfter.value[existingIndex] = processedFile;\r\n          } else {\r\n            // 添加新文件\r\n            photoFilesAfter.value.push(processedFile);\r\n          }\r\n          \r\n          // 延迟关闭进度条\r\n          setTimeout(() => {\r\n            showUploadProgress.value = false;\r\n          }, 500);\r\n          \r\n        } catch (error) {\r\n          console.error('处理图片时出错:', error);\r\n          ElMessage.warning('图片处理失败，将使用原始图片');\r\n          \r\n          // 添加原始文件\r\n          const existingIndex = photoFilesAfter.value.findIndex(f => f.uid === file.uid || f.name === file.name);\r\n          if (existingIndex >= 0) {\r\n            // 替换现有文件\r\n            photoFilesAfter.value[existingIndex] = file.raw;\r\n          } else {\r\n            // 添加新文件\r\n            photoFilesAfter.value.push(file.raw);\r\n          }\r\n          \r\n          showUploadProgress.value = false;\r\n        }\r\n      } else if (!file.raw && file.url) {\r\n        // 如果是已有的文件（有URL），不需要处理\r\n        console.log('已有文件，不需要处理:', file.name);\r\n      }\r\n      \r\n      // 更新文件列表\r\n      fileListAfter.value = fileList;\r\n      \r\n      // 检查是否有大文件需要显示警告\r\n      const allFiles = [...photoFilesBefore.value, ...photoFilesAfter.value];\r\n      showLargeFileWarning.value = checkForLargeFiles(allFiles);\r\n      \r\n      console.log('更新后的photoFilesAfter:', photoFilesAfter.value);\r\n    };\r\n\r\n    // 处理收集后照片移除\r\n    const handlePhotoAfterRemove = (file, fileList) => {\r\n      console.log('收集后照片移除:', file);\r\n      fileListAfter.value = fileList;\r\n      \r\n      // 从photoFilesAfter中移除被删除的文件\r\n      if (file.raw) {\r\n        photoFilesAfter.value = photoFilesAfter.value.filter(f => \r\n          f.name !== file.raw.name\r\n        );\r\n      } else {\r\n        // 如果没有raw属性，可能是已经处理过的文件，使用uid或name来匹配\r\n        photoFilesAfter.value = photoFilesAfter.value.filter(f => \r\n          f.uid !== file.uid && f.name !== file.name\r\n        );\r\n      }\r\n      \r\n      // 如果没有大文件了，隐藏警告\r\n      if (!checkForLargeFiles([...photoFilesBefore.value, ...photoFilesAfter.value])) {\r\n        showLargeFileWarning.value = false;\r\n      }\r\n      \r\n      console.log('更新后的photoFilesAfter:', photoFilesAfter.value);\r\n    };\r\n\r\n    // 检查是否有大文件\r\n    const checkForLargeFiles = (files) => {\r\n      const largeFileThreshold = 5 * 1024 * 1024; // 5MB\r\n      return files.some(file => file.size > largeFileThreshold);\r\n    };\r\n\r\n    // 处理上传进度\r\n    const handleUploadProgress = (progressEvent) => {\r\n      if (progressEvent.total) {\r\n        const percentage = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n        uploadPercentage.value = percentage;\r\n        \r\n        if (percentage < 33) {\r\n          uploadStatus.value = '正在上传文件...';\r\n        } else if (percentage < 66) {\r\n          uploadStatus.value = '正在处理文件...';\r\n        } else if (percentage < 100) {\r\n          uploadStatus.value = '即将完成...';\r\n        } else {\r\n          uploadStatus.value = '上传完成，正在保存...';\r\n        }\r\n      }\r\n    };\r\n\r\n    // 格式化百分比显示\r\n    const percentageFormat = (percentage) => {\r\n      return percentage === 100 ? '完成' : `${percentage}%`;\r\n    };\r\n\r\n    const submitForm = () => {\r\n      wasteForm.value.validate(async (valid) => {\r\n        if (valid) {\r\n          loading.value = true;\r\n          try {\r\n            const formData = new FormData();\r\n            formData.append('unitId', props.id);\r\n            formData.append('wasteTypeId', form.wasteTypeId);\r\n            formData.append('location', form.location);\r\n            \r\n            // 组合日期和时间，如果有的话\r\n            if (form.collectionDate && form.collectionTime) {\r\n              formData.append('collectionDate', form.collectionDate);\r\n              formData.append('collectionTime', form.collectionTime);\r\n            }\r\n            formData.append('quantity', form.quantity);\r\n            \r\n            // 添加创建者ID（如果用户已登录）\r\n            if (auth.state.isLoggedIn && auth.state.user) {\r\n              formData.append('creator_id', auth.state.user.id);\r\n              // 添加创建者名称，优先使用username，如果没有则使用phone\r\n              const creatorName = auth.state.user.username || auth.state.user.phone || '未知';\r\n              formData.append('creator_name', creatorName);\r\n              console.log('添加用户信息:', {\r\n                creator_id: auth.state.user.id,\r\n                creator_name: creatorName,\r\n                user: auth.state.user\r\n              });\r\n            } else {\r\n              console.log('用户未登录或用户信息不完整');\r\n            }\r\n            \r\n            console.log('提交表单数据:', {\r\n              unitId: props.id,\r\n              wasteTypeId: form.wasteTypeId,\r\n              location: form.location,\r\n              quantity: form.quantity,\r\n              photo_before: photoFilesBefore.value ? photoFilesBefore.value.length : 0,\r\n              photo_after: photoFilesAfter.value ? photoFilesAfter.value.length : 0\r\n            });\r\n            \r\n            // 添加收集前照片\r\n            if (photoFilesBefore.value && photoFilesBefore.value.length > 0) {\r\n              console.log('添加收集前照片数量:', photoFilesBefore.value.length);\r\n              photoFilesBefore.value.forEach((file, index) => {\r\n                if (file) {\r\n                  console.log(`收集前照片 ${index+1}:`, file.name);\r\n                  formData.append('photo_before', file);\r\n                }\r\n              });\r\n            }\r\n            \r\n            // 添加收集后照片\r\n            if (photoFilesAfter.value && photoFilesAfter.value.length > 0) {\r\n              console.log('添加收集后照片数量:', photoFilesAfter.value.length);\r\n              photoFilesAfter.value.forEach((file, index) => {\r\n                if (file) {\r\n                  console.log(`收集后照片 ${index+1}:`, file.name);\r\n                  formData.append('photo_after', file);\r\n                }\r\n              });\r\n            }\r\n\r\n            // 检查是否有大文件需要显示警告\r\n            const allFiles = [...(photoFilesBefore.value || []), ...(photoFilesAfter.value || [])];\r\n            showLargeFileWarning.value = checkForLargeFiles(allFiles);\r\n            \r\n            // 如果有文件要上传，显示进度条\r\n            if (allFiles.length > 0) {\r\n              showUploadProgress.value = true;\r\n              uploadPercentage.value = 0;\r\n              uploadStatus.value = '准备上传...';\r\n            }\r\n\r\n            const response = await httpService.postForm(\r\n              apiConfig.endpoints.wasteRecords, \r\n              formData,\r\n              handleUploadProgress\r\n            );\r\n            \r\n            console.log('提交响应:', response.data);\r\n\r\n            ElMessage.success('废物记录提交成功');\r\n            resetForm();\r\n          } catch (error) {\r\n            console.error('Error submitting form:', error);\r\n            if (error.response) {\r\n              console.error('错误响应数据:', error.response.data);\r\n              console.error('错误状态码:', error.response.status);\r\n            }\r\n            ElMessage.error('提交失败，请稍后再试');\r\n          } finally {\r\n            loading.value = false;\r\n            showUploadProgress.value = false;\r\n          }\r\n        } else {\r\n          ElMessage.warning('请完成必填项');\r\n        }\r\n      });\r\n    };\r\n\r\n    const resetForm = () => {\r\n      if (wasteForm.value) {\r\n        wasteForm.value.resetFields();\r\n      }\r\n      photoFilesBefore.value = [];\r\n      photoFilesAfter.value = [];\r\n      fileListBefore.value = [];\r\n      fileListAfter.value = [];\r\n      form.quantity = undefined;\r\n      form.collectionDate = new Date().toISOString().slice(0, 10); // 重置为今天\r\n      form.collectionTime = '08:00'; // 重置为默认时间\r\n    };\r\n\r\n    const goBack = () => {\r\n      // 只有超级管理员才能返回到单位选择页面\r\n      if (isAdmin.value) {\r\n        router.push('/');\r\n      }\r\n    };\r\n\r\n    const viewRecords = () => {\r\n      router.push({ name: 'RecordsList', params: { unitId: props.id } });\r\n    };\r\n\r\n    const selectAllText = (event) => {\r\n      // 使用setTimeout确保DOM已完全渲染\r\n      setTimeout(() => {\r\n        if (event && event.target) {\r\n          // 找到el-input-number内部的input元素\r\n          const inputEl = event.target.querySelector('input');\r\n          if (inputEl) {\r\n            inputEl.select();\r\n          }\r\n        }\r\n      }, 10);\r\n    };\r\n\r\n    return {\r\n      form,\r\n      rules,\r\n      wasteForm,\r\n      loading,\r\n      unitName,\r\n      wasteTypes,\r\n      isAdmin,\r\n      fileListBefore,\r\n      fileListAfter,\r\n      handlePhotoBeforeChange,\r\n      handlePhotoBeforeRemove,\r\n      handlePhotoAfterChange,\r\n      handlePhotoAfterRemove,\r\n      handleBeforeUpload,\r\n      submitForm,\r\n      resetForm,\r\n      goBack,\r\n      viewRecords,\r\n      selectAllText,\r\n      showUploadProgress,\r\n      uploadPercentage,\r\n      uploadStatus,\r\n      percentageFormat,\r\n      showLargeFileWarning\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.waste-form-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 100vh;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.header {\r\n  background-color: #409EFF;\r\n  color: white;\r\n  padding: 12px 16px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 10;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.header h1 {\r\n  font-size: 18px;\r\n  margin: 0;\r\n  font-weight: 500;\r\n}\r\n\r\n.back-button, .view-records {\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n}\r\n\r\n.content {\r\n  flex: 1;\r\n  padding: 16px;\r\n  max-width: 100%;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.unit-info {\r\n  text-align: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.unit-info h2 {\r\n  color: #333;\r\n  border-bottom: 2px solid #409EFF;\r\n  display: inline-block;\r\n  padding-bottom: 5px;\r\n  font-size: 18px;\r\n  margin: 0;\r\n}\r\n\r\n.waste-form {\r\n  background-color: #ffffff;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-row {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .form-row {\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .date-item, .time-item {\r\n    flex: 1;\r\n  }\r\n  \r\n  .content {\r\n    padding: 24px;\r\n    max-width: 800px;\r\n  }\r\n  \r\n  .header h1 {\r\n    font-size: 22px;\r\n  }\r\n}\r\n\r\n.waste-photo-uploader {\r\n  width: 100%;\r\n}\r\n\r\n.waste-photo-uploader :deep(.el-upload--picture-card) {\r\n  width: 80px;\r\n  height: 80px;\r\n  line-height: 80px;\r\n}\r\n\r\n.waste-photo-uploader :deep(.el-upload-list--picture-card .el-upload-list__item) {\r\n  width: 80px;\r\n  height: 80px;\r\n}\r\n\r\n.photo-tip, .time-tip {\r\n  font-size: 12px;\r\n  color: #666;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 12px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.submit-btn, .reset-btn {\r\n  width: 45%;\r\n  height: 44px;\r\n  font-size: 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .form-actions {\r\n    justify-content: flex-start;\r\n  }\r\n  \r\n  .submit-btn, .reset-btn {\r\n    width: auto;\r\n  }\r\n}\r\n\r\n.footer {\r\n  background-color: #f5f5f5;\r\n  padding: 12px;\r\n  text-align: center;\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n:deep(.el-form-item__label) {\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  color: #333;\r\n  padding-bottom: 4px;\r\n}\r\n\r\n:deep(.el-input__inner), \r\n:deep(.el-select__input), \r\n:deep(.el-input-number__decrease), \r\n:deep(.el-input-number__increase) {\r\n  height: 44px;\r\n  font-size: 15px;\r\n}\r\n\r\n:deep(.el-button) {\r\n  font-size: 15px;\r\n  padding: 12px 20px;\r\n}\r\n\r\n:deep(.el-select-dropdown__item) {\r\n  font-size: 15px;\r\n  padding: 12px 20px;\r\n}\r\n\r\n:deep(.el-date-editor.el-input), \r\n:deep(.el-date-editor.el-input__inner) {\r\n  width: 100%;\r\n}\r\n\r\n:deep(.el-form-item) {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n:deep(.date-picker-popup),\r\n:deep(.time-picker-popup) {\r\n  touch-action: none;\r\n}\r\n\r\n:deep(.el-input__wrapper) {\r\n  cursor: pointer;\r\n}\r\n\r\n:deep(.el-input__inner) {\r\n  -webkit-tap-highlight-color: transparent;\r\n  user-select: none;\r\n}\r\n\r\n.upload-warning {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.upload-progress {\r\n  text-align: center;\r\n  padding: 10px;\r\n}\r\n\r\n.upload-status {\r\n  margin-top: 10px;\r\n  color: #606266;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}