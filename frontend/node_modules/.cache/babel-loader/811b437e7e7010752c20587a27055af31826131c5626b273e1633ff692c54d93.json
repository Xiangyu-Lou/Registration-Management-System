{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\n/**\r\n * 将数据导出为CSV文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    return;\n  }\n\n  // 如果有图片数据，使用XLSX导出\n  if (imageData) {\n    exportToXLSX(data, fileName, headers, imageData);\n    return;\n  }\n\n  // 否则使用CSV导出\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  fileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', fileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};\n\n/**\r\n * 将数据导出为带图片的Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据，格式为 {rowIndex: {colIndex: {base64: 'base64字符串', width: number, height: number}}}\r\n */\nconst exportToXLSX = (data, fileName, headers, imageData) => {\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  fileName = `${fileName}_${timestamp}.xlsx`;\n\n  // 创建工作簿\n  const wb = XLSX.utils.book_new();\n\n  // 创建工作表数据\n  const wsData = [headers.map(h => h.title),\n  // 表头行\n  ...data.map(item => headers.map(header => item[header.field])) // 数据行\n  ];\n\n  // 创建工作表\n  const ws = XLSX.utils.aoa_to_sheet(wsData);\n\n  // 设置列宽\n  const colWidths = headers.map(() => ({\n    wch: 15\n  })); // 默认列宽\n  ws['!cols'] = colWidths;\n\n  // 添加图片\n  if (imageData) {\n    ws['!images'] = [];\n    for (const rowIndex in imageData) {\n      for (const colIndex in imageData[rowIndex]) {\n        const imgData = imageData[rowIndex][colIndex];\n        if (imgData && imgData.base64) {\n          // 添加图片到工作表\n          const imgId = wb.SheetNames.length;\n          const imgPos = {\n            s: {\n              r: parseInt(rowIndex) + 1,\n              c: parseInt(colIndex)\n            },\n            // +1 因为第一行是表头\n            e: {\n              r: parseInt(rowIndex) + 3,\n              c: parseInt(colIndex) + 1\n            }\n          };\n          ws['!images'].push({\n            name: `image${imgId}`,\n            data: imgData.base64.split(',')[1],\n            // 移除 data:image/jpeg;base64, 前缀\n            opts: {\n              base64: true,\n              position: imgPos\n            }\n          });\n        }\n      }\n    }\n  }\n\n  // 将工作表添加到工作簿\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n  // 导出Excel文件\n  const wbout = XLSX.write(wb, {\n    bookType: 'xlsx',\n    type: 'array'\n  });\n  const blob = new Blob([wbout], {\n    type: 'application/octet-stream'\n  });\n  saveAs(blob, fileName);\n};\n\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\nconst imageUrlToBase64 = async url => {\n  try {\n    const response = await fetch(url);\n    const blob = await response.blob();\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.error('转换图片到Base64失败:', error);\n    return null;\n  }\n};\n\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @param {Function} parsePhotoPath 解析照片路径的函数\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\n  // 准备导出数据\n  const dataToExport = [];\n  const imageData = {};\n\n  // 处理每条记录\n  for (let i = 0; i < records.length; i++) {\n    const record = records[i];\n\n    // 基本数据\n    const exportItem = {\n      '单位': record.unit_name,\n      '废物类型': record.waste_type_name,\n      '收集地点': record.location,\n      '收集时间': record.collection_start_time,\n      '数量(kg)': record.quantity,\n      '记录时间': record.created_at,\n      '汇报人': record.creator_name || '未知',\n      '清理前照片': '见图片',\n      '清理后照片': '见图片'\n    };\n    dataToExport.push(exportItem);\n\n    // 处理清理前照片\n    const beforePhotos = parsePhotoPath(record.photo_path_before);\n    if (beforePhotos && beforePhotos.length > 0) {\n      const photoUrl = beforePhotos[0].startsWith('http') ? beforePhotos[0] : `${baseUrl}${beforePhotos[0]}`;\n      try {\n        const base64Data = await imageUrlToBase64(photoUrl);\n        if (base64Data) {\n          if (!imageData[i]) imageData[i] = {};\n          imageData[i][7] = {\n            base64: base64Data,\n            width: 150,\n            height: 100\n          };\n        }\n      } catch (error) {\n        console.error('处理清理前照片失败:', error);\n      }\n    }\n\n    // 处理清理后照片\n    const afterPhotos = parsePhotoPath(record.photo_path_after);\n    if (afterPhotos && afterPhotos.length > 0) {\n      const photoUrl = afterPhotos[0].startsWith('http') ? afterPhotos[0] : `${baseUrl}${afterPhotos[0]}`;\n      try {\n        const base64Data = await imageUrlToBase64(photoUrl);\n        if (base64Data) {\n          if (!imageData[i]) imageData[i] = {};\n          imageData[i][8] = {\n            base64: base64Data,\n            width: 150,\n            height: 100\n          };\n        }\n      } catch (error) {\n        console.error('处理清理后照片失败:', error);\n      }\n    }\n  }\n  return {\n    dataToExport,\n    imageData\n  };\n};","map":{"version":3,"names":["XLSX","saveAs","exportToExcel","data","fileName","headers","imageData","length","exportToXLSX","replace","timestamp","Date","toISOString","substring","csvContent","headerRow","map","h","title","join","forEach","item","row","header","value","field","undefined","type","cellValue","String","includes","blob","Blob","url","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","revokeObjectURL","wb","utils","book_new","wsData","ws","aoa_to_sheet","colWidths","wch","rowIndex","colIndex","imgData","base64","imgId","SheetNames","imgPos","s","r","parseInt","c","e","push","name","split","opts","position","book_append_sheet","wbout","write","bookType","imageUrlToBase64","response","fetch","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","error","console","prepareImageExportData","records","baseUrl","parsePhotoPath","dataToExport","i","record","exportItem","unit_name","waste_type_name","location","collection_start_time","quantity","created_at","creator_name","beforePhotos","photo_path_before","photoUrl","startsWith","base64Data","width","height","afterPhotos","photo_path_after"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\n\r\n/**\r\n * 将数据导出为CSV文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // 如果有图片数据，使用XLSX导出\r\n  if (imageData) {\r\n    exportToXLSX(data, fileName, headers, imageData);\r\n    return;\r\n  }\r\n\r\n  // 否则使用CSV导出\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  fileName = `${fileName}_${timestamp}.csv`;\r\n\r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n\r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n\r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n\r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', fileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n/**\r\n * 将数据导出为带图片的Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据，格式为 {rowIndex: {colIndex: {base64: 'base64字符串', width: number, height: number}}}\r\n */\r\nconst exportToXLSX = (data, fileName, headers, imageData) => {\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  fileName = `${fileName}_${timestamp}.xlsx`;\r\n\r\n  // 创建工作簿\r\n  const wb = XLSX.utils.book_new();\r\n  \r\n  // 创建工作表数据\r\n  const wsData = [\r\n    headers.map(h => h.title), // 表头行\r\n    ...data.map(item => headers.map(header => item[header.field])) // 数据行\r\n  ];\r\n  \r\n  // 创建工作表\r\n  const ws = XLSX.utils.aoa_to_sheet(wsData);\r\n  \r\n  // 设置列宽\r\n  const colWidths = headers.map(() => ({ wch: 15 })); // 默认列宽\r\n  ws['!cols'] = colWidths;\r\n  \r\n  // 添加图片\r\n  if (imageData) {\r\n    ws['!images'] = [];\r\n    \r\n    for (const rowIndex in imageData) {\r\n      for (const colIndex in imageData[rowIndex]) {\r\n        const imgData = imageData[rowIndex][colIndex];\r\n        if (imgData && imgData.base64) {\r\n          // 添加图片到工作表\r\n          const imgId = wb.SheetNames.length;\r\n          const imgPos = {\r\n            s: { r: parseInt(rowIndex) + 1, c: parseInt(colIndex) }, // +1 因为第一行是表头\r\n            e: { r: parseInt(rowIndex) + 3, c: parseInt(colIndex) + 1 }\r\n          };\r\n          \r\n          ws['!images'].push({\r\n            name: `image${imgId}`,\r\n            data: imgData.base64.split(',')[1], // 移除 data:image/jpeg;base64, 前缀\r\n            opts: {\r\n              base64: true,\r\n              position: imgPos\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  // 将工作表添加到工作簿\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n  \r\n  // 导出Excel文件\r\n  const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n  const blob = new Blob([wbout], { type: 'application/octet-stream' });\r\n  saveAs(blob, fileName);\r\n};\r\n\r\n/**\r\n * 将图片URL转换为Base64格式\r\n * @param {string} url 图片URL\r\n * @returns {Promise<string>} Base64格式的图片数据\r\n */\r\nconst imageUrlToBase64 = async (url) => {\r\n  try {\r\n    const response = await fetch(url);\r\n    const blob = await response.blob();\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  } catch (error) {\r\n    console.error('转换图片到Base64失败:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * 准备带图片的导出数据\r\n * @param {Array} records 记录数据\r\n * @param {string} baseUrl 基础URL\r\n * @param {Function} parsePhotoPath 解析照片路径的函数\r\n * @returns {Promise<Object>} 包含导出数据和图片数据的对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl, parsePhotoPath) => {\r\n  // 准备导出数据\r\n  const dataToExport = [];\r\n  const imageData = {};\r\n  \r\n  // 处理每条记录\r\n  for (let i = 0; i < records.length; i++) {\r\n    const record = records[i];\r\n    \r\n    // 基本数据\r\n    const exportItem = {\r\n      '单位': record.unit_name,\r\n      '废物类型': record.waste_type_name,\r\n      '收集地点': record.location,\r\n      '收集时间': record.collection_start_time,\r\n      '数量(kg)': record.quantity,\r\n      '记录时间': record.created_at,\r\n      '汇报人': record.creator_name || '未知',\r\n      '清理前照片': '见图片',\r\n      '清理后照片': '见图片'\r\n    };\r\n    \r\n    dataToExport.push(exportItem);\r\n    \r\n    // 处理清理前照片\r\n    const beforePhotos = parsePhotoPath(record.photo_path_before);\r\n    if (beforePhotos && beforePhotos.length > 0) {\r\n      const photoUrl = beforePhotos[0].startsWith('http') \r\n        ? beforePhotos[0] \r\n        : `${baseUrl}${beforePhotos[0]}`;\r\n      \r\n      try {\r\n        const base64Data = await imageUrlToBase64(photoUrl);\r\n        if (base64Data) {\r\n          if (!imageData[i]) imageData[i] = {};\r\n          imageData[i][7] = { base64: base64Data, width: 150, height: 100 };\r\n        }\r\n      } catch (error) {\r\n        console.error('处理清理前照片失败:', error);\r\n      }\r\n    }\r\n    \r\n    // 处理清理后照片\r\n    const afterPhotos = parsePhotoPath(record.photo_path_after);\r\n    if (afterPhotos && afterPhotos.length > 0) {\r\n      const photoUrl = afterPhotos[0].startsWith('http') \r\n        ? afterPhotos[0] \r\n        : `${baseUrl}${afterPhotos[0]}`;\r\n      \r\n      try {\r\n        const base64Data = await imageUrlToBase64(photoUrl);\r\n        if (base64Data) {\r\n          if (!imageData[i]) imageData[i] = {};\r\n          imageData[i][8] = { base64: base64Data, width: 150, height: 100 };\r\n        }\r\n      } catch (error) {\r\n        console.error('处理清理后照片失败:', error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return { dataToExport, imageData };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}