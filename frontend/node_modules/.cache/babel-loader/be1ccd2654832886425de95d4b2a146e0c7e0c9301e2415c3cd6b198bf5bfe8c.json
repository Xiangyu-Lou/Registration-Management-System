{"ast":null,"code":"import { reactive } from 'vue';\nimport axios from 'axios';\n\n// 初始化状态\nconst defaultState = {\n  user: null,\n  isLoggedIn: false,\n  loading: false,\n  error: null\n};\n\n// 创建响应式状态\nconst state = reactive({\n  ...defaultState\n});\n\n// 从localStorage获取已保存的用户信息\nconst init = () => {\n  const savedUser = localStorage.getItem('user');\n  if (savedUser) {\n    try {\n      const user = JSON.parse(savedUser);\n      state.user = user;\n      state.isLoggedIn = true;\n    } catch (e) {\n      console.error('Error parsing saved user data:', e);\n      localStorage.removeItem('user');\n    }\n  }\n};\n\n// 登录方法\nconst login = async (phone, password) => {\n  state.loading = true;\n  state.error = null;\n  try {\n    // 员工登录不发送密码字段，管理员必须发送密码\n    const postData = {\n      phone\n    };\n\n    // 只有在密码存在且非空时才添加到请求中\n    if (password !== null && password !== undefined && password !== '') {\n      postData.password = password;\n    }\n    const response = await axios.post('http://localhost:3000/api/login', postData);\n    const user = response.data;\n    state.user = user;\n    state.isLoggedIn = true;\n\n    // 保存到localStorage以便刷新后保持登录状态\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\n    console.error('Login error:', error);\n    return {\n      success: false,\n      error: state.error\n    };\n  } finally {\n    state.loading = false;\n  }\n};\n\n// 注销方法\nconst logout = () => {\n  state.user = null;\n  state.isLoggedIn = false;\n  localStorage.removeItem('user');\n};\n\n// 初始化\ninit();\nexport default {\n  state,\n  login,\n  logout\n};","map":{"version":3,"names":["reactive","axios","defaultState","user","isLoggedIn","loading","error","state","init","savedUser","localStorage","getItem","JSON","parse","e","console","removeItem","login","phone","password","postData","undefined","response","post","data","setItem","stringify","success","logout"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/store/auth.js"],"sourcesContent":["import { reactive } from 'vue';\nimport axios from 'axios';\n\n// 初始化状态\nconst defaultState = {\n  user: null,\n  isLoggedIn: false,\n  loading: false,\n  error: null\n};\n\n// 创建响应式状态\nconst state = reactive({\n  ...defaultState\n});\n\n// 从localStorage获取已保存的用户信息\nconst init = () => {\n  const savedUser = localStorage.getItem('user');\n  if (savedUser) {\n    try {\n      const user = JSON.parse(savedUser);\n      state.user = user;\n      state.isLoggedIn = true;\n    } catch (e) {\n      console.error('Error parsing saved user data:', e);\n      localStorage.removeItem('user');\n    }\n  }\n};\n\n// 登录方法\nconst login = async (phone, password) => {\n  state.loading = true;\n  state.error = null;\n\n  try {\n    // 员工登录不发送密码字段，管理员必须发送密码\n    const postData = { phone };\n    \n    // 只有在密码存在且非空时才添加到请求中\n    if (password !== null && password !== undefined && password !== '') {\n      postData.password = password;\n    }\n    \n    const response = await axios.post('http://localhost:3000/api/login', postData);\n\n    const user = response.data;\n    state.user = user;\n    state.isLoggedIn = true;\n    \n    // 保存到localStorage以便刷新后保持登录状态\n    localStorage.setItem('user', JSON.stringify(user));\n    \n    return { success: true, user };\n  } catch (error) {\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\n    console.error('Login error:', error);\n    return { success: false, error: state.error };\n  } finally {\n    state.loading = false;\n  }\n};\n\n// 注销方法\nconst logout = () => {\n  state.user = null;\n  state.isLoggedIn = false;\n  localStorage.removeItem('user');\n};\n\n// 初始化\ninit();\n\nexport default {\n  state,\n  login,\n  logout\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,KAAK;AAC9B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,KAAK;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,KAAK,GAAGP,QAAQ,CAAC;EACrB,GAAGE;AACL,CAAC,CAAC;;AAEF;AACA,MAAMM,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC9C,IAAIF,SAAS,EAAE;IACb,IAAI;MACF,MAAMN,IAAI,GAAGS,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;MAClCF,KAAK,CAACJ,IAAI,GAAGA,IAAI;MACjBI,KAAK,CAACH,UAAU,GAAG,IAAI;IACzB,CAAC,CAAC,OAAOU,CAAC,EAAE;MACVC,OAAO,CAACT,KAAK,CAAC,gCAAgC,EAAEQ,CAAC,CAAC;MAClDJ,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IACjC;EACF;AACF,CAAC;;AAED;AACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACvCZ,KAAK,CAACF,OAAO,GAAG,IAAI;EACpBE,KAAK,CAACD,KAAK,GAAG,IAAI;EAElB,IAAI;IACF;IACA,MAAMc,QAAQ,GAAG;MAAEF;IAAM,CAAC;;IAE1B;IACA,IAAIC,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAKE,SAAS,IAAIF,QAAQ,KAAK,EAAE,EAAE;MAClEC,QAAQ,CAACD,QAAQ,GAAGA,QAAQ;IAC9B;IAEA,MAAMG,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,iCAAiC,EAAEH,QAAQ,CAAC;IAE9E,MAAMjB,IAAI,GAAGmB,QAAQ,CAACE,IAAI;IAC1BjB,KAAK,CAACJ,IAAI,GAAGA,IAAI;IACjBI,KAAK,CAACH,UAAU,GAAG,IAAI;;IAEvB;IACAM,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEb,IAAI,CAACc,SAAS,CAACvB,IAAI,CAAC,CAAC;IAElD,OAAO;MAAEwB,OAAO,EAAE,IAAI;MAAExB;IAAK,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,KAAK,CAACD,KAAK,GAAGA,KAAK,CAACgB,QAAQ,EAAEE,IAAI,EAAElB,KAAK,IAAI,cAAc;IAC3DS,OAAO,CAACT,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO;MAAEqB,OAAO,EAAE,KAAK;MAAErB,KAAK,EAAEC,KAAK,CAACD;IAAM,CAAC;EAC/C,CAAC,SAAS;IACRC,KAAK,CAACF,OAAO,GAAG,KAAK;EACvB;AACF,CAAC;;AAED;AACA,MAAMuB,MAAM,GAAGA,CAAA,KAAM;EACnBrB,KAAK,CAACJ,IAAI,GAAG,IAAI;EACjBI,KAAK,CAACH,UAAU,GAAG,KAAK;EACxBM,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;;AAED;AACAR,IAAI,CAAC,CAAC;AAEN,eAAe;EACbD,KAAK;EACLU,KAAK;EACLW;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}