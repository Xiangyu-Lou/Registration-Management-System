{"ast":null,"code":"import { reactive, ref, computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport auth from '../store/auth';\n\n/* eslint-disable vue/multi-word-component-names */\nexport default {\n  name: 'LoginView',\n  setup() {\n    const router = useRouter();\n    const loginForm = ref(null);\n    const form = reactive({\n      phone: '',\n      password: '',\n      userType: 1 // 默认为员工\n    });\n\n    // 员工登录不需要密码，管理员需要\n    const showPassword = computed(() => form.userType !== 1);\n\n    // 根据用户类型动态设置验证规则\n    const rules = computed(() => {\n      const phoneRules = [{\n        required: true,\n        message: '请输入手机号',\n        trigger: 'blur'\n      }, {\n        pattern: /^1[3-9]\\d{9}$/,\n        message: '请输入正确的手机号格式',\n        trigger: 'blur'\n      }];\n      const passwordRules = showPassword.value ? [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }] : [];\n      return {\n        phone: phoneRules,\n        password: passwordRules\n      };\n    });\n\n    // 切换用户类型时重置表单\n    const handleUserTypeChange = () => {\n      if (form.userType === 1) {\n        form.password = '';\n      }\n      if (loginForm.value) {\n        loginForm.value.clearValidate();\n      }\n    };\n\n    // 提交表单\n    const submitForm = () => {\n      if (!loginForm.value) return;\n\n      // 简化的表单验证逻辑\n      loginForm.value.validate(async valid => {\n        if (valid) {\n          await doLogin();\n        } else {\n          console.log('表单验证失败');\n        }\n      });\n    };\n\n    // 执行登录\n    const doLogin = async () => {\n      console.log('开始登录，账号:', form.phone, '密码:', form.password);\n      try {\n        const result = await auth.login(form.phone, form.password);\n        if (result.success) {\n          const user = result.user;\n          ElMessage.success(`欢迎，${user.username || user.phone}`);\n\n          // 根据用户角色跳转到不同页面\n          if (user.role_id === 3) {\n            // 超级管理员\n            router.push('/admin-records');\n          } else {\n            // 其他用户直接进入对应单位的填报页面\n            router.push(`/unit/${user.unit_id}`);\n          }\n        } else {\n          console.error('登录失败:', result.error);\n        }\n      } catch (error) {\n        console.error('登录错误:', error);\n      }\n    };\n\n    // 如果已登录，自动跳转\n    onMounted(() => {\n      if (auth.state.isLoggedIn) {\n        const user = auth.state.user;\n        if (user.role_id === 3) {\n          router.push('/admin-records');\n        } else {\n          router.push(`/unit/${user.unit_id}`);\n        }\n      }\n    });\n    return {\n      form,\n      rules,\n      loginForm,\n      showPassword,\n      handleUserTypeChange,\n      submitForm,\n      auth\n    };\n  }\n};","map":{"version":3,"names":["reactive","ref","computed","onMounted","useRouter","ElMessage","auth","name","setup","router","loginForm","form","phone","password","userType","showPassword","rules","phoneRules","required","message","trigger","pattern","passwordRules","value","handleUserTypeChange","clearValidate","submitForm","validate","valid","doLogin","console","log","result","login","success","user","username","role_id","push","unit_id","error","state","isLoggedIn"],"sources":["C:\\Users\\10150\\Desktop\\hazardous-waste-management\\frontend\\src\\views\\Login.vue"],"sourcesContent":["<template>\n  <div class=\"login-container\">\n    <div class=\"login-card\">\n      <div class=\"login-header\">\n        <h1>危险废物管理系统</h1>\n        <h2>用户登录</h2>\n      </div>\n      \n      <el-form \n        ref=\"loginForm\" \n        :model=\"form\" \n        :rules=\"rules\" \n        label-width=\"80px\"\n        class=\"login-form\"\n      >\n        <el-form-item label=\"手机号\" prop=\"phone\">\n          <el-input \n            v-model=\"form.phone\" \n            placeholder=\"请输入手机号\" \n            @keyup.enter=\"submitForm\"\n          />\n        </el-form-item>\n        \n        <el-form-item v-if=\"showPassword\" label=\"密码\" prop=\"password\">\n          <el-input \n            v-model=\"form.password\" \n            type=\"password\" \n            placeholder=\"请输入密码\" \n            show-password\n            @keyup.enter=\"submitForm\"\n          />\n        </el-form-item>\n        \n        <el-form-item>\n          <el-radio-group v-model=\"form.userType\" @change=\"handleUserTypeChange\">\n            <el-radio :label=\"1\">员工</el-radio>\n            <el-radio :label=\"2\">单位管理员</el-radio>\n            <el-radio :label=\"3\">超级管理员</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button \n            type=\"primary\" \n            @click=\"submitForm\" \n            :loading=\"auth.state.loading\"\n            style=\"width: 100%\"\n          >\n            登录\n          </el-button>\n        </el-form-item>\n      </el-form>\n      \n      <div v-if=\"auth.state.error\" class=\"login-error\">\n        {{ auth.state.error }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { reactive, ref, computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport auth from '../store/auth';\n\n/* eslint-disable vue/multi-word-component-names */\nexport default {\n  name: 'LoginView',\n  setup() {\n    const router = useRouter();\n    const loginForm = ref(null);\n    \n    const form = reactive({\n      phone: '',\n      password: '',\n      userType: 1 // 默认为员工\n    });\n    \n    // 员工登录不需要密码，管理员需要\n    const showPassword = computed(() => form.userType !== 1);\n    \n    // 根据用户类型动态设置验证规则\n    const rules = computed(() => {\n      const phoneRules = [\n        { required: true, message: '请输入手机号', trigger: 'blur' },\n        { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号格式', trigger: 'blur' }\n      ];\n      \n      const passwordRules = showPassword.value ? [\n        { required: true, message: '请输入密码', trigger: 'blur' }\n      ] : [];\n      \n      return {\n        phone: phoneRules,\n        password: passwordRules\n      };\n    });\n    \n    // 切换用户类型时重置表单\n    const handleUserTypeChange = () => {\n      if (form.userType === 1) {\n        form.password = '';\n      }\n      if (loginForm.value) {\n        loginForm.value.clearValidate();\n      }\n    };\n    \n    // 提交表单\n    const submitForm = () => {\n      if (!loginForm.value) return;\n      \n      // 简化的表单验证逻辑\n      loginForm.value.validate(async (valid) => {\n        if (valid) {\n          await doLogin();\n        } else {\n          console.log('表单验证失败');\n        }\n      });\n    };\n    \n    // 执行登录\n    const doLogin = async () => {\n      console.log('开始登录，账号:', form.phone, '密码:', form.password);\n      try {\n        const result = await auth.login(form.phone, form.password);\n        \n        if (result.success) {\n          const user = result.user;\n          \n          ElMessage.success(`欢迎，${user.username || user.phone}`);\n          \n          // 根据用户角色跳转到不同页面\n          if (user.role_id === 3) {\n            // 超级管理员\n            router.push('/admin-records');\n          } else {\n            // 其他用户直接进入对应单位的填报页面\n            router.push(`/unit/${user.unit_id}`);\n          }\n        } else {\n          console.error('登录失败:', result.error);\n        }\n      } catch (error) {\n        console.error('登录错误:', error);\n      }\n    };\n    \n    // 如果已登录，自动跳转\n    onMounted(() => {\n      if (auth.state.isLoggedIn) {\n        const user = auth.state.user;\n        if (user.role_id === 3) {\n          router.push('/admin-records');\n        } else {\n          router.push(`/unit/${user.unit_id}`);\n        }\n      }\n    });\n    \n    return {\n      form,\n      rules,\n      loginForm,\n      showPassword,\n      handleUserTypeChange,\n      submitForm,\n      auth\n    };\n  }\n};\n</script>\n\n<style scoped>\n.login-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background-color: #f0f2f5;\n}\n\n.login-card {\n  width: 400px;\n  padding: 30px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.login-header {\n  text-align: center;\n  margin-bottom: 30px;\n}\n\n.login-header h1 {\n  font-size: 24px;\n  color: #409EFF;\n  margin-bottom: 10px;\n}\n\n.login-header h2 {\n  font-size: 18px;\n  color: #555;\n  font-weight: normal;\n}\n\n.login-form {\n  margin-top: 20px;\n}\n\n.login-error {\n  color: #f56c6c;\n  text-align: center;\n  margin-top: 15px;\n  font-size: 14px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}