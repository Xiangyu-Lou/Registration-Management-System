{"ast":null,"code":"import { reactive } from 'vue';\nimport axios from 'axios';\n\n// 初始化状态\nconst defaultState = {\n  user: null,\n  isLoggedIn: false,\n  loading: false,\n  error: null\n};\n\n// 创建响应式状态\nconst state = reactive({\n  ...defaultState\n});\n\n// 从localStorage获取已保存的用户信息\nconst init = () => {\n  const savedUser = localStorage.getItem('user');\n  if (savedUser) {\n    try {\n      const user = JSON.parse(savedUser);\n      state.user = user;\n      state.isLoggedIn = true;\n    } catch (e) {\n      console.error('Error parsing saved user data:', e);\n      localStorage.removeItem('user');\n    }\n  }\n};\n\n// 登录方法\nconst login = async (phone, password) => {\n  state.loading = true;\n  state.error = null;\n  try {\n    const response = await axios.post('http://192.168.50.255:3000/api/login', {\n      phone,\n      password: password || undefined // 员工登录不需要密码\n    });\n    const user = response.data;\n    state.user = user;\n    state.isLoggedIn = true;\n\n    // 保存到localStorage以便刷新后保持登录状态\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      success: true,\n      user\n    };\n  } catch (error) {\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\n    console.error('Login error:', error);\n    return {\n      success: false,\n      error: state.error\n    };\n  } finally {\n    state.loading = false;\n  }\n};\n\n// 注销方法\nconst logout = () => {\n  state.user = null;\n  state.isLoggedIn = false;\n  localStorage.removeItem('user');\n};\n\n// 初始化\ninit();\nexport default {\n  state,\n  login,\n  logout\n};","map":{"version":3,"names":["reactive","axios","defaultState","user","isLoggedIn","loading","error","state","init","savedUser","localStorage","getItem","JSON","parse","e","console","removeItem","login","phone","password","response","post","undefined","data","setItem","stringify","success","logout"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/store/auth.js"],"sourcesContent":["import { reactive } from 'vue';\r\nimport axios from 'axios';\r\n\r\n// 初始化状态\r\nconst defaultState = {\r\n  user: null,\r\n  isLoggedIn: false,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// 创建响应式状态\r\nconst state = reactive({\r\n  ...defaultState\r\n});\r\n\r\n// 从localStorage获取已保存的用户信息\r\nconst init = () => {\r\n  const savedUser = localStorage.getItem('user');\r\n  if (savedUser) {\r\n    try {\r\n      const user = JSON.parse(savedUser);\r\n      state.user = user;\r\n      state.isLoggedIn = true;\r\n    } catch (e) {\r\n      console.error('Error parsing saved user data:', e);\r\n      localStorage.removeItem('user');\r\n    }\r\n  }\r\n};\r\n\r\n// 登录方法\r\nconst login = async (phone, password) => {\r\n  state.loading = true;\r\n  state.error = null;\r\n\r\n  try {\r\n    const response = await axios.post('http://192.168.50.255:3000/api/login', {\r\n      phone,\r\n      password: password || undefined // 员工登录不需要密码\r\n    });\r\n\r\n    const user = response.data;\r\n    state.user = user;\r\n    state.isLoggedIn = true;\r\n    \r\n    // 保存到localStorage以便刷新后保持登录状态\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    \r\n    return { success: true, user };\r\n  } catch (error) {\r\n    state.error = error.response?.data?.error || '登录失败，请检查网络连接';\r\n    console.error('Login error:', error);\r\n    return { success: false, error: state.error };\r\n  } finally {\r\n    state.loading = false;\r\n  }\r\n};\r\n\r\n// 注销方法\r\nconst logout = () => {\r\n  state.user = null;\r\n  state.isLoggedIn = false;\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// 初始化\r\ninit();\r\n\r\nexport default {\r\n  state,\r\n  login,\r\n  logout\r\n};\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,KAAK;AAC9B,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,KAAK;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,KAAK,GAAGP,QAAQ,CAAC;EACrB,GAAGE;AACL,CAAC,CAAC;;AAEF;AACA,MAAMM,IAAI,GAAGA,CAAA,KAAM;EACjB,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC9C,IAAIF,SAAS,EAAE;IACb,IAAI;MACF,MAAMN,IAAI,GAAGS,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;MAClCF,KAAK,CAACJ,IAAI,GAAGA,IAAI;MACjBI,KAAK,CAACH,UAAU,GAAG,IAAI;IACzB,CAAC,CAAC,OAAOU,CAAC,EAAE;MACVC,OAAO,CAACT,KAAK,CAAC,gCAAgC,EAAEQ,CAAC,CAAC;MAClDJ,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IACjC;EACF;AACF,CAAC;;AAED;AACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACvCZ,KAAK,CAACF,OAAO,GAAG,IAAI;EACpBE,KAAK,CAACD,KAAK,GAAG,IAAI;EAElB,IAAI;IACF,MAAMc,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,sCAAsC,EAAE;MACxEH,KAAK;MACLC,QAAQ,EAAEA,QAAQ,IAAIG,SAAS,CAAC;IAClC,CAAC,CAAC;IAEF,MAAMnB,IAAI,GAAGiB,QAAQ,CAACG,IAAI;IAC1BhB,KAAK,CAACJ,IAAI,GAAGA,IAAI;IACjBI,KAAK,CAACH,UAAU,GAAG,IAAI;;IAEvB;IACAM,YAAY,CAACc,OAAO,CAAC,MAAM,EAAEZ,IAAI,CAACa,SAAS,CAACtB,IAAI,CAAC,CAAC;IAElD,OAAO;MAAEuB,OAAO,EAAE,IAAI;MAAEvB;IAAK,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,KAAK,CAACD,KAAK,GAAGA,KAAK,CAACc,QAAQ,EAAEG,IAAI,EAAEjB,KAAK,IAAI,cAAc;IAC3DS,OAAO,CAACT,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,OAAO;MAAEoB,OAAO,EAAE,KAAK;MAAEpB,KAAK,EAAEC,KAAK,CAACD;IAAM,CAAC;EAC/C,CAAC,SAAS;IACRC,KAAK,CAACF,OAAO,GAAG,KAAK;EACvB;AACF,CAAC;;AAED;AACA,MAAMsB,MAAM,GAAGA,CAAA,KAAM;EACnBpB,KAAK,CAACJ,IAAI,GAAG,IAAI;EACjBI,KAAK,CAACH,UAAU,GAAG,KAAK;EACxBM,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;AACjC,CAAC;;AAED;AACAR,IAAI,CAAC,CAAC;AAEN,eAAe;EACbD,KAAK;EACLU,KAAK;EACLU;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}