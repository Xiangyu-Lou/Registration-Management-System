{"ast":null,"code":"// 用于导出数据到CSV和Excel的工具函数\nimport * as XLSX from 'xlsx';\nimport Table2Excel from 'js-table2excel';\n// import { saveAs } from 'file-saver';\n\n// 检查XLSX库是否正确加载\nconsole.log('XLSX库版本:', XLSX.version);\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\n\n// 解析照片路径\nconst parsePhotoPath = path => {\n  console.log('【照片处理】开始解析照片路径:', path);\n  console.log('【照片处理】照片路径类型:', typeof path);\n  if (!path) {\n    console.log('【照片处理】照片路径为空，返回空数组');\n    return [];\n  }\n  try {\n    // 尝试解析为JSON\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\n      console.log('【照片处理】照片路径是JSON格式，尝试解析');\n      const parsed = JSON.parse(path);\n      console.log('【照片处理】JSON解析结果:', parsed);\n      console.log('【照片处理】解析后的照片路径数量:', parsed.length);\n      return parsed;\n    }\n\n    // 如果是数组，直接返回\n    if (Array.isArray(path)) {\n      console.log('【照片处理】照片路径已经是数组格式:', path);\n      console.log('【照片处理】照片路径数量:', path.length);\n      return path;\n    }\n\n    // 如果不是JSON格式，则将其作为单个路径返回\n    console.log('【照片处理】照片路径不是JSON格式，作为单个路径返回:', [path]);\n    return [path];\n  } catch (error) {\n    console.error('【照片处理】解析照片路径失败:', error);\n    console.error('【照片处理】错误详情:', error.message);\n    console.error('【照片处理】错误堆栈:', error.stack);\n    // 如果解析失败，将其作为单个路径返回\n    console.log('【照片处理】解析失败，作为单个路径返回:', [path]);\n    return [path];\n  }\n};\n\n// 将图片URL转换为Base64\nconst imageUrlToBase64 = url => {\n  return new Promise((resolve, reject) => {\n    console.log('【照片处理】开始将图片URL转换为Base64');\n    console.log('【照片处理】原始URL:', url);\n\n    // 验证URL\n    if (!url) {\n      const error = new Error('图片URL为空');\n      console.error('【照片处理】图片URL为空，转换失败');\n      reject(error);\n      return;\n    }\n\n    // 添加时间戳避免缓存\n    const timestamp = new Date().getTime();\n    let imageUrl = url;\n\n    // 如果URL包含?，则添加&timestamp=，否则添加?timestamp=\n    if (url.includes('?')) {\n      imageUrl = `${url}&_t=${timestamp}`;\n    } else {\n      imageUrl = `${url}?_t=${timestamp}`;\n    }\n    console.log('【照片处理】添加时间戳后的URL:', imageUrl);\n\n    // 尝试解析URL，检查是否有效\n    try {\n      const parsedUrl = new URL(imageUrl);\n      console.log('【照片处理】URL解析成功:', {\n        protocol: parsedUrl.protocol,\n        hostname: parsedUrl.hostname,\n        pathname: parsedUrl.pathname,\n        origin: parsedUrl.origin\n      });\n    } catch (urlError) {\n      console.error('【照片处理】URL解析失败:', urlError.message);\n      // 继续尝试，因为有些相对路径可能在fetch中仍然有效\n    }\n\n    // 使用fetch API获取图片\n    console.log('【照片处理】开始使用fetch获取图片');\n    fetch(imageUrl, {\n      method: 'GET',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Cache-Control': 'no-cache',\n        'Pragma': 'no-cache'\n      }\n    }).then(response => {\n      console.log('【照片处理】fetch响应状态:', response.status);\n      console.log('【照片处理】fetch响应类型:', response.type);\n      console.log('【照片处理】fetch响应URL:', response.url);\n\n      // 打印所有响应头\n      const headers = {};\n      response.headers.forEach((value, key) => {\n        headers[key] = value;\n      });\n      console.log('【照片处理】fetch响应头:', JSON.stringify(headers));\n      if (!response.ok) {\n        throw new Error(`HTTP错误，状态码: ${response.status}`);\n      }\n      console.log('【照片处理】fetch响应成功，开始获取blob');\n      return response.blob();\n    }).then(blob => {\n      console.log('【照片处理】获取到图片blob数据');\n      console.log('【照片处理】blob类型:', blob.type);\n      console.log('【照片处理】blob大小:', blob.size, 'bytes');\n\n      // 检查blob是否为空或太小\n      if (blob.size < 100) {\n        console.warn('【照片处理】警告: blob数据太小，可能不是有效的图片');\n      }\n\n      // 使用FileReader将blob转换为Base64\n      const reader = new FileReader();\n      console.log('【照片处理】创建FileReader对象，准备读取blob');\n      reader.onload = () => {\n        const base64data = reader.result;\n        console.log('【照片处理】FileReader读取完成，获取到Base64数据');\n        console.log('【照片处理】Base64数据长度:', base64data.length);\n        console.log('【照片处理】Base64数据前100个字符:', base64data.substring(0, 100) + '...');\n\n        // 验证Base64数据是否有效\n        if (!base64data || base64data.length < 100) {\n          console.error('【照片处理】Base64数据无效或太短');\n          reject(new Error('Base64数据无效'));\n          return;\n        }\n\n        // 检查Base64数据格式是否正确\n        if (!base64data.startsWith('data:image/')) {\n          console.warn('【照片处理】警告: Base64数据不是标准的图片格式');\n        }\n\n        // 创建一个Image对象来验证Base64数据\n        const testImg = new Image();\n        testImg.onload = () => {\n          console.log('【照片处理】Base64数据验证成功，图片尺寸:', testImg.width, 'x', testImg.height);\n          resolve(base64data);\n        };\n        testImg.onerror = () => {\n          console.error('【照片处理】Base64数据验证失败，无法加载图片');\n          // 尽管验证失败，仍然返回数据，让后续处理决定是否使用\n          resolve(base64data);\n        };\n        testImg.src = base64data;\n      };\n      reader.onerror = error => {\n        console.error('【照片处理】FileReader读取失败:', error);\n        console.error('【照片处理】错误详情:', error.message);\n        reject(new Error('FileReader读取失败'));\n      };\n      console.log('【照片处理】开始使用FileReader读取blob');\n      reader.readAsDataURL(blob);\n    }).catch(error => {\n      console.error('【照片处理】fetch或处理过程中出错:', error);\n      console.error('【照片处理】错误详情:', error.message);\n      console.error('【照片处理】错误堆栈:', error.stack);\n\n      // 尝试使用Image对象作为备选方案\n      console.log('【照片处理】尝试使用Image对象作为备选方案');\n      const img = new Image();\n      img.crossOrigin = 'Anonymous';\n      img.onload = () => {\n        console.log('【照片处理】Image对象加载成功');\n        console.log('【照片处理】图片尺寸:', img.width, 'x', img.height);\n        try {\n          // 创建canvas并绘制图片\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          console.log('【照片处理】创建Canvas元素，尺寸:', canvas.width, 'x', canvas.height);\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          console.log('【照片处理】图片已绘制到Canvas');\n\n          // 将canvas内容转换为Base64\n          // 尝试不同的格式\n          let dataURL;\n          try {\n            dataURL = canvas.toDataURL('image/jpeg', 0.8);\n            console.log('【照片处理】Canvas转换为JPEG Base64数据成功');\n          } catch (jpegError) {\n            console.error('【照片处理】JPEG转换失败，尝试PNG:', jpegError.message);\n            try {\n              dataURL = canvas.toDataURL('image/png');\n              console.log('【照片处理】Canvas转换为PNG Base64数据成功');\n            } catch (pngError) {\n              console.error('【照片处理】PNG转换也失败:', pngError.message);\n              throw pngError;\n            }\n          }\n          console.log('【照片处理】Base64数据长度:', dataURL.length);\n          console.log('【照片处理】Base64数据前100个字符:', dataURL.substring(0, 100) + '...');\n          resolve(dataURL);\n        } catch (canvasError) {\n          console.error('【照片处理】Canvas处理失败:', canvasError);\n          console.error('【照片处理】错误详情:', canvasError.message);\n          console.error('【照片处理】错误堆栈:', canvasError.stack);\n          reject(canvasError);\n        }\n      };\n      img.onerror = imgError => {\n        console.error('【照片处理】Image对象加载失败:', imgError);\n        console.error('【照片处理】错误详情:', imgError.message);\n        console.error('【照片处理】所有尝试均失败，无法加载图片:', url);\n\n        // 创建一个简单的错误图片作为替代\n        try {\n          console.log('【照片处理】尝试创建错误占位图片');\n          const errorCanvas = document.createElement('canvas');\n          errorCanvas.width = 200;\n          errorCanvas.height = 200;\n          const ctx = errorCanvas.getContext('2d');\n\n          // 填充红色背景\n          ctx.fillStyle = '#ffeeee';\n          ctx.fillRect(0, 0, 200, 200);\n\n          // 绘制错误文本\n          ctx.fillStyle = '#ff0000';\n          ctx.font = '16px Arial';\n          ctx.textAlign = 'center';\n          ctx.fillText('图片加载失败', 100, 100);\n          const errorDataURL = errorCanvas.toDataURL('image/png');\n          console.log('【照片处理】创建错误占位图片成功');\n          resolve(errorDataURL);\n        } catch (fallbackError) {\n          console.error('【照片处理】创建错误占位图片失败:', fallbackError.message);\n          reject(new Error('图片加载失败'));\n        }\n      };\n\n      // 设置超时处理\n      const timeout = setTimeout(() => {\n        if (!img.complete) {\n          console.error('【照片处理】Image对象加载超时');\n          img.src = ''; // 取消加载\n          reject(new Error('图片加载超时'));\n        }\n      }, 10000); // 10秒超时\n\n      img.onload = function () {\n        clearTimeout(timeout);\n        this.onload(); // 调用原来的onload\n      };\n      img.onerror = function () {\n        clearTimeout(timeout);\n        this.onerror(); // 调用原来的onerror\n      };\n      console.log('【照片处理】设置Image对象的src:', imageUrl);\n      img.src = imageUrl;\n    });\n  });\n};\n\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\n  console.log('=== 【调试】exportToExcelWithImages 函数被调用 ===');\n  console.log('【调试】数据条数:', data.length);\n  console.log('【调试】headers:', JSON.stringify(headers));\n  if (!data || data.length === 0) {\n    console.error('【调试】导出失败：没有数据');\n    return false;\n  }\n  try {\n    console.log('【调试】使用js-table2excel导出Excel，开始处理图片...');\n    console.log('【调试】第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\n\n    // 处理文件名\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n    const fullFileName = `${fileName}_${timestamp}`;\n    console.log('【调试】导出文件名:', fullFileName);\n\n    // 预处理图片，确保所有图片都加载完成\n    const processedData = [];\n\n    // 记录照片处理结果\n    let totalPhotos = 0;\n    let successfulPhotos = 0;\n    let failedPhotos = 0;\n\n    // 逐行处理数据\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\n      console.log(`【调试】处理第 ${rowIndex + 1}/${data.length} 条记录...`);\n      const row = data[rowIndex];\n      const record = row['__original'] || {};\n      console.log(`【调试】记录ID: ${record.id || 'unknown'}`);\n      console.log(`【调试】记录数据:`, JSON.stringify(record).substring(0, 200) + '...');\n\n      // 处理清理前照片\n      let beforePhotoData = null;\n      if (record.photo_path_before) {\n        totalPhotos++;\n        console.log(`【调试】记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_before);\n        const photoPaths = parsePhotoPath(record.photo_path_before);\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`【调试】选择第一张照片:`, firstPath);\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\n            }\n            console.log(`【调试】记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\n            try {\n              console.log(`【调试】开始转换清理前照片...`);\n              beforePhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`【调试】记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\n              console.log(`【调试】Base64数据前50个字符:`, beforePhotoData ? beforePhotoData.substring(0, 50) + '...' : 'null');\n              if (beforePhotoData && beforePhotoData.length > 100) {\n                successfulPhotos++;\n                console.log(`【调试】记录 ${rowIndex} 清理前照片转换成功`);\n              } else {\n                failedPhotos++;\n                console.error(`【调试】记录 ${rowIndex} 清理前照片转换结果无效`);\n              }\n            } catch (error) {\n              failedPhotos++;\n              console.error(`【调试】记录 ${rowIndex} 清理前照片转换失败:`, error);\n              console.error('【调试】错误详情:', error.message);\n              console.error('【调试】错误堆栈:', error.stack);\n            }\n          } else {\n            failedPhotos++;\n            console.error(`【调试】记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\n          }\n        } else {\n          failedPhotos++;\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理前照片路径`);\n        }\n      } else {\n        console.log(`【调试】记录 ${rowIndex} 没有清理前照片`);\n      }\n\n      // 处理清理后照片\n      let afterPhotoData = null;\n      if (record.photo_path_after) {\n        totalPhotos++;\n        console.log(`【调试】记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_after);\n        const photoPaths = parsePhotoPath(record.photo_path_after);\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\n        if (photoPaths && photoPaths.length > 0) {\n          const firstPath = photoPaths[0];\n          console.log(`【调试】选择第一张照片:`, firstPath);\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\n\n          // 检查路径格式\n          if (typeof firstPath === 'string') {\n            // 构建完整URL\n            let imageUrl = firstPath;\n\n            // 如果是相对路径，添加origin\n            if (firstPath.startsWith('/')) {\n              imageUrl = window.location.origin + firstPath;\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\n            }\n            console.log(`【调试】记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\n            try {\n              console.log(`【调试】开始转换清理后照片...`);\n              afterPhotoData = await imageUrlToBase64(imageUrl);\n              console.log(`【调试】记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\n              console.log(`【调试】Base64数据前50个字符:`, afterPhotoData ? afterPhotoData.substring(0, 50) + '...' : 'null');\n              if (afterPhotoData && afterPhotoData.length > 100) {\n                successfulPhotos++;\n                console.log(`【调试】记录 ${rowIndex} 清理后照片转换成功`);\n              } else {\n                failedPhotos++;\n                console.error(`【调试】记录 ${rowIndex} 清理后照片转换结果无效`);\n              }\n            } catch (error) {\n              failedPhotos++;\n              console.error(`【调试】记录 ${rowIndex} 清理后照片转换失败:`, error);\n              console.error('【调试】错误详情:', error.message);\n              console.error('【调试】错误堆栈:', error.stack);\n            }\n          } else {\n            failedPhotos++;\n            console.error(`【调试】记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\n          }\n        } else {\n          failedPhotos++;\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理后照片路径`);\n        }\n      } else {\n        console.log(`【调试】记录 ${rowIndex} 没有清理后照片`);\n      }\n\n      // 保存处理后的数据\n      processedData.push({\n        ...row,\n        __beforePhotoData: beforePhotoData,\n        __afterPhotoData: afterPhotoData\n      });\n      console.log(`【调试】记录 ${rowIndex} 处理完成，是否有照片数据:`, {\n        beforePhoto: !!beforePhotoData,\n        afterPhoto: !!afterPhotoData\n      });\n    }\n    console.log('【调试】所有图片处理完成，开始创建Excel...');\n    console.log('【调试】处理后的数据条数:', processedData.length);\n    console.log('【调试】照片处理统计:', {\n      总照片数: totalPhotos,\n      成功处理: successfulPhotos,\n      处理失败: failedPhotos\n    });\n\n    // 检查是否有任何图片数据\n    let hasImageData = false;\n    let imageDataCount = 0;\n    for (const row of processedData) {\n      if (row.__beforePhotoData || row.__afterPhotoData) {\n        hasImageData = true;\n        imageDataCount++;\n      }\n    }\n    console.log('【调试】是否有图片数据:', hasImageData ? '是' : '否');\n    console.log('【调试】包含图片的记录数:', imageDataCount);\n    if (!hasImageData) {\n      console.warn('【调试】没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\n    }\n\n    // 创建一个临时表格元素\n    const table = document.createElement('table');\n    table.style.display = 'none';\n    document.body.appendChild(table);\n    console.log('【调试】创建临时表格元素');\n\n    // 创建表头\n    const thead = document.createElement('thead');\n    const headerRow = document.createElement('tr');\n    headers.forEach(header => {\n      const th = document.createElement('th');\n      th.textContent = header.text;\n      headerRow.appendChild(th);\n      console.log(`【调试】添加表头: ${header.text}`);\n    });\n    thead.appendChild(headerRow);\n    table.appendChild(thead);\n    console.log('【调试】表头创建完成');\n\n    // 创建表体\n    const tbody = document.createElement('tbody');\n\n    // 添加数据行\n    processedData.forEach((row, index) => {\n      console.log(`【调试】创建第 ${index + 1}/${processedData.length} 行...`);\n      const tr = document.createElement('tr');\n      headers.forEach(header => {\n        const td = document.createElement('td');\n\n        // 处理清理前照片列\n        if (header.field === '清理前照片') {\n          if (row.__beforePhotoData) {\n            console.log(`【调试】添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__beforePhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            img.alt = '清理前照片';\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__beforePhotoData.length);\n\n            // 确保图片已加载\n            if (!img.complete) {\n              console.log('【调试】图片尚未加载完成，添加onload事件');\n              img.onload = () => {\n                console.log(`【调试】第 ${index + 1} 行清理前照片加载完成`);\n              };\n              img.onerror = error => {\n                console.error(`【调试】第 ${index + 1} 行清理前照片加载失败:`, error);\n                td.textContent = '图片加载失败';\n              };\n            } else {\n              console.log(`【调试】第 ${index + 1} 行清理前照片已加载完成`);\n            }\n            td.appendChild(img);\n            console.log(`【调试】第 ${index + 1} 行清理前照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`【调试】第 ${index + 1} 行没有清理前照片`);\n          }\n        }\n        // 处理清理后照片列 \n        else if (header.field === '清理后照片') {\n          if (row.__afterPhotoData) {\n            console.log(`【调试】添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\n            // 使用Base64数据创建图片\n            const img = document.createElement('img');\n            img.src = row.__afterPhotoData;\n            img.style.width = '100px';\n            img.style.height = '100px';\n            img.alt = '清理后照片';\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__afterPhotoData.length);\n\n            // 确保图片已加载\n            if (!img.complete) {\n              console.log('【调试】图片尚未加载完成，添加onload事件');\n              img.onload = () => {\n                console.log(`【调试】第 ${index + 1} 行清理后照片加载完成`);\n              };\n              img.onerror = error => {\n                console.error(`【调试】第 ${index + 1} 行清理后照片加载失败:`, error);\n                td.textContent = '图片加载失败';\n              };\n            } else {\n              console.log(`【调试】第 ${index + 1} 行清理后照片已加载完成`);\n            }\n            td.appendChild(img);\n            console.log(`【调试】第 ${index + 1} 行清理后照片添加成功`);\n          } else {\n            td.textContent = '无图片';\n            console.log(`【调试】第 ${index + 1} 行没有清理后照片`);\n          }\n        } else {\n          // 普通文本列\n          td.textContent = row[header.field] || '';\n          console.log(`【调试】添加第 ${index + 1} 行 ${header.field} 列: ${row[header.field] || '(空)'}`);\n        }\n        tr.appendChild(td);\n      });\n      tbody.appendChild(tr);\n      console.log(`【调试】第 ${index + 1} 行创建完成`);\n    });\n    table.appendChild(tbody);\n    console.log('【调试】表格创建完成');\n\n    // 检查表格内容\n    console.log('【调试】表格行数:', table.rows.length);\n    console.log('【调试】表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\n\n    // 使用js-table2excel导出\n    console.log('【调试】开始使用js-table2excel导出...');\n    const table2excel = new Table2Excel();\n    console.log('【调试】Table2Excel实例创建成功');\n\n    // 确保所有图片都已加载完成\n    console.log('【调试】检查表格中的图片...');\n    const imgElements = table.querySelectorAll('img');\n    console.log(`【调试】表格中共有 ${imgElements.length} 张图片`);\n\n    // 检查每个图片的状态\n    Array.from(imgElements).forEach((img, idx) => {\n      console.log(`【调试】图片 ${idx + 1} 状态:`, {\n        complete: img.complete,\n        naturalWidth: img.naturalWidth,\n        naturalHeight: img.naturalHeight,\n        src长度: img.src.length\n      });\n    });\n\n    // 如果没有图片，直接导出\n    if (imgElements.length === 0) {\n      console.log('【调试】表格中没有图片，直接导出');\n      try {\n        console.log('【调试】调用export方法...');\n        table2excel.export(table, fullFileName);\n        console.log('【调试】export方法调用成功');\n\n        // 导出完成后移除临时表格\n        document.body.removeChild(table);\n        console.log('【调试】临时表格已移除');\n        return true;\n      } catch (exportError) {\n        console.error('【调试】export方法调用失败:', exportError);\n        console.error('【调试】错误详情:', exportError.message);\n        console.error('【调试】错误堆栈:', exportError.stack);\n\n        // 导出完成后移除临时表格\n        document.body.removeChild(table);\n        console.log('【调试】临时表格已移除');\n        throw exportError;\n      }\n    } else {\n      // 等待所有图片加载完成\n      console.log('【调试】等待所有图片加载完成后再导出');\n\n      // 创建一个Promise数组，每个Promise对应一个图片的加载\n      const imgPromises = Array.from(imgElements).map((img, imgIndex) => {\n        return new Promise(resolve => {\n          if (img.complete) {\n            console.log(`【调试】图片 ${imgIndex + 1} 已加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\n            resolve();\n          } else {\n            console.log(`【调试】等待图片 ${imgIndex + 1} 加载...`);\n            img.onload = () => {\n              console.log(`【调试】图片 ${imgIndex + 1} 加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\n              resolve();\n            };\n            img.onerror = error => {\n              console.error(`【调试】图片 ${imgIndex + 1} 加载失败:`, error);\n              console.error('【调试】错误详情:', error ? error.message : 'Unknown error');\n              resolve(); // 即使失败也继续导出\n            };\n\n            // 添加超时处理\n            setTimeout(() => {\n              if (!img.complete) {\n                console.error(`【调试】图片 ${imgIndex + 1} 加载超时`);\n                resolve(); // 超时也继续导出\n              }\n            }, 5000); // 5秒超时\n          }\n        });\n      });\n\n      // 等待所有图片加载完成或超时\n      try {\n        await Promise.all(imgPromises);\n        console.log('【调试】所有图片加载完成或超时，开始导出');\n\n        // 再次检查图片状态\n        console.log('【调试】导出前最终检查图片状态:');\n        Array.from(imgElements).forEach((img, idx) => {\n          console.log(`【调试】图片 ${idx + 1} 最终状态:`, {\n            complete: img.complete,\n            naturalWidth: img.naturalWidth,\n            naturalHeight: img.naturalHeight,\n            src长度: img.src.length\n          });\n        });\n        try {\n          console.log('【调试】调用export方法...');\n          table2excel.export(table, fullFileName);\n          console.log('【调试】export方法调用成功');\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          return true;\n        } catch (exportError) {\n          console.error('【调试】export方法调用失败:', exportError);\n          console.error('【调试】错误详情:', exportError.message);\n          console.error('【调试】错误堆栈:', exportError.stack);\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          throw exportError;\n        }\n      } catch (imgLoadError) {\n        console.error('【调试】等待图片加载过程中发生错误:', imgLoadError);\n        console.error('【调试】错误详情:', imgLoadError.message);\n        console.error('【调试】错误堆栈:', imgLoadError.stack);\n        try {\n          console.log('【调试】尝试强制导出...');\n          table2excel.export(table, fullFileName);\n          console.log('【调试】强制导出成功');\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          return true;\n        } catch (forceExportError) {\n          console.error('【调试】强制导出失败:', forceExportError);\n          console.error('【调试】错误详情:', forceExportError.message);\n          console.error('【调试】错误堆栈:', forceExportError.stack);\n\n          // 导出完成后移除临时表格\n          document.body.removeChild(table);\n          console.log('【调试】临时表格已移除');\n          throw forceExportError;\n        }\n      }\n    }\n  } catch (error) {\n    console.error('使用js-table2excel导出Excel失败:', error);\n    console.error('错误详情:', error.message);\n    console.error('错误堆栈:', error.stack);\n\n    // 创建一个包含图片数据的对象，用于传递给exportToExcel\n    const imageData = {};\n    let hasAnyImageData = false;\n\n    // 从data中提取图片数据\n    data.forEach((row, index) => {\n      const record = row['__original'] || {};\n      if (record.photo_path_before || record.photo_path_after) {\n        imageData[index] = {\n          beforePhoto: record.photo_path_before,\n          afterPhoto: record.photo_path_after\n        };\n        hasAnyImageData = true;\n      }\n    });\n    console.log('【调试】准备回退到XLSX导出，是否有图片数据:', hasAnyImageData ? '是' : '否');\n    console.log('【调试】图片数据对象:', JSON.stringify(imageData));\n\n    // 尝试使用XLSX导出，传递图片数据\n    console.log('尝试使用XLSX导出（包含图片路径）...');\n    try {\n      // 直接在这里实现导出逻辑，而不是调用exportToExcel\n      console.log('创建工作簿...');\n      const wb = XLSX.utils.book_new();\n\n      // 准备数据\n      const exportRows = data.map(row => {\n        const exportRow = {};\n        headers.forEach(header => {\n          exportRow[header.text] = row[header.field] || '';\n        });\n        return exportRow;\n      });\n      console.log('创建工作表...');\n      const ws = XLSX.utils.json_to_sheet(exportRows);\n\n      // 添加工作表到工作簿\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n      // 处理文件名\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n      const fullFileName = `${fileName}_${timestamp}`;\n\n      // 导出\n      console.log('导出Excel文件...');\n      const excelData = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n\n      // 创建Blob\n      const blob = new Blob([excelData], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      });\n\n      // 创建下载链接\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${fullFileName}.xlsx`;\n\n      // 触发下载\n      document.body.appendChild(a);\n      a.click();\n\n      // 清理\n      setTimeout(() => {\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }, 0);\n      console.log('XLSX导出成功（包含图片路径）');\n      return true;\n    } catch (xlsxError) {\n      console.error('XLSX导出失败:', xlsxError);\n\n      // 最后尝试CSV导出\n      console.log('尝试CSV导出...');\n      return exportToCSV(data, fileName, headers);\n    }\n  }\n};\n\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\n  if (!data || data.length === 0) {\n    console.error('导出失败：没有数据');\n    return false;\n  }\n\n  // 处理文件名\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  console.log('导出函数被调用，数据条数:', data.length);\n  console.log('是否有图片数据:', imageData ? '是' : '否');\n  if (imageData) {\n    console.log('图片数据条数:', Object.keys(imageData).length);\n  }\n\n  // 强制使用XLSX导出Excel（不管是否有图片）\n  try {\n    console.log('尝试导出Excel...');\n\n    // 创建工作簿\n    const wb = XLSX.utils.book_new();\n    console.log('工作簿创建成功');\n\n    // 准备数据\n    let enhancedData = [];\n\n    // 如果有图片数据，添加图片链接\n    if (imageData && Object.keys(imageData).length > 0) {\n      enhancedData = data.map((row, index) => {\n        const newRow = {\n          ...row\n        };\n\n        // 检查是否有图片数据\n        if (imageData[index]) {\n          // 添加图片链接\n          if (imageData[index][7] && imageData[index][7].url) {\n            newRow['清理前照片'] = imageData[index][7].url;\n          }\n          if (imageData[index][8] && imageData[index][8].url) {\n            newRow['清理后照片'] = imageData[index][8].url;\n          }\n        }\n        return newRow;\n      });\n    } else {\n      enhancedData = data;\n    }\n    console.log('数据准备完成，开始创建工作表');\n\n    // 创建工作表\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\n    console.log('工作表创建成功');\n\n    // 设置列宽\n    const colWidths = headers.map(() => ({\n      wch: 20\n    }));\n    ws['!cols'] = colWidths;\n\n    // 添加工作表到工作簿\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\n    console.log('工作表已添加到工作簿');\n\n    // 导出Excel文件\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\n    console.log('准备导出Excel文件:', excelFileName);\n\n    // 使用write方法导出\n    console.log('使用XLSX.write方法导出...');\n    const wbout = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\n\n    // 创建Blob对象\n    const blob = new Blob([wbout], {\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    });\n    console.log('Blob创建成功，大小:', blob.size, '字节');\n\n    // 创建下载链接\n    const url = URL.createObjectURL(blob);\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = excelFileName;\n    console.log('下载链接创建成功，准备触发点击');\n\n    // 触发下载\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    console.log('Excel导出成功');\n    return true;\n  } catch (error) {\n    console.error('导出Excel失败，错误详情:', error);\n    console.log('回退到CSV导出');\n    // 如果Excel导出失败，回退到CSV导出\n    exportToCSV(data, fileName, headers);\n    return false;\n  }\n};\n\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\nexport const exportToCSV = (data, fileName, headers) => {\n  // 处理文件名\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\n  const csvFileName = `${fileName}_${timestamp}.csv`;\n\n  // 准备CSV内容\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\n\n  // 添加表头\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\n  csvContent += headerRow + '\\r\\n';\n\n  // 添加数据行\n  data.forEach(item => {\n    const row = headers.map(header => {\n      const value = item[header.field];\n\n      // 处理null和undefined\n      if (value === null || value === undefined) {\n        return '';\n      }\n\n      // 处理数字\n      if (header.type === 'number' || typeof value === 'number') {\n        return value;\n      }\n\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\n      let cellValue = String(value);\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\n      }\n      return cellValue;\n    }).join(',');\n    csvContent += row + '\\r\\n';\n  });\n\n  // 创建下载链接\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', csvFileName);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n  console.log('CSV导出成功');\n};\n\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\nexport const prepareImageExportData = async (records, baseUrl) => {\n  const imageData = {};\n  try {\n    console.log('准备图片数据，记录数:', records.length);\n    console.log('基础URL:', baseUrl);\n\n    // 处理每条记录的图片\n    records.forEach((record, index) => {\n      imageData[index] = {\n        beforeImages: [],\n        afterImages: []\n      };\n\n      // 处理清理前照片\n      if (record.photo_path_before) {\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\n        let beforePaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\n            beforePaths = JSON.parse(record.photo_path_before);\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\n          } else {\n            beforePaths = [record.photo_path_before];\n          }\n        } catch (e) {\n          console.error('解析清理前照片路径失败:', e);\n          beforePaths = [record.photo_path_before];\n        }\n\n        // 添加完整URL\n        imageData[index].beforeImages = beforePaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\n      }\n\n      // 处理清理后照片\n      if (record.photo_path_after) {\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\n        let afterPaths = [];\n        try {\n          // 尝试解析JSON\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\n            afterPaths = JSON.parse(record.photo_path_after);\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\n          } else {\n            afterPaths = [record.photo_path_after];\n          }\n        } catch (e) {\n          console.error('解析清理后照片路径失败:', e);\n          afterPaths = [record.photo_path_after];\n        }\n\n        // 添加完整URL\n        imageData[index].afterImages = afterPaths.map(path => {\n          // 确保路径是字符串\n          const pathStr = String(path);\n          // 如果路径已经是完整URL，则直接返回\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\n            return pathStr;\n          }\n          // 否则拼接基础URL\n          return `${baseUrl}${pathStr}`;\n        });\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\n      }\n    });\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\n    return imageData;\n  } catch (error) {\n    console.error('准备图片数据失败:', error);\n    return {};\n  }\n};","map":{"version":3,"names":["XLSX","Table2Excel","console","log","version","Object","keys","join","parsePhotoPath","path","startsWith","endsWith","parsed","JSON","parse","length","Array","isArray","error","message","stack","imageUrlToBase64","url","Promise","resolve","reject","Error","timestamp","Date","getTime","imageUrl","includes","parsedUrl","URL","protocol","hostname","pathname","origin","urlError","fetch","method","mode","cache","credentials","headers","then","response","status","type","forEach","value","key","stringify","ok","blob","size","warn","reader","FileReader","onload","base64data","result","substring","testImg","Image","width","height","onerror","src","readAsDataURL","catch","img","crossOrigin","canvas","document","createElement","ctx","getContext","drawImage","dataURL","toDataURL","jpegError","pngError","canvasError","imgError","errorCanvas","fillStyle","fillRect","font","textAlign","fillText","errorDataURL","fallbackError","timeout","setTimeout","complete","clearTimeout","exportToExcelWithImages","data","fileName","replace","toISOString","fullFileName","processedData","totalPhotos","successfulPhotos","failedPhotos","rowIndex","row","record","id","beforePhotoData","photo_path_before","photoPaths","firstPath","window","location","afterPhotoData","photo_path_after","push","__beforePhotoData","__afterPhotoData","beforePhoto","afterPhoto","总照片数","成功处理","处理失败","hasImageData","imageDataCount","table","style","display","body","appendChild","thead","headerRow","header","th","textContent","text","tbody","index","tr","td","field","alt","rows","cells","table2excel","imgElements","querySelectorAll","from","idx","naturalWidth","naturalHeight","src长度","export","removeChild","exportError","imgPromises","map","imgIndex","all","imgLoadError","forceExportError","imageData","hasAnyImageData","wb","utils","book_new","exportRows","exportRow","ws","json_to_sheet","book_append_sheet","excelData","write","bookType","Blob","createObjectURL","a","href","download","click","revokeObjectURL","xlsxError","exportToCSV","exportToExcel","enhancedData","newRow","colWidths","wch","excelFileName","wbout","link","csvFileName","csvContent","h","title","item","undefined","cellValue","String","setAttribute","visibility","prepareImageExportData","records","baseUrl","beforeImages","afterImages","beforePaths","e","pathStr","afterPaths"],"sources":["F:/Project/Hazardous-waste-management-system/frontend/src/utils/exportUtils.js"],"sourcesContent":["// 用于导出数据到CSV和Excel的工具函数\r\nimport * as XLSX from 'xlsx';\r\nimport Table2Excel from 'js-table2excel';\r\n// import { saveAs } from 'file-saver';\r\n\r\n// 检查XLSX库是否正确加载\r\nconsole.log('XLSX库版本:', XLSX.version);\r\nconsole.log('XLSX库可用方法:', Object.keys(XLSX).join(', '));\r\n\r\n// 解析照片路径\r\nconst parsePhotoPath = (path) => {\r\n  console.log('【照片处理】开始解析照片路径:', path);\r\n  console.log('【照片处理】照片路径类型:', typeof path);\r\n  \r\n  if (!path) {\r\n    console.log('【照片处理】照片路径为空，返回空数组');\r\n    return [];\r\n  }\r\n  \r\n  try {\r\n    // 尝试解析为JSON\r\n    if (typeof path === 'string' && path.startsWith('[') && path.endsWith(']')) {\r\n      console.log('【照片处理】照片路径是JSON格式，尝试解析');\r\n      const parsed = JSON.parse(path);\r\n      console.log('【照片处理】JSON解析结果:', parsed);\r\n      console.log('【照片处理】解析后的照片路径数量:', parsed.length);\r\n      return parsed;\r\n    }\r\n    \r\n    // 如果是数组，直接返回\r\n    if (Array.isArray(path)) {\r\n      console.log('【照片处理】照片路径已经是数组格式:', path);\r\n      console.log('【照片处理】照片路径数量:', path.length);\r\n      return path;\r\n    }\r\n    \r\n    // 如果不是JSON格式，则将其作为单个路径返回\r\n    console.log('【照片处理】照片路径不是JSON格式，作为单个路径返回:', [path]);\r\n    return [path];\r\n  } catch (error) {\r\n    console.error('【照片处理】解析照片路径失败:', error);\r\n    console.error('【照片处理】错误详情:', error.message);\r\n    console.error('【照片处理】错误堆栈:', error.stack);\r\n    // 如果解析失败，将其作为单个路径返回\r\n    console.log('【照片处理】解析失败，作为单个路径返回:', [path]);\r\n    return [path];\r\n  }\r\n};\r\n\r\n// 将图片URL转换为Base64\r\nconst imageUrlToBase64 = (url) => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log('【照片处理】开始将图片URL转换为Base64');\r\n    console.log('【照片处理】原始URL:', url);\r\n    \r\n    // 验证URL\r\n    if (!url) {\r\n      const error = new Error('图片URL为空');\r\n      console.error('【照片处理】图片URL为空，转换失败');\r\n      reject(error);\r\n      return;\r\n    }\r\n    \r\n    // 添加时间戳避免缓存\r\n    const timestamp = new Date().getTime();\r\n    let imageUrl = url;\r\n    \r\n    // 如果URL包含?，则添加&timestamp=，否则添加?timestamp=\r\n    if (url.includes('?')) {\r\n      imageUrl = `${url}&_t=${timestamp}`;\r\n    } else {\r\n      imageUrl = `${url}?_t=${timestamp}`;\r\n    }\r\n    \r\n    console.log('【照片处理】添加时间戳后的URL:', imageUrl);\r\n    \r\n    // 尝试解析URL，检查是否有效\r\n    try {\r\n      const parsedUrl = new URL(imageUrl);\r\n      console.log('【照片处理】URL解析成功:', {\r\n        protocol: parsedUrl.protocol,\r\n        hostname: parsedUrl.hostname,\r\n        pathname: parsedUrl.pathname,\r\n        origin: parsedUrl.origin\r\n      });\r\n    } catch (urlError) {\r\n      console.error('【照片处理】URL解析失败:', urlError.message);\r\n      // 继续尝试，因为有些相对路径可能在fetch中仍然有效\r\n    }\r\n    \r\n    // 使用fetch API获取图片\r\n    console.log('【照片处理】开始使用fetch获取图片');\r\n    fetch(imageUrl, {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Cache-Control': 'no-cache',\r\n        'Pragma': 'no-cache'\r\n      }\r\n    })\r\n    .then(response => {\r\n      console.log('【照片处理】fetch响应状态:', response.status);\r\n      console.log('【照片处理】fetch响应类型:', response.type);\r\n      console.log('【照片处理】fetch响应URL:', response.url);\r\n      \r\n      // 打印所有响应头\r\n      const headers = {};\r\n      response.headers.forEach((value, key) => {\r\n        headers[key] = value;\r\n      });\r\n      console.log('【照片处理】fetch响应头:', JSON.stringify(headers));\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP错误，状态码: ${response.status}`);\r\n      }\r\n      \r\n      console.log('【照片处理】fetch响应成功，开始获取blob');\r\n      return response.blob();\r\n    })\r\n    .then(blob => {\r\n      console.log('【照片处理】获取到图片blob数据');\r\n      console.log('【照片处理】blob类型:', blob.type);\r\n      console.log('【照片处理】blob大小:', blob.size, 'bytes');\r\n      \r\n      // 检查blob是否为空或太小\r\n      if (blob.size < 100) {\r\n        console.warn('【照片处理】警告: blob数据太小，可能不是有效的图片');\r\n      }\r\n      \r\n      // 使用FileReader将blob转换为Base64\r\n      const reader = new FileReader();\r\n      console.log('【照片处理】创建FileReader对象，准备读取blob');\r\n      \r\n      reader.onload = () => {\r\n        const base64data = reader.result;\r\n        console.log('【照片处理】FileReader读取完成，获取到Base64数据');\r\n        console.log('【照片处理】Base64数据长度:', base64data.length);\r\n        console.log('【照片处理】Base64数据前100个字符:', base64data.substring(0, 100) + '...');\r\n        \r\n        // 验证Base64数据是否有效\r\n        if (!base64data || base64data.length < 100) {\r\n          console.error('【照片处理】Base64数据无效或太短');\r\n          reject(new Error('Base64数据无效'));\r\n          return;\r\n        }\r\n        \r\n        // 检查Base64数据格式是否正确\r\n        if (!base64data.startsWith('data:image/')) {\r\n          console.warn('【照片处理】警告: Base64数据不是标准的图片格式');\r\n        }\r\n        \r\n        // 创建一个Image对象来验证Base64数据\r\n        const testImg = new Image();\r\n        testImg.onload = () => {\r\n          console.log('【照片处理】Base64数据验证成功，图片尺寸:', testImg.width, 'x', testImg.height);\r\n          resolve(base64data);\r\n        };\r\n        \r\n        testImg.onerror = () => {\r\n          console.error('【照片处理】Base64数据验证失败，无法加载图片');\r\n          // 尽管验证失败，仍然返回数据，让后续处理决定是否使用\r\n          resolve(base64data);\r\n        };\r\n        \r\n        testImg.src = base64data;\r\n      };\r\n      \r\n      reader.onerror = (error) => {\r\n        console.error('【照片处理】FileReader读取失败:', error);\r\n        console.error('【照片处理】错误详情:', error.message);\r\n        reject(new Error('FileReader读取失败'));\r\n      };\r\n      \r\n      console.log('【照片处理】开始使用FileReader读取blob');\r\n      reader.readAsDataURL(blob);\r\n    })\r\n    .catch(error => {\r\n      console.error('【照片处理】fetch或处理过程中出错:', error);\r\n      console.error('【照片处理】错误详情:', error.message);\r\n      console.error('【照片处理】错误堆栈:', error.stack);\r\n      \r\n      // 尝试使用Image对象作为备选方案\r\n      console.log('【照片处理】尝试使用Image对象作为备选方案');\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous';\r\n      \r\n      img.onload = () => {\r\n        console.log('【照片处理】Image对象加载成功');\r\n        console.log('【照片处理】图片尺寸:', img.width, 'x', img.height);\r\n        \r\n        try {\r\n          // 创建canvas并绘制图片\r\n          const canvas = document.createElement('canvas');\r\n          canvas.width = img.width;\r\n          canvas.height = img.height;\r\n          console.log('【照片处理】创建Canvas元素，尺寸:', canvas.width, 'x', canvas.height);\r\n          \r\n          const ctx = canvas.getContext('2d');\r\n          ctx.drawImage(img, 0, 0);\r\n          console.log('【照片处理】图片已绘制到Canvas');\r\n          \r\n          // 将canvas内容转换为Base64\r\n          // 尝试不同的格式\r\n          let dataURL;\r\n          try {\r\n            dataURL = canvas.toDataURL('image/jpeg', 0.8);\r\n            console.log('【照片处理】Canvas转换为JPEG Base64数据成功');\r\n          } catch (jpegError) {\r\n            console.error('【照片处理】JPEG转换失败，尝试PNG:', jpegError.message);\r\n            try {\r\n              dataURL = canvas.toDataURL('image/png');\r\n              console.log('【照片处理】Canvas转换为PNG Base64数据成功');\r\n            } catch (pngError) {\r\n              console.error('【照片处理】PNG转换也失败:', pngError.message);\r\n              throw pngError;\r\n            }\r\n          }\r\n          \r\n          console.log('【照片处理】Base64数据长度:', dataURL.length);\r\n          console.log('【照片处理】Base64数据前100个字符:', dataURL.substring(0, 100) + '...');\r\n          \r\n          resolve(dataURL);\r\n        } catch (canvasError) {\r\n          console.error('【照片处理】Canvas处理失败:', canvasError);\r\n          console.error('【照片处理】错误详情:', canvasError.message);\r\n          console.error('【照片处理】错误堆栈:', canvasError.stack);\r\n          reject(canvasError);\r\n        }\r\n      };\r\n      \r\n      img.onerror = (imgError) => {\r\n        console.error('【照片处理】Image对象加载失败:', imgError);\r\n        console.error('【照片处理】错误详情:', imgError.message);\r\n        console.error('【照片处理】所有尝试均失败，无法加载图片:', url);\r\n        \r\n        // 创建一个简单的错误图片作为替代\r\n        try {\r\n          console.log('【照片处理】尝试创建错误占位图片');\r\n          const errorCanvas = document.createElement('canvas');\r\n          errorCanvas.width = 200;\r\n          errorCanvas.height = 200;\r\n          const ctx = errorCanvas.getContext('2d');\r\n          \r\n          // 填充红色背景\r\n          ctx.fillStyle = '#ffeeee';\r\n          ctx.fillRect(0, 0, 200, 200);\r\n          \r\n          // 绘制错误文本\r\n          ctx.fillStyle = '#ff0000';\r\n          ctx.font = '16px Arial';\r\n          ctx.textAlign = 'center';\r\n          ctx.fillText('图片加载失败', 100, 100);\r\n          \r\n          const errorDataURL = errorCanvas.toDataURL('image/png');\r\n          console.log('【照片处理】创建错误占位图片成功');\r\n          resolve(errorDataURL);\r\n        } catch (fallbackError) {\r\n          console.error('【照片处理】创建错误占位图片失败:', fallbackError.message);\r\n          reject(new Error('图片加载失败'));\r\n        }\r\n      };\r\n      \r\n      // 设置超时处理\r\n      const timeout = setTimeout(() => {\r\n        if (!img.complete) {\r\n          console.error('【照片处理】Image对象加载超时');\r\n          img.src = ''; // 取消加载\r\n          reject(new Error('图片加载超时'));\r\n        }\r\n      }, 10000); // 10秒超时\r\n      \r\n      img.onload = function() {\r\n        clearTimeout(timeout);\r\n        this.onload(); // 调用原来的onload\r\n      };\r\n      \r\n      img.onerror = function() {\r\n        clearTimeout(timeout);\r\n        this.onerror(); // 调用原来的onerror\r\n      };\r\n      \r\n      console.log('【照片处理】设置Image对象的src:', imageUrl);\r\n      img.src = imageUrl;\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * 使用js-table2excel将数据导出为Excel文件，包含图片\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n */\r\nexport const exportToExcelWithImages = async (data, fileName, headers) => {\r\n  console.log('=== 【调试】exportToExcelWithImages 函数被调用 ===');\r\n  console.log('【调试】数据条数:', data.length);\r\n  console.log('【调试】headers:', JSON.stringify(headers));\r\n  \r\n  if (!data || data.length === 0) {\r\n    console.error('【调试】导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    console.log('【调试】使用js-table2excel导出Excel，开始处理图片...');\r\n    console.log('【调试】第一条数据示例:', JSON.stringify(data[0]).substring(0, 200) + '...');\r\n    \r\n    // 处理文件名\r\n    fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n    const fullFileName = `${fileName}_${timestamp}`;\r\n    console.log('【调试】导出文件名:', fullFileName);\r\n    \r\n    // 预处理图片，确保所有图片都加载完成\r\n    const processedData = [];\r\n    \r\n    // 记录照片处理结果\r\n    let totalPhotos = 0;\r\n    let successfulPhotos = 0;\r\n    let failedPhotos = 0;\r\n    \r\n    // 逐行处理数据\r\n    for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {\r\n      console.log(`【调试】处理第 ${rowIndex + 1}/${data.length} 条记录...`);\r\n      const row = data[rowIndex];\r\n      const record = row['__original'] || {};\r\n      console.log(`【调试】记录ID: ${record.id || 'unknown'}`);\r\n      console.log(`【调试】记录数据:`, JSON.stringify(record).substring(0, 200) + '...');\r\n      \r\n      // 处理清理前照片\r\n      let beforePhotoData = null;\r\n      if (record.photo_path_before) {\r\n        totalPhotos++;\r\n        console.log(`【调试】记录 ${rowIndex} 清理前照片路径:`, record.photo_path_before);\r\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_before);\r\n        \r\n        const photoPaths = parsePhotoPath(record.photo_path_before);\r\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\r\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`【调试】选择第一张照片:`, firstPath);\r\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\r\n            }\r\n            \r\n            console.log(`【调试】记录 ${rowIndex} 清理前照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`【调试】开始转换清理前照片...`);\r\n              beforePhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`【调试】记录 ${rowIndex} 清理前照片已转换为Base64，长度:`, beforePhotoData ? beforePhotoData.length : 0);\r\n              console.log(`【调试】Base64数据前50个字符:`, beforePhotoData ? beforePhotoData.substring(0, 50) + '...' : 'null');\r\n              \r\n              if (beforePhotoData && beforePhotoData.length > 100) {\r\n                successfulPhotos++;\r\n                console.log(`【调试】记录 ${rowIndex} 清理前照片转换成功`);\r\n              } else {\r\n                failedPhotos++;\r\n                console.error(`【调试】记录 ${rowIndex} 清理前照片转换结果无效`);\r\n              }\r\n            } catch (error) {\r\n              failedPhotos++;\r\n              console.error(`【调试】记录 ${rowIndex} 清理前照片转换失败:`, error);\r\n              console.error('【调试】错误详情:', error.message);\r\n              console.error('【调试】错误堆栈:', error.stack);\r\n            }\r\n          } else {\r\n            failedPhotos++;\r\n            console.error(`【调试】记录 ${rowIndex} 清理前照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          failedPhotos++;\r\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理前照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`【调试】记录 ${rowIndex} 没有清理前照片`);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      let afterPhotoData = null;\r\n      if (record.photo_path_after) {\r\n        totalPhotos++;\r\n        console.log(`【调试】记录 ${rowIndex} 清理后照片路径:`, record.photo_path_after);\r\n        console.log(`【调试】照片路径类型:`, typeof record.photo_path_after);\r\n        \r\n        const photoPaths = parsePhotoPath(record.photo_path_after);\r\n        console.log(`【调试】解析后的照片路径:`, photoPaths);\r\n        console.log(`【调试】解析后的照片路径长度:`, photoPaths.length);\r\n        \r\n        if (photoPaths && photoPaths.length > 0) {\r\n          const firstPath = photoPaths[0];\r\n          console.log(`【调试】选择第一张照片:`, firstPath);\r\n          console.log(`【调试】照片路径类型:`, typeof firstPath);\r\n          \r\n          // 检查路径格式\r\n          if (typeof firstPath === 'string') {\r\n            // 构建完整URL\r\n            let imageUrl = firstPath;\r\n            \r\n            // 如果是相对路径，添加origin\r\n            if (firstPath.startsWith('/')) {\r\n              imageUrl = window.location.origin + firstPath;\r\n              console.log(`【调试】照片是相对路径，添加origin:`, window.location.origin);\r\n            }\r\n            \r\n            console.log(`【调试】记录 ${rowIndex} 清理后照片完整URL:`, imageUrl);\r\n            \r\n            try {\r\n              console.log(`【调试】开始转换清理后照片...`);\r\n              afterPhotoData = await imageUrlToBase64(imageUrl);\r\n              console.log(`【调试】记录 ${rowIndex} 清理后照片已转换为Base64，长度:`, afterPhotoData ? afterPhotoData.length : 0);\r\n              console.log(`【调试】Base64数据前50个字符:`, afterPhotoData ? afterPhotoData.substring(0, 50) + '...' : 'null');\r\n              \r\n              if (afterPhotoData && afterPhotoData.length > 100) {\r\n                successfulPhotos++;\r\n                console.log(`【调试】记录 ${rowIndex} 清理后照片转换成功`);\r\n              } else {\r\n                failedPhotos++;\r\n                console.error(`【调试】记录 ${rowIndex} 清理后照片转换结果无效`);\r\n              }\r\n            } catch (error) {\r\n              failedPhotos++;\r\n              console.error(`【调试】记录 ${rowIndex} 清理后照片转换失败:`, error);\r\n              console.error('【调试】错误详情:', error.message);\r\n              console.error('【调试】错误堆栈:', error.stack);\r\n            }\r\n          } else {\r\n            failedPhotos++;\r\n            console.error(`【调试】记录 ${rowIndex} 清理后照片路径格式错误:`, firstPath);\r\n          }\r\n        } else {\r\n          failedPhotos++;\r\n          console.log(`【调试】记录 ${rowIndex} 没有有效的清理后照片路径`);\r\n        }\r\n      } else {\r\n        console.log(`【调试】记录 ${rowIndex} 没有清理后照片`);\r\n      }\r\n      \r\n      // 保存处理后的数据\r\n      processedData.push({\r\n        ...row,\r\n        __beforePhotoData: beforePhotoData,\r\n        __afterPhotoData: afterPhotoData\r\n      });\r\n      console.log(`【调试】记录 ${rowIndex} 处理完成，是否有照片数据:`, {\r\n        beforePhoto: !!beforePhotoData,\r\n        afterPhoto: !!afterPhotoData\r\n      });\r\n    }\r\n    \r\n    console.log('【调试】所有图片处理完成，开始创建Excel...');\r\n    console.log('【调试】处理后的数据条数:', processedData.length);\r\n    console.log('【调试】照片处理统计:', {\r\n      总照片数: totalPhotos,\r\n      成功处理: successfulPhotos,\r\n      处理失败: failedPhotos\r\n    });\r\n    \r\n    // 检查是否有任何图片数据\r\n    let hasImageData = false;\r\n    let imageDataCount = 0;\r\n    for (const row of processedData) {\r\n      if (row.__beforePhotoData || row.__afterPhotoData) {\r\n        hasImageData = true;\r\n        imageDataCount++;\r\n      }\r\n    }\r\n    \r\n    console.log('【调试】是否有图片数据:', hasImageData ? '是' : '否');\r\n    console.log('【调试】包含图片的记录数:', imageDataCount);\r\n    \r\n    if (!hasImageData) {\r\n      console.warn('【调试】没有找到任何有效的图片数据，但仍将尝试使用图片导出模式');\r\n    }\r\n    \r\n    // 创建一个临时表格元素\r\n    const table = document.createElement('table');\r\n    table.style.display = 'none';\r\n    document.body.appendChild(table);\r\n    console.log('【调试】创建临时表格元素');\r\n    \r\n    // 创建表头\r\n    const thead = document.createElement('thead');\r\n    const headerRow = document.createElement('tr');\r\n    \r\n    headers.forEach(header => {\r\n      const th = document.createElement('th');\r\n      th.textContent = header.text;\r\n      headerRow.appendChild(th);\r\n      console.log(`【调试】添加表头: ${header.text}`);\r\n    });\r\n    \r\n    thead.appendChild(headerRow);\r\n    table.appendChild(thead);\r\n    console.log('【调试】表头创建完成');\r\n    \r\n    // 创建表体\r\n    const tbody = document.createElement('tbody');\r\n    \r\n    // 添加数据行\r\n    processedData.forEach((row, index) => {\r\n      console.log(`【调试】创建第 ${index + 1}/${processedData.length} 行...`);\r\n      const tr = document.createElement('tr');\r\n      \r\n      headers.forEach(header => {\r\n        const td = document.createElement('td');\r\n        \r\n        // 处理清理前照片列\r\n        if (header.field === '清理前照片') {\r\n          if (row.__beforePhotoData) {\r\n            console.log(`【调试】添加第 ${index + 1} 行清理前照片，Base64长度:`, row.__beforePhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__beforePhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            img.alt = '清理前照片';\r\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__beforePhotoData.length);\r\n            \r\n            // 确保图片已加载\r\n            if (!img.complete) {\r\n              console.log('【调试】图片尚未加载完成，添加onload事件');\r\n              img.onload = () => {\r\n                console.log(`【调试】第 ${index + 1} 行清理前照片加载完成`);\r\n              };\r\n              img.onerror = (error) => {\r\n                console.error(`【调试】第 ${index + 1} 行清理前照片加载失败:`, error);\r\n                td.textContent = '图片加载失败';\r\n              };\r\n            } else {\r\n              console.log(`【调试】第 ${index + 1} 行清理前照片已加载完成`);\r\n            }\r\n            \r\n            td.appendChild(img);\r\n            console.log(`【调试】第 ${index + 1} 行清理前照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`【调试】第 ${index + 1} 行没有清理前照片`);\r\n          }\r\n        }\r\n        // 处理清理后照片列 \r\n        else if (header.field === '清理后照片') {\r\n          if (row.__afterPhotoData) {\r\n            console.log(`【调试】添加第 ${index + 1} 行清理后照片，Base64长度:`, row.__afterPhotoData.length);\r\n            // 使用Base64数据创建图片\r\n            const img = document.createElement('img');\r\n            img.src = row.__afterPhotoData;\r\n            img.style.width = '100px';\r\n            img.style.height = '100px';\r\n            img.alt = '清理后照片';\r\n            console.log(`【调试】创建图片元素，设置src长度:`, row.__afterPhotoData.length);\r\n            \r\n            // 确保图片已加载\r\n            if (!img.complete) {\r\n              console.log('【调试】图片尚未加载完成，添加onload事件');\r\n              img.onload = () => {\r\n                console.log(`【调试】第 ${index + 1} 行清理后照片加载完成`);\r\n              };\r\n              img.onerror = (error) => {\r\n                console.error(`【调试】第 ${index + 1} 行清理后照片加载失败:`, error);\r\n                td.textContent = '图片加载失败';\r\n              };\r\n            } else {\r\n              console.log(`【调试】第 ${index + 1} 行清理后照片已加载完成`);\r\n            }\r\n            \r\n            td.appendChild(img);\r\n            console.log(`【调试】第 ${index + 1} 行清理后照片添加成功`);\r\n          } else {\r\n            td.textContent = '无图片';\r\n            console.log(`【调试】第 ${index + 1} 行没有清理后照片`);\r\n          }\r\n        }\r\n        else {\r\n          // 普通文本列\r\n          td.textContent = row[header.field] || '';\r\n          console.log(`【调试】添加第 ${index + 1} 行 ${header.field} 列: ${row[header.field] || '(空)'}`);\r\n        }\r\n        \r\n        tr.appendChild(td);\r\n      });\r\n      \r\n      tbody.appendChild(tr);\r\n      console.log(`【调试】第 ${index + 1} 行创建完成`);\r\n    });\r\n    \r\n    table.appendChild(tbody);\r\n    console.log('【调试】表格创建完成');\r\n    \r\n    // 检查表格内容\r\n    console.log('【调试】表格行数:', table.rows.length);\r\n    console.log('【调试】表格列数:', table.rows[0] ? table.rows[0].cells.length : 0);\r\n    \r\n    // 使用js-table2excel导出\r\n    console.log('【调试】开始使用js-table2excel导出...');\r\n    const table2excel = new Table2Excel();\r\n    console.log('【调试】Table2Excel实例创建成功');\r\n\r\n    // 确保所有图片都已加载完成\r\n    console.log('【调试】检查表格中的图片...');\r\n    const imgElements = table.querySelectorAll('img');\r\n    console.log(`【调试】表格中共有 ${imgElements.length} 张图片`);\r\n    \r\n    // 检查每个图片的状态\r\n    Array.from(imgElements).forEach((img, idx) => {\r\n      console.log(`【调试】图片 ${idx + 1} 状态:`, {\r\n        complete: img.complete,\r\n        naturalWidth: img.naturalWidth,\r\n        naturalHeight: img.naturalHeight,\r\n        src长度: img.src.length\r\n      });\r\n    });\r\n\r\n    // 如果没有图片，直接导出\r\n    if (imgElements.length === 0) {\r\n      console.log('【调试】表格中没有图片，直接导出');\r\n      try {\r\n        console.log('【调试】调用export方法...');\r\n        table2excel.export(table, fullFileName);\r\n        console.log('【调试】export方法调用成功');\r\n        \r\n        // 导出完成后移除临时表格\r\n        document.body.removeChild(table);\r\n        console.log('【调试】临时表格已移除');\r\n        \r\n        return true;\r\n      } catch (exportError) {\r\n        console.error('【调试】export方法调用失败:', exportError);\r\n        console.error('【调试】错误详情:', exportError.message);\r\n        console.error('【调试】错误堆栈:', exportError.stack);\r\n        \r\n        // 导出完成后移除临时表格\r\n        document.body.removeChild(table);\r\n        console.log('【调试】临时表格已移除');\r\n        \r\n        throw exportError;\r\n      }\r\n    } else {\r\n      // 等待所有图片加载完成\r\n      console.log('【调试】等待所有图片加载完成后再导出');\r\n      \r\n      // 创建一个Promise数组，每个Promise对应一个图片的加载\r\n      const imgPromises = Array.from(imgElements).map((img, imgIndex) => {\r\n        return new Promise((resolve) => {\r\n          if (img.complete) {\r\n            console.log(`【调试】图片 ${imgIndex + 1} 已加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\r\n            resolve();\r\n          } else {\r\n            console.log(`【调试】等待图片 ${imgIndex + 1} 加载...`);\r\n            img.onload = () => {\r\n              console.log(`【调试】图片 ${imgIndex + 1} 加载完成，尺寸:`, img.naturalWidth, 'x', img.naturalHeight);\r\n              resolve();\r\n            };\r\n            img.onerror = (error) => {\r\n              console.error(`【调试】图片 ${imgIndex + 1} 加载失败:`, error);\r\n              console.error('【调试】错误详情:', error ? error.message : 'Unknown error');\r\n              resolve(); // 即使失败也继续导出\r\n            };\r\n            \r\n            // 添加超时处理\r\n            setTimeout(() => {\r\n              if (!img.complete) {\r\n                console.error(`【调试】图片 ${imgIndex + 1} 加载超时`);\r\n                resolve(); // 超时也继续导出\r\n              }\r\n            }, 5000); // 5秒超时\r\n          }\r\n        });\r\n      });\r\n      \r\n      // 等待所有图片加载完成或超时\r\n      try {\r\n        await Promise.all(imgPromises);\r\n        console.log('【调试】所有图片加载完成或超时，开始导出');\r\n        \r\n        // 再次检查图片状态\r\n        console.log('【调试】导出前最终检查图片状态:');\r\n        Array.from(imgElements).forEach((img, idx) => {\r\n          console.log(`【调试】图片 ${idx + 1} 最终状态:`, {\r\n            complete: img.complete,\r\n            naturalWidth: img.naturalWidth,\r\n            naturalHeight: img.naturalHeight,\r\n            src长度: img.src.length\r\n          });\r\n        });\r\n        \r\n        try {\r\n          console.log('【调试】调用export方法...');\r\n          table2excel.export(table, fullFileName);\r\n          console.log('【调试】export方法调用成功');\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          return true;\r\n        } catch (exportError) {\r\n          console.error('【调试】export方法调用失败:', exportError);\r\n          console.error('【调试】错误详情:', exportError.message);\r\n          console.error('【调试】错误堆栈:', exportError.stack);\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          throw exportError;\r\n        }\r\n      } catch (imgLoadError) {\r\n        console.error('【调试】等待图片加载过程中发生错误:', imgLoadError);\r\n        console.error('【调试】错误详情:', imgLoadError.message);\r\n        console.error('【调试】错误堆栈:', imgLoadError.stack);\r\n        \r\n        try {\r\n          console.log('【调试】尝试强制导出...');\r\n          table2excel.export(table, fullFileName);\r\n          console.log('【调试】强制导出成功');\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          return true;\r\n        } catch (forceExportError) {\r\n          console.error('【调试】强制导出失败:', forceExportError);\r\n          console.error('【调试】错误详情:', forceExportError.message);\r\n          console.error('【调试】错误堆栈:', forceExportError.stack);\r\n          \r\n          // 导出完成后移除临时表格\r\n          document.body.removeChild(table);\r\n          console.log('【调试】临时表格已移除');\r\n          \r\n          throw forceExportError;\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('使用js-table2excel导出Excel失败:', error);\r\n    console.error('错误详情:', error.message);\r\n    console.error('错误堆栈:', error.stack);\r\n    \r\n    // 创建一个包含图片数据的对象，用于传递给exportToExcel\r\n    const imageData = {};\r\n    let hasAnyImageData = false;\r\n    \r\n    // 从data中提取图片数据\r\n    data.forEach((row, index) => {\r\n      const record = row['__original'] || {};\r\n      if (record.photo_path_before || record.photo_path_after) {\r\n        imageData[index] = {\r\n          beforePhoto: record.photo_path_before,\r\n          afterPhoto: record.photo_path_after\r\n        };\r\n        hasAnyImageData = true;\r\n      }\r\n    });\r\n    \r\n    console.log('【调试】准备回退到XLSX导出，是否有图片数据:', hasAnyImageData ? '是' : '否');\r\n    console.log('【调试】图片数据对象:', JSON.stringify(imageData));\r\n    \r\n    // 尝试使用XLSX导出，传递图片数据\r\n    console.log('尝试使用XLSX导出（包含图片路径）...');\r\n    try {\r\n      // 直接在这里实现导出逻辑，而不是调用exportToExcel\r\n      console.log('创建工作簿...');\r\n      const wb = XLSX.utils.book_new();\r\n      \r\n      // 准备数据\r\n      const exportRows = data.map(row => {\r\n        const exportRow = {};\r\n        headers.forEach(header => {\r\n          exportRow[header.text] = row[header.field] || '';\r\n        });\r\n        return exportRow;\r\n      });\r\n      \r\n      console.log('创建工作表...');\r\n      const ws = XLSX.utils.json_to_sheet(exportRows);\r\n      \r\n      // 添加工作表到工作簿\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\r\n      \r\n      // 处理文件名\r\n      const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n      const fullFileName = `${fileName}_${timestamp}`;\r\n      \r\n      // 导出\r\n      console.log('导出Excel文件...');\r\n      const excelData = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n      \r\n      // 创建Blob\r\n      const blob = new Blob([excelData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      \r\n      // 创建下载链接\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${fullFileName}.xlsx`;\r\n      \r\n      // 触发下载\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // 清理\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n      }, 0);\r\n      \r\n      console.log('XLSX导出成功（包含图片路径）');\r\n      return true;\r\n    } catch (xlsxError) {\r\n      console.error('XLSX导出失败:', xlsxError);\r\n      \r\n      // 最后尝试CSV导出\r\n      console.log('尝试CSV导出...');\r\n      return exportToCSV(data, fileName, headers);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 将数据导出为Excel文件\r\n * @param {Array} data - 要导出的数据数组\r\n * @param {String} fileName - 导出的文件名（不含后缀）\r\n * @param {Array} headers - 要导出的列标题和对应字段名\r\n * @param {Object} imageData - 图片数据对象（可选）\r\n */\r\nexport const exportToExcel = (data, fileName, headers, imageData = null) => {\r\n  if (!data || data.length === 0) {\r\n    console.error('导出失败：没有数据');\r\n    return false;\r\n  }\r\n\r\n  // 处理文件名\r\n  fileName = fileName.replace(/[\\\\/:*?\"<>|]/g, '_');\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  \r\n  console.log('导出函数被调用，数据条数:', data.length);\r\n  console.log('是否有图片数据:', imageData ? '是' : '否');\r\n  if (imageData) {\r\n    console.log('图片数据条数:', Object.keys(imageData).length);\r\n  }\r\n  \r\n  // 强制使用XLSX导出Excel（不管是否有图片）\r\n  try {\r\n    console.log('尝试导出Excel...');\r\n    \r\n    // 创建工作簿\r\n    const wb = XLSX.utils.book_new();\r\n    console.log('工作簿创建成功');\r\n    \r\n    // 准备数据\r\n    let enhancedData = [];\r\n    \r\n    // 如果有图片数据，添加图片链接\r\n    if (imageData && Object.keys(imageData).length > 0) {\r\n      enhancedData = data.map((row, index) => {\r\n        const newRow = {...row};\r\n        \r\n        // 检查是否有图片数据\r\n        if (imageData[index]) {\r\n          // 添加图片链接\r\n          if (imageData[index][7] && imageData[index][7].url) {\r\n            newRow['清理前照片'] = imageData[index][7].url;\r\n          }\r\n          if (imageData[index][8] && imageData[index][8].url) {\r\n            newRow['清理后照片'] = imageData[index][8].url;\r\n          }\r\n        }\r\n        \r\n        return newRow;\r\n      });\r\n    } else {\r\n      enhancedData = data;\r\n    }\r\n    \r\n    console.log('数据准备完成，开始创建工作表');\r\n    \r\n    // 创建工作表\r\n    const ws = XLSX.utils.json_to_sheet(enhancedData);\r\n    \r\n    console.log('工作表创建成功');\r\n    \r\n    // 设置列宽\r\n    const colWidths = headers.map(() => ({ wch: 20 }));\r\n    ws['!cols'] = colWidths;\r\n    \r\n    // 添加工作表到工作簿\r\n    XLSX.utils.book_append_sheet(wb, ws, '危险废物记录');\r\n    console.log('工作表已添加到工作簿');\r\n    \r\n    // 导出Excel文件\r\n    const excelFileName = `${fileName}_${timestamp}.xlsx`;\r\n    console.log('准备导出Excel文件:', excelFileName);\r\n    \r\n    // 使用write方法导出\r\n    console.log('使用XLSX.write方法导出...');\r\n    const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    console.log('Excel数据生成成功，大小:', wbout.length, '字节');\r\n    \r\n    // 创建Blob对象\r\n    const blob = new Blob([wbout], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    });\r\n    console.log('Blob创建成功，大小:', blob.size, '字节');\r\n    \r\n    // 创建下载链接\r\n    const url = URL.createObjectURL(blob);\r\n    console.log('URL创建成功:', url.substring(0, 30) + '...');\r\n    \r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = excelFileName;\r\n    console.log('下载链接创建成功，准备触发点击');\r\n    \r\n    // 触发下载\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('Excel导出成功');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('导出Excel失败，错误详情:', error);\r\n    console.log('回退到CSV导出');\r\n    // 如果Excel导出失败，回退到CSV导出\r\n    exportToCSV(data, fileName, headers);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * 导出为CSV文件\r\n * @param {Array} data - 数据数组\r\n * @param {String} fileName - 文件名\r\n * @param {Array} headers - 表头配置\r\n */\r\nexport const exportToCSV = (data, fileName, headers) => {\r\n  // 处理文件名\r\n  const timestamp = new Date().toISOString().replace(/[-:.]/g, '').substring(0, 14);\r\n  const csvFileName = `${fileName}_${timestamp}.csv`;\r\n  \r\n  // 准备CSV内容\r\n  let csvContent = '\\uFEFF'; // 添加BOM以支持中文\r\n  \r\n  // 添加表头\r\n  const headerRow = headers.map(h => `\"${h.title}\"`).join(',');\r\n  csvContent += headerRow + '\\r\\n';\r\n  \r\n  // 添加数据行\r\n  data.forEach(item => {\r\n    const row = headers.map(header => {\r\n      const value = item[header.field];\r\n      \r\n      // 处理null和undefined\r\n      if (value === null || value === undefined) {\r\n        return '';\r\n      }\r\n      \r\n      // 处理数字\r\n      if (header.type === 'number' || typeof value === 'number') {\r\n        return value;\r\n      }\r\n      \r\n      // 处理字符串，特别是包含逗号、引号或换行符的字符串\r\n      let cellValue = String(value);\r\n      if (cellValue.includes(',') || cellValue.includes('\"') || cellValue.includes('\\n')) {\r\n        cellValue = cellValue.replace(/\"/g, '\"\"'); // 将引号替换为两个引号\r\n        cellValue = `\"${cellValue}\"`; // 用引号包裹整个值\r\n      }\r\n      \r\n      return cellValue;\r\n    }).join(',');\r\n    \r\n    csvContent += row + '\\r\\n';\r\n  });\r\n  \r\n  // 创建下载链接\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', csvFileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n  \r\n  console.log('CSV导出成功');\r\n};\r\n\r\n/**\r\n * 准备图片数据用于导出\r\n * @param {Array} records - 记录数据\r\n * @param {String} baseUrl - 基础URL\r\n * @returns {Object} 图片数据对象\r\n */\r\nexport const prepareImageExportData = async (records, baseUrl) => {\r\n  const imageData = {};\r\n  \r\n  try {\r\n    console.log('准备图片数据，记录数:', records.length);\r\n    console.log('基础URL:', baseUrl);\r\n    \r\n    // 处理每条记录的图片\r\n    records.forEach((record, index) => {\r\n      imageData[index] = {\r\n        beforeImages: [],\r\n        afterImages: []\r\n      };\r\n      \r\n      // 处理清理前照片\r\n      if (record.photo_path_before) {\r\n        console.log(`记录 ${index} 清理前照片路径:`, record.photo_path_before);\r\n        \r\n        let beforePaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_before === 'string' && record.photo_path_before.startsWith('[')) {\r\n            beforePaths = JSON.parse(record.photo_path_before);\r\n            console.log(`记录 ${index} 解析后的清理前照片路径:`, beforePaths);\r\n          } else {\r\n            beforePaths = [record.photo_path_before];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理前照片路径失败:', e);\r\n          beforePaths = [record.photo_path_before];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].beforeImages = beforePaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理前照片URL:`, imageData[index].beforeImages);\r\n      }\r\n      \r\n      // 处理清理后照片\r\n      if (record.photo_path_after) {\r\n        console.log(`记录 ${index} 清理后照片路径:`, record.photo_path_after);\r\n        \r\n        let afterPaths = [];\r\n        try {\r\n          // 尝试解析JSON\r\n          if (typeof record.photo_path_after === 'string' && record.photo_path_after.startsWith('[')) {\r\n            afterPaths = JSON.parse(record.photo_path_after);\r\n            console.log(`记录 ${index} 解析后的清理后照片路径:`, afterPaths);\r\n          } else {\r\n            afterPaths = [record.photo_path_after];\r\n          }\r\n        } catch (e) {\r\n          console.error('解析清理后照片路径失败:', e);\r\n          afterPaths = [record.photo_path_after];\r\n        }\r\n        \r\n        // 添加完整URL\r\n        imageData[index].afterImages = afterPaths.map(path => {\r\n          // 确保路径是字符串\r\n          const pathStr = String(path);\r\n          // 如果路径已经是完整URL，则直接返回\r\n          if (pathStr.startsWith('http://') || pathStr.startsWith('https://')) {\r\n            return pathStr;\r\n          }\r\n          // 否则拼接基础URL\r\n          return `${baseUrl}${pathStr}`;\r\n        });\r\n        \r\n        console.log(`记录 ${index} 完整的清理后照片URL:`, imageData[index].afterImages);\r\n      }\r\n    });\r\n    \r\n    console.log('图片数据准备完成，总记录数:', Object.keys(imageData).length);\r\n    return imageData;\r\n  } catch (error) {\r\n    console.error('准备图片数据失败:', error);\r\n    return {};\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}