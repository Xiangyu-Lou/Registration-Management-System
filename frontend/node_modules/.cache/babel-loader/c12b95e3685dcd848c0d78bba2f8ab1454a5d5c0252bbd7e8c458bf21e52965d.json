{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport auth from '../store/auth';\nimport apiConfig from './api';\nimport router from '../router';\n\n// 创建 axios 实例\nconst axiosInstance = axios.create({\n  baseURL: apiConfig.baseURL,\n  timeout: 300000,\n  // 300秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  maxContentLength: 50 * 1024 * 1024,\n  // 50MB\n  maxBodyLength: 50 * 1024 * 1024 // 50MB\n});\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(config => {\n  // 从 localStorage 或 sessionStorage 获取 token\n  const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 检查是否是登录请求\n        if (error.config.url.includes('/api/login')) {\n          // 登录失败，不在这里显示错误信息，让组件自己处理\n          return Promise.reject(error);\n        } else {\n          // token 过期或无效，清除登录状态并跳转到登录页\n          auth.logout();\n          ElMessage.error('登录已过期，请重新登录');\n          router.push('/login');\n        }\n        break;\n      case 403:\n        ElMessage.error('没有权限访问该资源');\n        break;\n      case 404:\n        ElMessage.error('请求的资源不存在');\n        break;\n      case 500:\n        ElMessage.error('服务器错误，请稍后重试');\n        break;\n      default:\n        ElMessage.error(error.response.data?.error || '请求失败');\n    }\n  } else if (error.request) {\n    ElMessage.error('网络错误，请检查网络连接');\n  } else {\n    ElMessage.error('请求配置错误');\n  }\n  return Promise.reject(error);\n});\n\n// HTTP服务\nconst httpService = {\n  // GET请求\n  get(endpoint, params = {}) {\n    return axiosInstance.get(endpoint, {\n      params\n    });\n  },\n  // POST请求\n  post(endpoint, data = {}) {\n    return axiosInstance.post(endpoint, data);\n  },\n  // 带文件上传的POST请求\n  postForm(endpoint, formData, onUploadProgress) {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 300000,\n      // 300秒超时\n      maxContentLength: 50 * 1024 * 1024,\n      // 50MB\n      maxBodyLength: 50 * 1024 * 1024 // 50MB\n    };\n\n    // 只有当onUploadProgress是函数时才添加到配置中\n    if (typeof onUploadProgress === 'function') {\n      config.onUploadProgress = onUploadProgress;\n    }\n    return axiosInstance.post(endpoint, formData, config);\n  },\n  // PUT请求\n  put(endpoint, data = {}) {\n    return axiosInstance.put(endpoint, data);\n  },\n  // 带文件上传的PUT请求\n  putForm(endpoint, formData, onUploadProgress) {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 300000,\n      // 300秒超时\n      maxContentLength: 50 * 1024 * 1024,\n      // 50MB\n      maxBodyLength: 50 * 1024 * 1024 // 50MB\n    };\n\n    // 只有当onUploadProgress是函数时才添加到配置中\n    if (typeof onUploadProgress === 'function') {\n      config.onUploadProgress = onUploadProgress;\n    }\n    return axiosInstance.put(endpoint, formData, config);\n  },\n  // DELETE请求\n  delete(endpoint) {\n    return axiosInstance.delete(endpoint);\n  },\n  // 导出 axios 实例的 defaults\n  defaults: axiosInstance.defaults\n};\nexport default httpService;","map":{"version":3,"names":["axios","ElMessage","auth","apiConfig","router","axiosInstance","create","baseURL","timeout","headers","maxContentLength","maxBodyLength","interceptors","request","use","config","token","localStorage","getItem","sessionStorage","Authorization","error","console","Promise","reject","response","status","url","includes","logout","push","data","httpService","get","endpoint","params","post","postForm","formData","onUploadProgress","put","putForm","delete","defaults"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/config/httpService.js"],"sourcesContent":["import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport auth from '../store/auth';\nimport apiConfig from './api';\nimport router from '../router';\n\n// 创建 axios 实例\nconst axiosInstance = axios.create({\n  baseURL: apiConfig.baseURL,\n  timeout: 300000, // 300秒超时\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  maxContentLength: 50 * 1024 * 1024, // 50MB\n  maxBodyLength: 50 * 1024 * 1024 // 50MB\n});\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(\n  config => {\n    // 从 localStorage 或 sessionStorage 获取 token\n    const token = localStorage.getItem('token') || sessionStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          // 检查是否是登录请求\n          if (error.config.url.includes('/api/login')) {\n            // 登录失败，不在这里显示错误信息，让组件自己处理\n            return Promise.reject(error);\n          } else {\n            // token 过期或无效，清除登录状态并跳转到登录页\n            auth.logout();\n            ElMessage.error('登录已过期，请重新登录');\n            router.push('/login');\n          }\n          break;\n        case 403:\n          ElMessage.error('没有权限访问该资源');\n          break;\n        case 404:\n          ElMessage.error('请求的资源不存在');\n          break;\n        case 500:\n          ElMessage.error('服务器错误，请稍后重试');\n          break;\n        default:\n          ElMessage.error(error.response.data?.error || '请求失败');\n      }\n    } else if (error.request) {\n      ElMessage.error('网络错误，请检查网络连接');\n    } else {\n      ElMessage.error('请求配置错误');\n    }\n    return Promise.reject(error);\n  }\n);\n\n// HTTP服务\nconst httpService = {\n  // GET请求\n  get(endpoint, params = {}) {\n    return axiosInstance.get(endpoint, { params });\n  },\n  \n  // POST请求\n  post(endpoint, data = {}) {\n    return axiosInstance.post(endpoint, data);\n  },\n  \n  // 带文件上传的POST请求\n  postForm(endpoint, formData, onUploadProgress) {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 300000, // 300秒超时\n      maxContentLength: 50 * 1024 * 1024, // 50MB\n      maxBodyLength: 50 * 1024 * 1024 // 50MB\n    };\n    \n    // 只有当onUploadProgress是函数时才添加到配置中\n    if (typeof onUploadProgress === 'function') {\n      config.onUploadProgress = onUploadProgress;\n    }\n    \n    return axiosInstance.post(endpoint, formData, config);\n  },\n  \n  // PUT请求\n  put(endpoint, data = {}) {\n    return axiosInstance.put(endpoint, data);\n  },\n  \n  // 带文件上传的PUT请求\n  putForm(endpoint, formData, onUploadProgress) {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      timeout: 300000, // 300秒超时\n      maxContentLength: 50 * 1024 * 1024, // 50MB\n      maxBodyLength: 50 * 1024 * 1024 // 50MB\n    };\n    \n    // 只有当onUploadProgress是函数时才添加到配置中\n    if (typeof onUploadProgress === 'function') {\n      config.onUploadProgress = onUploadProgress;\n    }\n    \n    return axiosInstance.put(endpoint, formData, config);\n  },\n  \n  // DELETE请求\n  delete(endpoint) {\n    return axiosInstance.delete(endpoint);\n  },\n\n  // 导出 axios 实例的 defaults\n  defaults: axiosInstance.defaults\n};\n\nexport default httpService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}