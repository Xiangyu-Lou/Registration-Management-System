{"ast":null,"code":"/**\r\n * 图片处理工具函数\r\n */\n\n/**\r\n * 将图片转换为JPEG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\nexport const convertAndCompressImage = (file, quality = 0.5) => {\n  return new Promise((resolve, reject) => {\n    // 创建图片对象\n    const img = new Image();\n\n    // 图片加载完成后的处理\n    img.onload = () => {\n      try {\n        // 创建canvas\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // 设置canvas尺寸为图片原始尺寸\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // 在canvas上绘制图片\n        ctx.drawImage(img, 0, 0);\n\n        // 将canvas转换为JPEG格式的blob\n        canvas.toBlob(blob => {\n          // 创建新的File对象\n          const newFile = new File([blob], file.name.replace(/\\.[^/.]+$/, '.jpg'), {\n            type: 'image/jpeg',\n            lastModified: new Date().getTime()\n          });\n          resolve(newFile);\n        }, 'image/jpeg', quality);\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    // 图片加载失败的处理\n    img.onerror = error => {\n      reject(error);\n    };\n\n    // 读取文件内容\n    const reader = new FileReader();\n    reader.onload = e => {\n      img.src = e.target.result;\n    };\n    reader.onerror = error => {\n      reject(error);\n    };\n    reader.readAsDataURL(file);\n  });\n};\n\n/**\r\n * 批量处理图片\r\n * @param {File[]} files - 图片文件数组\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\nexport const batchProcessImages = async (files, quality = 0.8) => {\n  try {\n    const processedFiles = await Promise.all(files.map(file => convertAndCompressImage(file, quality)));\n    return processedFiles;\n  } catch (error) {\n    console.error('批量处理图片失败:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["convertAndCompressImage","file","quality","Promise","resolve","reject","img","Image","onload","canvas","document","createElement","ctx","getContext","width","height","drawImage","toBlob","blob","newFile","File","name","replace","type","lastModified","Date","getTime","error","onerror","reader","FileReader","e","src","target","result","readAsDataURL","batchProcessImages","files","processedFiles","all","map","console"],"sources":["C:/Users/10150/Desktop/Hazardous-waste-management-system/frontend/src/utils/imageUtils.js"],"sourcesContent":["/**\r\n * 图片处理工具函数\r\n */\r\n\r\n/**\r\n * 将图片转换为JPEG格式并压缩\r\n * @param {File} file - 原始图片文件\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @returns {Promise<File>} - 处理后的图片文件\r\n */\r\nexport const convertAndCompressImage = (file, quality = 0.5) => {\r\n  return new Promise((resolve, reject) => {\r\n    // 创建图片对象\r\n    const img = new Image();\r\n    \r\n    // 图片加载完成后的处理\r\n    img.onload = () => {\r\n      try {\r\n        // 创建canvas\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        \r\n        // 设置canvas尺寸为图片原始尺寸\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        \r\n        // 在canvas上绘制图片\r\n        ctx.drawImage(img, 0, 0);\r\n        \r\n        // 将canvas转换为JPEG格式的blob\r\n        canvas.toBlob(\r\n          (blob) => {\r\n            // 创建新的File对象\r\n            const newFile = new File([blob], file.name.replace(/\\.[^/.]+$/, '.jpg'), {\r\n              type: 'image/jpeg',\r\n              lastModified: new Date().getTime()\r\n            });\r\n            resolve(newFile);\r\n          },\r\n          'image/jpeg',\r\n          quality\r\n        );\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    };\r\n    \r\n    // 图片加载失败的处理\r\n    img.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n    \r\n    // 读取文件内容\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      img.src = e.target.result;\r\n    };\r\n    reader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  });\r\n};\r\n\r\n/**\r\n * 批量处理图片\r\n * @param {File[]} files - 图片文件数组\r\n * @param {number} quality - 压缩质量，范围0-1，默认0.8\r\n * @returns {Promise<File[]>} - 处理后的图片文件数组\r\n */\r\nexport const batchProcessImages = async (files, quality = 0.8) => {\r\n  try {\r\n    const processedFiles = await Promise.all(\r\n      files.map(file => convertAndCompressImage(file, quality))\r\n    );\r\n    return processedFiles;\r\n  } catch (error) {\r\n    console.error('批量处理图片失败:', error);\r\n    throw error;\r\n  }\r\n}; "],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAGA,CAACC,IAAI,EAAEC,OAAO,GAAG,GAAG,KAAK;EAC9D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;;IAEvB;IACAD,GAAG,CAACE,MAAM,GAAG,MAAM;MACjB,IAAI;QACF;QACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;;QAEnC;QACAJ,MAAM,CAACK,KAAK,GAAGR,GAAG,CAACQ,KAAK;QACxBL,MAAM,CAACM,MAAM,GAAGT,GAAG,CAACS,MAAM;;QAE1B;QACAH,GAAG,CAACI,SAAS,CAACV,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;;QAExB;QACAG,MAAM,CAACQ,MAAM,CACVC,IAAI,IAAK;UACR;UACA,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAACF,IAAI,CAAC,EAAEjB,IAAI,CAACoB,IAAI,CAACC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE;YACvEC,IAAI,EAAE,YAAY;YAClBC,YAAY,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC;UACnC,CAAC,CAAC;UACFtB,OAAO,CAACe,OAAO,CAAC;QAClB,CAAC,EACD,YAAY,EACZjB,OACF,CAAC;MACH,CAAC,CAAC,OAAOyB,KAAK,EAAE;QACdtB,MAAM,CAACsB,KAAK,CAAC;MACf;IACF,CAAC;;IAED;IACArB,GAAG,CAACsB,OAAO,GAAID,KAAK,IAAK;MACvBtB,MAAM,CAACsB,KAAK,CAAC;IACf,CAAC;;IAED;IACA,MAAME,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACrB,MAAM,GAAIuB,CAAC,IAAK;MACrBzB,GAAG,CAAC0B,GAAG,GAAGD,CAAC,CAACE,MAAM,CAACC,MAAM;IAC3B,CAAC;IACDL,MAAM,CAACD,OAAO,GAAID,KAAK,IAAK;MAC1BtB,MAAM,CAACsB,KAAK,CAAC;IACf,CAAC;IACDE,MAAM,CAACM,aAAa,CAAClC,IAAI,CAAC;EAC5B,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMmC,kBAAkB,GAAG,MAAAA,CAAOC,KAAK,EAAEnC,OAAO,GAAG,GAAG,KAAK;EAChE,IAAI;IACF,MAAMoC,cAAc,GAAG,MAAMnC,OAAO,CAACoC,GAAG,CACtCF,KAAK,CAACG,GAAG,CAACvC,IAAI,IAAID,uBAAuB,CAACC,IAAI,EAAEC,OAAO,CAAC,CAC1D,CAAC;IACD,OAAOoC,cAAc;EACvB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdc,OAAO,CAACd,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}